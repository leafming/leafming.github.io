<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-06-19T20:47:21+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">iLeaf</title><subtitle>Yesterday you said tomorrow.</subtitle><author><name>叶子  ( ˘ ³˘)♥</name></author><entry><title type="html">AthenaX基于SQL的大规模流分析平台-开源项目简要分析</title><link href="http://localhost:4000/bigdata/2019/06/19/AthenaX%E5%9F%BA%E4%BA%8ESQL%E7%9A%84%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%B5%81%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/" rel="alternate" type="text/html" title="AthenaX基于SQL的大规模流分析平台-开源项目简要分析" /><published>2019-06-19T00:00:00+08:00</published><updated>2019-06-19T00:00:00+08:00</updated><id>http://localhost:4000/bigdata/2019/06/19/AthenaX%E5%9F%BA%E4%BA%8ESQL%E7%9A%84%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%B5%81%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90</id><content type="html" xml:base="http://localhost:4000/bigdata/2019/06/19/AthenaX%E5%9F%BA%E4%BA%8ESQL%E7%9A%84%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%B5%81%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/">&lt;blockquote&gt;
  &lt;p&gt;文主要关于Uber开源的AthenaX基于SQL的大规模流分析平台的简单整理。想要学习一下基于SQL流处理平台的思路，将看到的博客和文章简单整理了一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;主要参考&quot;&gt;主要参考&lt;/h1&gt;
&lt;p&gt;这次把主要参考文章列在了最前面，主要是基本上此文就是在前人的基础上整理在了一起，此文原创很少，参考链接如下:&lt;br /&gt;
前人博客-Uber Athenax项目核心技术点剖析：&lt;a href=&quot;https://blog.csdn.net/yanghua_kobe/article/details/78573578&quot;&gt;https://blog.csdn.net/yanghua_kobe/article/details/78573578&lt;/a&gt;&lt;br /&gt;
介绍文章-Introducing AthenaX, Uber Engineering’s Open Source Streaming Analytics Platform：&lt;a href=&quot;https://eng.uber.com/athenax/&quot;&gt;https://eng.uber.com/athenax/&lt;/a&gt;&lt;br /&gt;
官网说明：&lt;a href=&quot;https://athenax.readthedocs.io/en/latest/&quot;&gt;https://athenax.readthedocs.io/en/latest/&lt;/a&gt;&lt;br /&gt;
博客-如何构建一个flink sql平台:&lt;a href=&quot;https://my.oschina.net/qiangzigege/blog/2252975&quot;&gt;https://my.oschina.net/qiangzigege/blog/2252975&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;athenax特点&quot;&gt;AthenaX特点&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Streaming SQL&lt;br /&gt;
production-ready流处理分析，支持Filtering, projecting和combining操作。&lt;br /&gt;
支持基于processing time和event time的GroupWindow聚合。&lt;br /&gt;
支持定制化SQL：用户定义函数（UDF）、用户定义聚合函数（UDAF）和用户定义表函数（UDTF-测试）。&lt;/li&gt;
  &lt;li&gt;高效的执行过程&lt;br /&gt;
为了满足Uber业务的规模化要求，AthenaX 对 SQL 查询进行了编译与优化，并将其交付至分布式流应用程序当中以确保仅利用 8 套 YARN 容器即可实现每秒数百万次的消息处理操作。&lt;/li&gt;
  &lt;li&gt;监控和自动故障恢复&lt;br /&gt;
AthenaX 以端到端方式管理各应用程序，具体包括持续监控其运行状态、根据输入数据大小自动进行规模伸缩，且可顺利在节点或者整体数据中心发生故障时通过故障转移保证业务的正常恢复。&lt;/li&gt;
  &lt;li&gt;资源估算和自动缩放-AthenaX jobs自动扩展等&lt;br /&gt;
AthenaX根据查询和输入数据的吞吐量估算vcores和内存的数量。AthenaX master会持续监视每个作业的watermarks和垃圾回收统计信息，并在必要时重新启动它们。Flink的容错性机制能够保障job运行正确的结果。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;依赖组件&quot;&gt;依赖组件&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;AthenaX构建在Apache Calcite以及Apache Flink之上&lt;br /&gt;
Apache Calcite 是一款开源SQL解析工具, 可以将各种SQL语句解析成抽象语法术AST(Abstract Syntax Tree), 之后通过操作AST就可以把SQL中所要表达的算法与关系体现在具体代码之中。&lt;br /&gt;
Apache Flink是一个面向分布式数据流处理和批量数据处理的开源计算平台,它能够基于同一个Flink运行时(FlinkRuntime),提供支持流处理和批处理两种类型应用的功能。&lt;/li&gt;
  &lt;li&gt;采用YARN集群来管理Job&lt;/li&gt;
  &lt;li&gt;LevelDB作为持久化存储&lt;br /&gt;
LevelDB是Google开源的持久化KV单机数据库,具有很高的随机写,顺序读/写性能,但是随机读的性能很一般,也就是说,LevelDB很适合应用在查询较少,而写很多的场景。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;架构说明&quot;&gt;架构说明&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-06-19-AthenaX架构.png?raw=true&quot; alt=&quot;2019-06-19-AthenaX架构&quot; /&gt;&lt;br /&gt;
AthenaX平台一般架构如上图。&lt;br /&gt;
Data Sources&lt;br /&gt;
Output:AthenaX支持多种数据源和输出。 &lt;br /&gt;
AthenaX platform&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;AthenaX master：管理job的全生命周期。&lt;/li&gt;
  &lt;li&gt;catalogs 和connectors：描述 AthenaX jobs如何与外部组件联系。
    &lt;ol&gt;
      &lt;li&gt;Catalog和connectors是可插拔的。Catalog指定了如何将SQL中的表映射到source或sink。Connectors定义AthenaX如何与外部系统交互。（如发布到Kafka主题或进行RPC调用）&lt;/li&gt;
      &lt;li&gt;用户自定义的Catalogs必须实现AthenaXTableCatalogProvider。Connectors必须实现DataSinkProvider或者TableSourceConverter。例子：https://github.com/uber/AthenaX/tree/master/athenax-vm-connectors/athenax-vm-connector-kafka/src/main/java/com/uber/athenax/vm/connectors/kafka&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;athenax中的一些概念&quot;&gt;AthenaX中的一些概念&lt;/h1&gt;
&lt;p&gt;Job：流式分析应用程序。包括SQL、运行集群、所需资源。&lt;br /&gt;
Catalog：描述了如何将SQL中的table转换为data source或data sink。&lt;br /&gt;
Cluster：运行AthenaX job 的YARN cluster。&lt;br /&gt;
Instance：通过AthenaX job 转换而来的运行在特定集群上的Flink application。&lt;/p&gt;

&lt;h1 id=&quot;athenax的工作流程&quot;&gt;AthenaX的工作流程&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;用户使用SQL开发作业，通过 REST APIs并将其提交给AthenaX master。&lt;/li&gt;
  &lt;li&gt;AthenaX master验证查询并将其编译为Flink作业。
    &lt;ol&gt;
      &lt;li&gt;为了有效地执行Athenax jobs，Athenax使用Flink’s Table and SQL APIs将AthenaX jobs编译成本地的Flink应用程序。Athenax将catalogs和parameters（例如并行性）以及job的SQL编译为一个Flink application，形成Flink里的JobGraph。&lt;/li&gt;
      &lt;li&gt;【未来】Athenax支持用户自定义函数的SQL。用户可以指定附加的JAR随SQL一起加载。为了安全地编译它们，Athenax在专用的过程中编译SQL。但是，在当前版本中，该功能（尤其是对UDF JAR的本地化）尚未完全实现。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;AthenaX master会将其打包、部署到YARN集群中执行。部署完成后，Athenax主机会持续监控作业的状态，并在出现故障时将其恢复。
    &lt;ol&gt;
      &lt;li&gt;Athenax使用两种状态描述作业的运行状态。第一个状态是desired state，它描述了集群和作业所需的启动资源。第二个是actual state，每个job的已创建instance的资源。&lt;/li&gt;
      &lt;li&gt;watchdog周期性的计算actual state并将其与desired state进行比较，AthenaX master可以根据差异启动或终止相应的Yarn application，这种情况下启动的作业只是对failed job的恢复。Auto scaling的处理也类似。需要注意，所有的actual state都是“soft states”，也就是说，它们可以通过Yarn cluster来获取。这样的设计允许AthenaX控件在多个区域中运行，前提是（1）底层持久数据存储在部署的区域中可用，并且（2）watchdog知道多个可用区域中的活动主机。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;作业开始处理数据并将结果输出到外部系统（例如，Kafka）。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;athenax核心技术点&quot;&gt;AthenaX核心技术点&lt;/h1&gt;
&lt;p&gt;Athenax它提供了一个对Flink进行扩展以利用其运行时的一种机制。&lt;/p&gt;

&lt;h2 id=&quot;准备工作&quot;&gt;准备工作&lt;/h2&gt;
&lt;p&gt;下载源码，编译：&lt;br /&gt;
问题：Class “ExtendedJobDefinition, JobDefinition, JobDefinitionDesiredstate and JobDefinitionResource” are not in package &lt;br /&gt;
解决：The “missing” classes are generated during the compilation process. You can find them once you run mvn clean compile install。&lt;/p&gt;

&lt;h2 id=&quot;athenax主要分为以下几个模块&quot;&gt;AthenaX主要分为以下几个模块&lt;/h2&gt;
&lt;p&gt;athenax-backend：项目的后端服务实现。&lt;br /&gt;
athenax-vm-compiler：主要负责将SQL编译为Flink作业。&lt;br /&gt;
athenax-vm-api：Athenax提供给用户的去实现的一些API接口。&lt;br /&gt;
athennax-vm-connectors：开放给用户 扩展的连接器。&lt;/p&gt;

&lt;h2 id=&quot;athenax-backend&quot;&gt;athenax-backend&lt;/h2&gt;
&lt;p&gt;项目的后端服务实现，提供了一个运行时实例。&lt;br /&gt;
其主要启动步骤分为两步：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;启动一个web server(com.uber.athenax.backend.server.WebServer)，用来接收restful的各种服务请求；&lt;br /&gt;
这里的web server，事实上是一个Glashfish中的Grizzly所提供的一个轻量级的http server（Glashfish:Java EE应用服务器的实现;Grizzly:基于Java NIO实现的服务器），它也具备处理动态请求（web container，Servlet）的能力。&lt;br /&gt;
RESTful API这块，AthenaX使用了swagger这一API开发框架来提供部分代码（实体类/服务接口类）的生成。&lt;br /&gt;
web server接收用户的RESTful API请求，这些API可以分成三类：&lt;br /&gt;
（1）Cluster: 集群相关的信息&lt;br /&gt;
（2）Instance: Job运行时相关的信息&lt;br /&gt;
（3）Job: 作业本身的信息；&lt;/li&gt;
  &lt;li&gt;启动了一个ServerContext（上下文-com.uber.athenax.backend.server.ServerContext），它封装了一些核心对象，是服务的具体提供者:&lt;br /&gt;
job store：一个基于LevelDB的job元数据存储机制；&lt;br /&gt;
job manager：注意这与Flink的JobManager没有关系，这是AthenaX封装出来的一个对象，用于对SQL Job进行管理；&lt;br /&gt;
instance manager：一个instance manager管理着部署在YARN集群上所有正在被执行的job；&lt;br /&gt;
watch dog：提供了对job的状态、心跳的检测，以适时进行failover；&lt;br /&gt;
…&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;athenax-vm-compiler&quot;&gt;athenax-vm-compiler&lt;/h2&gt;
&lt;p&gt;主要实现将SQL编译为Flink作业。分为3部分：&lt;br /&gt;
planer：计划器，该模块的入口，它会顺序调用parser、validator、executor，最终得到一个称之为作业编译结果的JobCompilationResult对象；&lt;br /&gt;
parser：编译器，这里主要是针对其对SQL的扩展提供相应的解析实现，主要是对Calcite api的实现，最终得到SqlNode集合SqlNodeList；&lt;br /&gt;
validator：校验；&lt;br /&gt;
executor：真正完成所谓的”编译“工作，这里编译之所以加引号，其实只是借助于Flink的API得到对应的JobGraph；&lt;br /&gt;
这里，值得一提的是其”编译“的实现机制。AthenaX最终是要将其SQL Job提交给Flink运行时去执行，而对Flink而言JobGraph是其唯一识别的Job描述的对象，所以它最关键的一点就是需要得到其job的JobGraph。&lt;br /&gt;
整体调用过程：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Athenax Jobmanger编译
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//com.uber.athenax.backend.server.jobs.JobManager#compile Athenax Jobmanager编译
public JobCompilationResult compile(JobDefinition job, JobDefinitionDesiredstate spec) throws Throwable {
  Map&amp;lt;String, AthenaXTableCatalog&amp;gt; inputs = catalogProvider.getInputCatalog(spec.getClusterId());
 AthenaXTableCatalog output = catalogProvider.getOutputCatalog(spec.getClusterId(), job.getOutputs());
 Planner planner = new Planner(inputs, output);
 return planner.sql(job.getQuery(), Math.toIntExact(spec.getResource().getVCores()));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Planner sql方法，返回JobCompilationResult，其中JobDescriptor是其Job业务相关的信息。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public JobCompilationResult sql(String sql, int parallelism) throws Throwable {
//解析
 SqlNodeList stmts = parse(sql);
 //校验
 Validator validator = new Validator();
 validator.validateQuery(stmts);
 //Job相关信息
 JobDescriptor job = new JobDescriptor(
//输入源Catalog-将SQL中的table转换为data source
 inputs,
 //自定义fun
 validator.userDefinedFunctions(),
 //Catalog输出源-将SQL中的table转换为data sink
 outputs,
 //并行度
 parallelism,
 //SQL
 validator.statement().toString());
 // 调用excutor，使用Flink的API得到对应的JobGraph,res.jobGraph()
 // 说明：AthenX采用了运行时执行构造命令行执行JobCompiler的方法，然后利用socket+标准输出重定向的方式，来模拟UNIX PIPELINE，可能没必要这么绕弯路，直接调用就行了。
 // uses contained executor instead of direct compile for: JobCompiler.compileJob(job); 实际上即调用JobCompiler.compileJob(job)
 CompilationResult res = new ContainedExecutor().run(job);
 if (res.remoteThrowable() != null) {
throw res.remoteThrowable();
 }
return new JobCompilationResult(res.jobGraph(),
 validator.userDefinedFunctions().values().stream().map(Path::new).collect(Collectors.toList()));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;说明：&lt;br /&gt;
（1）以上具体的触发机制，采用了运行时（com.uber.athenax.vm.compiler.executor.ContainedExecutor）执行构造命令行执行JobCompiler的方法，然后利用套接字+标准输出重定向的方式，来模拟UNIX PIPELINE，可以理解成直接调用JobCompiler.compileJob(job)。&lt;br /&gt;
（2）parse的代码生成&lt;br /&gt;
值得一提的是，parser涉及到具体的语法，这一块为了体现灵活性。AthenaX将解析器的实现类跟SQL语法绑定在一起通过fmpp(文本模板预处理器)的形式进行代码生成。&lt;br /&gt;
fmpp是一个支持freemark语法的文本预处理器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;JobCompiler（com.uber.athenax.vm.compiler.executor.JobCompiler）的compileJob方法，构造ComplicationResult。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//构造CompilationResult（核心：构造JobGraph）
public static CompilationResult compileJob(JobDescriptor job) {
  //flink env
 StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.createLocalEnvironment();
 StreamTableEnvironment env = StreamTableEnvironment.getTableEnvironment(execEnv);
 execEnv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
 CompilationResult res = new CompilationResult();
 try {
 //getJobGraph
 res.jobGraph(new JobCompiler(env, job).getJobGraph());
 } catch (IOException e) {
 res.remoteThrowable(e);
 }
  return res;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;核心在于上面的getJobGraph（com.uber.athenax.vm.compiler.executor.JobCompiler#getJobGraph）方法。之前JobDescriptor是其Job业务相关的信息，这里动态设置非固定部分。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//构造JobGraph 利用Flink的Table&amp;amp;SQL API编写的Table&amp;amp;SQL 程序模板
JobGraph getJobGraph() throws IOException {
  StreamExecutionEnvironment exeEnv = env.execEnv();
 exeEnv.setParallelism(job.parallelism());
 //AthenaX动态设置注册registerUdfs和registerInputCatalogs
 this
 .registerUdfs()
   .registerInputCatalogs();
 //flink table api
 Table table = env.sqlQuery(job.sql());
 for (String t : job.outputs().listTables()) {
 table.writeToSink(getOutputTable(job.outputs().getTable(t)));
 }
  //直接调用StreamExecutionEnvironment#getStreamGraph就可以自动获得JobGraph对象
 StreamGraph streamGraph = exeEnv.getStreamGraph();
 //JobGraph的生成还是由Flink 自己提供的，而AthenaX只需要拼凑并触发该对象的生成
 return streamGraph.getJobGraph();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;其中调用env.sql()这个方法说明它本质没能真正脱离Flink Table&amp;amp;SQL。&lt;br /&gt;
设置完成之后，通过调用StreamExecutionEnvironment#getStreamGraph就可以自动获得JobGraph对象，因此JobGraph的生成还是由Flink 自己提供的，而AthenaX只需要拼凑并触发该对象的生成。  生成后会通过flink的yarn client实现（com.uber.athenax.backend.server.yarn.JobDeployer），将JobGraph提交给YARN集群，并启动Flink运行时执行Job。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;athenax-vm-api&quot;&gt;athenax-vm-api&lt;/h2&gt;
&lt;p&gt;这个模块就是Athenax提供给用户的去实现的一些API接口，它们是：&lt;br /&gt;
function：各种函数的rich化(open/close方法对)扩展；&lt;br /&gt;
catalog：table / source、sink的映射；&lt;br /&gt;
sink provider：sink的扩展接口。&lt;/p&gt;

&lt;h2 id=&quot;athennax-vm-connectors&quot;&gt;athennax-vm-connectors&lt;/h2&gt;
&lt;p&gt;开放给用户去扩展的连接器，目前只提供了kafka这一个连接器的实现。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;至此，本篇内容完成。&lt;/p&gt;</content><author><name>叶子  ( ˘ ³˘)♥</name></author><category term="Flink" /><summary type="html">文主要关于Uber开源的AthenaX基于SQL的大规模流分析平台的简单整理。想要学习一下基于SQL流处理平台的思路，将看到的博客和文章简单整理了一下。 主要参考 这次把主要参考文章列在了最前面，主要是基本上此文就是在前人的基础上整理在了一起，此文原创很少，参考链接如下: 前人博客-Uber Athenax项目核心技术点剖析：https://blog.csdn.net/yanghua_kobe/article/details/78573578 介绍文章-Introducing AthenaX, Uber Engineering’s Open Source Streaming Analytics Platform：https://eng.uber.com/athenax/ 官网说明：https://athenax.readthedocs.io/en/latest/ 博客-如何构建一个flink sql平台:https://my.oschina.net/qiangzigege/blog/2252975 AthenaX特点 Streaming SQL production-ready流处理分析，支持Filtering, projecting和combining操作。 支持基于processing time和event time的GroupWindow聚合。 支持定制化SQL：用户定义函数（UDF）、用户定义聚合函数（UDAF）和用户定义表函数（UDTF-测试）。 高效的执行过程 为了满足Uber业务的规模化要求，AthenaX 对 SQL 查询进行了编译与优化，并将其交付至分布式流应用程序当中以确保仅利用 8 套 YARN 容器即可实现每秒数百万次的消息处理操作。 监控和自动故障恢复 AthenaX 以端到端方式管理各应用程序，具体包括持续监控其运行状态、根据输入数据大小自动进行规模伸缩，且可顺利在节点或者整体数据中心发生故障时通过故障转移保证业务的正常恢复。 资源估算和自动缩放-AthenaX jobs自动扩展等 AthenaX根据查询和输入数据的吞吐量估算vcores和内存的数量。AthenaX master会持续监视每个作业的watermarks和垃圾回收统计信息，并在必要时重新启动它们。Flink的容错性机制能够保障job运行正确的结果。 依赖组件 AthenaX构建在Apache Calcite以及Apache Flink之上 Apache Calcite 是一款开源SQL解析工具, 可以将各种SQL语句解析成抽象语法术AST(Abstract Syntax Tree), 之后通过操作AST就可以把SQL中所要表达的算法与关系体现在具体代码之中。 Apache Flink是一个面向分布式数据流处理和批量数据处理的开源计算平台,它能够基于同一个Flink运行时(FlinkRuntime),提供支持流处理和批处理两种类型应用的功能。 采用YARN集群来管理Job LevelDB作为持久化存储 LevelDB是Google开源的持久化KV单机数据库,具有很高的随机写,顺序读/写性能,但是随机读的性能很一般,也就是说,LevelDB很适合应用在查询较少,而写很多的场景。 架构说明 AthenaX平台一般架构如上图。 Data Sources Output:AthenaX支持多种数据源和输出。 AthenaX platform AthenaX master：管理job的全生命周期。 catalogs 和connectors：描述 AthenaX jobs如何与外部组件联系。 Catalog和connectors是可插拔的。Catalog指定了如何将SQL中的表映射到source或sink。Connectors定义AthenaX如何与外部系统交互。（如发布到Kafka主题或进行RPC调用） 用户自定义的Catalogs必须实现AthenaXTableCatalogProvider。Connectors必须实现DataSinkProvider或者TableSourceConverter。例子：https://github.com/uber/AthenaX/tree/master/athenax-vm-connectors/athenax-vm-connector-kafka/src/main/java/com/uber/athenax/vm/connectors/kafka AthenaX中的一些概念 Job：流式分析应用程序。包括SQL、运行集群、所需资源。 Catalog：描述了如何将SQL中的table转换为data source或data sink。 Cluster：运行AthenaX job 的YARN cluster。 Instance：通过AthenaX job 转换而来的运行在特定集群上的Flink application。 AthenaX的工作流程 用户使用SQL开发作业，通过 REST APIs并将其提交给AthenaX master。 AthenaX master验证查询并将其编译为Flink作业。 为了有效地执行Athenax jobs，Athenax使用Flink’s Table and SQL APIs将AthenaX jobs编译成本地的Flink应用程序。Athenax将catalogs和parameters（例如并行性）以及job的SQL编译为一个Flink application，形成Flink里的JobGraph。 【未来】Athenax支持用户自定义函数的SQL。用户可以指定附加的JAR随SQL一起加载。为了安全地编译它们，Athenax在专用的过程中编译SQL。但是，在当前版本中，该功能（尤其是对UDF JAR的本地化）尚未完全实现。 AthenaX master会将其打包、部署到YARN集群中执行。部署完成后，Athenax主机会持续监控作业的状态，并在出现故障时将其恢复。 Athenax使用两种状态描述作业的运行状态。第一个状态是desired state，它描述了集群和作业所需的启动资源。第二个是actual state，每个job的已创建instance的资源。 watchdog周期性的计算actual state并将其与desired state进行比较，AthenaX master可以根据差异启动或终止相应的Yarn application，这种情况下启动的作业只是对failed job的恢复。Auto scaling的处理也类似。需要注意，所有的actual state都是“soft states”，也就是说，它们可以通过Yarn cluster来获取。这样的设计允许AthenaX控件在多个区域中运行，前提是（1）底层持久数据存储在部署的区域中可用，并且（2）watchdog知道多个可用区域中的活动主机。 作业开始处理数据并将结果输出到外部系统（例如，Kafka）。 AthenaX核心技术点 Athenax它提供了一个对Flink进行扩展以利用其运行时的一种机制。 准备工作 下载源码，编译： 问题：Class “ExtendedJobDefinition, JobDefinition, JobDefinitionDesiredstate and JobDefinitionResource” are not in package 解决：The “missing” classes are generated during the compilation process. You can find them once you run mvn clean compile install。 AthenaX主要分为以下几个模块 athenax-backend：项目的后端服务实现。 athenax-vm-compiler：主要负责将SQL编译为Flink作业。 athenax-vm-api：Athenax提供给用户的去实现的一些API接口。 athennax-vm-connectors：开放给用户 扩展的连接器。 athenax-backend 项目的后端服务实现，提供了一个运行时实例。 其主要启动步骤分为两步： 启动一个web server(com.uber.athenax.backend.server.WebServer)，用来接收restful的各种服务请求； 这里的web server，事实上是一个Glashfish中的Grizzly所提供的一个轻量级的http server（Glashfish:Java EE应用服务器的实现;Grizzly:基于Java NIO实现的服务器），它也具备处理动态请求（web container，Servlet）的能力。 RESTful API这块，AthenaX使用了swagger这一API开发框架来提供部分代码（实体类/服务接口类）的生成。 web server接收用户的RESTful API请求，这些API可以分成三类： （1）Cluster: 集群相关的信息 （2）Instance: Job运行时相关的信息 （3）Job: 作业本身的信息； 启动了一个ServerContext（上下文-com.uber.athenax.backend.server.ServerContext），它封装了一些核心对象，是服务的具体提供者: job store：一个基于LevelDB的job元数据存储机制； job manager：注意这与Flink的JobManager没有关系，这是AthenaX封装出来的一个对象，用于对SQL Job进行管理； instance manager：一个instance manager管理着部署在YARN集群上所有正在被执行的job； watch dog：提供了对job的状态、心跳的检测，以适时进行failover； … athenax-vm-compiler 主要实现将SQL编译为Flink作业。分为3部分： planer：计划器，该模块的入口，它会顺序调用parser、validator、executor，最终得到一个称之为作业编译结果的JobCompilationResult对象； parser：编译器，这里主要是针对其对SQL的扩展提供相应的解析实现，主要是对Calcite api的实现，最终得到SqlNode集合SqlNodeList； validator：校验； executor：真正完成所谓的”编译“工作，这里编译之所以加引号，其实只是借助于Flink的API得到对应的JobGraph； 这里，值得一提的是其”编译“的实现机制。AthenaX最终是要将其SQL Job提交给Flink运行时去执行，而对Flink而言JobGraph是其唯一识别的Job描述的对象，所以它最关键的一点就是需要得到其job的JobGraph。 整体调用过程： Athenax Jobmanger编译 //com.uber.athenax.backend.server.jobs.JobManager#compile Athenax Jobmanager编译 public JobCompilationResult compile(JobDefinition job, JobDefinitionDesiredstate spec) throws Throwable { Map&amp;lt;String, AthenaXTableCatalog&amp;gt; inputs = catalogProvider.getInputCatalog(spec.getClusterId()); AthenaXTableCatalog output = catalogProvider.getOutputCatalog(spec.getClusterId(), job.getOutputs()); Planner planner = new Planner(inputs, output); return planner.sql(job.getQuery(), Math.toIntExact(spec.getResource().getVCores())); } Planner sql方法，返回JobCompilationResult，其中JobDescriptor是其Job业务相关的信息。 public JobCompilationResult sql(String sql, int parallelism) throws Throwable { //解析 SqlNodeList stmts = parse(sql); //校验 Validator validator = new Validator(); validator.validateQuery(stmts); //Job相关信息 JobDescriptor job = new JobDescriptor( //输入源Catalog-将SQL中的table转换为data source inputs, //自定义fun validator.userDefinedFunctions(), //Catalog输出源-将SQL中的table转换为data sink outputs, //并行度 parallelism, //SQL validator.statement().toString()); // 调用excutor，使用Flink的API得到对应的JobGraph,res.jobGraph() // 说明：AthenX采用了运行时执行构造命令行执行JobCompiler的方法，然后利用socket+标准输出重定向的方式，来模拟UNIX PIPELINE，可能没必要这么绕弯路，直接调用就行了。 // uses contained executor instead of direct compile for: JobCompiler.compileJob(job); 实际上即调用JobCompiler.compileJob(job) CompilationResult res = new ContainedExecutor().run(job); if (res.remoteThrowable() != null) { throw res.remoteThrowable(); } return new JobCompilationResult(res.jobGraph(), validator.userDefinedFunctions().values().stream().map(Path::new).collect(Collectors.toList())); } 说明： （1）以上具体的触发机制，采用了运行时（com.uber.athenax.vm.compiler.executor.ContainedExecutor）执行构造命令行执行JobCompiler的方法，然后利用套接字+标准输出重定向的方式，来模拟UNIX PIPELINE，可以理解成直接调用JobCompiler.compileJob(job)。 （2）parse的代码生成 值得一提的是，parser涉及到具体的语法，这一块为了体现灵活性。AthenaX将解析器的实现类跟SQL语法绑定在一起通过fmpp(文本模板预处理器)的形式进行代码生成。 fmpp是一个支持freemark语法的文本预处理器。 JobCompiler（com.uber.athenax.vm.compiler.executor.JobCompiler）的compileJob方法，构造ComplicationResult。 //构造CompilationResult（核心：构造JobGraph） public static CompilationResult compileJob(JobDescriptor job) { //flink env StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.createLocalEnvironment(); StreamTableEnvironment env = StreamTableEnvironment.getTableEnvironment(execEnv); execEnv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime); CompilationResult res = new CompilationResult(); try { //getJobGraph res.jobGraph(new JobCompiler(env, job).getJobGraph()); } catch (IOException e) { res.remoteThrowable(e); } return res; } 核心在于上面的getJobGraph（com.uber.athenax.vm.compiler.executor.JobCompiler#getJobGraph）方法。之前JobDescriptor是其Job业务相关的信息，这里动态设置非固定部分。 //构造JobGraph 利用Flink的Table&amp;amp;SQL API编写的Table&amp;amp;SQL 程序模板 JobGraph getJobGraph() throws IOException { StreamExecutionEnvironment exeEnv = env.execEnv(); exeEnv.setParallelism(job.parallelism()); //AthenaX动态设置注册registerUdfs和registerInputCatalogs this .registerUdfs() .registerInputCatalogs(); //flink table api Table table = env.sqlQuery(job.sql()); for (String t : job.outputs().listTables()) { table.writeToSink(getOutputTable(job.outputs().getTable(t))); } //直接调用StreamExecutionEnvironment#getStreamGraph就可以自动获得JobGraph对象 StreamGraph streamGraph = exeEnv.getStreamGraph(); //JobGraph的生成还是由Flink 自己提供的，而AthenaX只需要拼凑并触发该对象的生成 return streamGraph.getJobGraph(); } 其中调用env.sql()这个方法说明它本质没能真正脱离Flink Table&amp;amp;SQL。 设置完成之后，通过调用StreamExecutionEnvironment#getStreamGraph就可以自动获得JobGraph对象，因此JobGraph的生成还是由Flink 自己提供的，而AthenaX只需要拼凑并触发该对象的生成。 生成后会通过flink的yarn client实现（com.uber.athenax.backend.server.yarn.JobDeployer），将JobGraph提交给YARN集群，并启动Flink运行时执行Job。 athenax-vm-api 这个模块就是Athenax提供给用户的去实现的一些API接口，它们是： function：各种函数的rich化(open/close方法对)扩展； catalog：table / source、sink的映射； sink provider：sink的扩展接口。 athennax-vm-connectors 开放给用户去扩展的连接器，目前只提供了kafka这一个连接器的实现。 至此，本篇内容完成。</summary></entry><entry><title type="html">记一次Flink Checkpoint超时问题排查</title><link href="http://localhost:4000/bigdata/2019/05/16/%E8%AE%B0%E4%B8%80%E6%AC%A1FlinkCheckpoint%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/" rel="alternate" type="text/html" title="记一次Flink Checkpoint超时问题排查" /><published>2019-05-16T00:00:00+08:00</published><updated>2019-05-16T00:00:00+08:00</updated><id>http://localhost:4000/bigdata/2019/05/16/%E8%AE%B0%E4%B8%80%E6%AC%A1FlinkCheckpoint%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/bigdata/2019/05/16/%E8%AE%B0%E4%B8%80%E6%AC%A1FlinkCheckpoint%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/">&lt;blockquote&gt;
  &lt;p&gt;本文主要关于Flink Checkpoint超时问题排查过程，基于Flink1.7.1版本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近在使用Flink进行流处理开发，开发时间不长，但是经历了很长时间的调优过程。最近发现Checkpoint经常出现超时失败的情况，所以对这一现象进行了排查。&lt;/p&gt;

&lt;p&gt;针对Flink Checkpoint超时问题，已经有一个大神最近刚刚写了关于这个的排查思路给了很多的参考，我也跟着他的思路，来进行进一步排查。参考文章如下:&lt;a href=&quot;https://www.jianshu.com/p/dff71581b63b&quot;&gt;Flink常见Checkpoint超时问题排查思路&lt;/a&gt;，这个文章最开始对于checkpoint超时做了分析，后来给出了一般的排查方式，我也是对照他的排查方式来查找问题的。下面文章我将对此问题排查过程进行一下记录。&lt;/p&gt;

&lt;h1 id=&quot;flink-checkpoint超时问题排查&quot;&gt;Flink Checkpoint超时问题排查&lt;/h1&gt;
&lt;p&gt;最近程序经常出现checkpoint超时失败的问题，因此去排查了一下问题，查找资料的时候看到了上文提到的文章，&lt;a href=&quot;https://www.jianshu.com/p/dff71581b63b&quot;&gt;Flink常见Checkpoint超时问题排查思路&lt;/a&gt;，在他最初的分析中指出“可能是因为Barrier对齐原因导致的checkpoint超时”，我就对这这个思路去排查了下问题。&lt;br /&gt;
首先，可以看到下图checkpoint开始失败(这个图是后来再截的补充的，所以时间和ck ID与后续内容不一致，为了表明现象补充的截图，现象是一样)。&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-04-25-FlinkUICheckpoint超时现象.png?raw=true&quot; alt=&quot;FlinkUICheckpoint开始失败&quot; /&gt;&lt;br /&gt;
点开看下详细信息，发现”narrowReduce-&amp;gt;Sink:es”整体显示的n/a,但是它的上游”wideReduce-toNarrow”可以看出是479/480,可以看到是卡在了一个task上。&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-checkpoint超时详细信息.png?raw=true&quot; alt=&quot;2019-05-16-checkpoint超时详细信息&quot; /&gt; &lt;br /&gt;
点开show subtasks,可以看一下，卡在了编号97的subtask上。&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-checkpointSubTask详细信息.png?raw=true&quot; alt=&quot;2019-05-16-checkpointSubTask详细信息&quot; /&gt;&lt;br /&gt;
这里有个问题，看参考文章里写的是“这个id并不是subtaskIndex”，这里显示的97，但是我理解此97确实为subtaskIndex,对于subtaskIndex的描述我看了源码里写的是：“The task’s index in the subtask group.”，对于此我的理解是，我们程序中没有划分subtask group，都是默认的“default”，因此暂时可以用此subtaskIndex标识一个subtask，但是如果程序中划分了group，那这个id就不准确了。因此后续查看了一下，executionId也就是通过metric采集到的taskAttemptId，看它的描述是：“The execution Id uniquely identifying the executed task represented by this metrics group.”，因此后续对于查看subtask维度的监控，可以使用taskAttemptId作为标识。&lt;br /&gt;
因此，假设我们不能使用此subtaskIndex ID作为标示去查询此task的信息，我们就继续跟随参考文章的步骤，去查看下JobManager的日志，查看到日志如下：&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-checkpoint超时jobmanager日志.png?raw=true&quot; alt=&quot;2019-05-16-checkpoint超时jobmanager日志&quot; /&gt;&lt;br /&gt;
从上面日志截图可以看到这个checkpoint的一些延迟的信息，可以看到一个taskAttemptID，然后我们可以去监控上查下相关信息，我们拿“0d2b9593f56af1f5719a00bf4f6”这个taskAttemptId去查一下:&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-checkpoint超时排查监控id关系.png?raw=true&quot; alt=&quot;2019-05-16-checkpoint超时排查监控id关系&quot; /&gt;&lt;br /&gt;
正好看到，taskIndexId显示的为96，因为Flink UI上ID从1开始算的，监控采集的指标ID从0开始算，因此此task即为我们上面看到的卡住的task，可以看到taskName也为“wideReduce-toNarrow”。&lt;br /&gt;
参考文章中有说明，Checkpoint时间要么花费在barrier对齐，要么花费在异步状态遍历和写hdfs。而我们的状态并不是很大，因此可以判断下是否是barrier没有对其，barrier下游无法对齐的主要原因还是在于下游消费能力不足，会导致buffer堆积一段时间，但这时并不足以造成上游反压，因为反压需要下游channel持续无法写入，导致tcp阻塞，导致上游的outputbuffer占满才会引起反压。&lt;br /&gt;
因此，我们去查看一下flink对于buffer的几个指标。flink针对与task buffers metircs的监控有inputQueueLength（队列输入缓冲区的数量）、outputQueueLength（队列输出缓冲区的数量）、inPoolUsage（输入缓冲区使用情况评估）、outPoolUsage（输出缓冲区使用情况评估）。其中input
QueueLength（队列输入缓冲区的数量）我们来参考一下。那么就去看一下具体的监控，如下图：&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-checkpoint超时排查inputQueuelength监控.png?raw=true&quot; alt=&quot;2019-05-16-checkpoint超时排查inputQueuelength监控&quot; /&gt;&lt;br /&gt;
可以看到，的确在那段时间，对应subTask的inputQueuelength值达到了一条横线，也就是达到了一个最大值，判断inputQueuelength满了，此时发送barrier无法对其引起了Checkpoint超时。此时可以断定下游消费能力不足，但是是因为数据倾斜导致的还是因为下游其他原因阻塞，我们还不能轻易下结论，需要继续排查。不过我们可以确定的是，我们需要计算一个inputQueuelength的最大值怎么计算，便于以后更好的监控和告警，快速定位。对于inputQueuelength最大值如何计算，后续会单独整理一个文章来说明。&lt;br /&gt;
为了判断是否是数据倾斜原因还是其他原因导致的问题，可以具体继续分析一下，我们再继续看一下我们采集的此算子每秒records的监控，如下图：&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-checkpoint超时问题排查numrecordInperSecond监控.png?raw=true&quot; alt=&quot;2019-05-16-checkpoint超时问题排查numrecordInperSecond监控&quot; /&gt;&lt;br /&gt;
可以看到，的确在那段时间，数据量非常大，而且我们也可以观察到，后续的15:55左右也是不同的subTask的inputQueueLength满了，也可以发现它们的每秒in的数据量较多，并且我们keyby选用的key是有每5min的时间戳的，所以根据in数据量也可以看得出，subtask差不多是每5min变化一次，就可以初步判断出，可能是因为出现了热点导致了数据倾斜，后续我们需要根据这个问题进行一次热点处理操作。&lt;br /&gt;
此次的checkpoint超时问题就可以暂时排查到这里，后续需要进行热点处理操作，对于针对这次热点打散的相关文章，如果有时间也会整理一下。&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;后续&quot;&gt;后续&lt;/h1&gt;
&lt;p&gt;之前的checkpoint超时问题可以判断可能是因为热点问题导致的，因此先去做了打散操作处理了热点，基本解决了问题。后续其他流也出现了类似问题，但是此次问题不是因为数据倾斜的问题，具体排查过程再来一次如下：&lt;br /&gt;
通过UI页面看到卡在“Sink：job”的subtaskIndex为1的subtask处，这次直接去看了InputQueueLength的监控，我们通过taskName、TaskAttemptID、TaskIndex 3个维度看一下监控如下：&lt;br /&gt;
&lt;strong&gt;inputQueuelength taskName维度&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-2inputQueuelengthtaskName维度.png?raw=true&quot; alt=&quot;2019-05-16-2inputQueuelengthtaskName维度&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;inputQueuelength TaskAttemptID维度&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-2inputQueuelengthTaskAttemptID维度.png?raw=true&quot; alt=&quot;2019-05-16-2inputQueuelengthTaskAttemptID维度&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;inputQueueLength SubTaskIndex维度&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-2inputQueueLengthSubTaskIndex维度.png?raw=true&quot; alt=&quot;2019-05-16-2inputQueueLengthSubTaskIndex维度&quot; /&gt;&lt;br /&gt;
通过上面三个图可以看出，这次的问题较之前不一样，这次可以发现是某个subTask的InputQueueLength先达到了一个“满”的状态，并且一直是这一个subTask，并没有变化的情况，所以我们可以具体登陆到那台host上去看一下问题，可以直接通过监控查询到具体哪台host：&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-2inputQueueLength数据查看.png?raw=true&quot; alt=&quot;2019-05-16-2inputQueueLength数据查看&quot; /&gt;&lt;br /&gt;
可以看到上面三个图的taskName、subtaskIndex、TaskAttemptId正好对应上，那么我们去它所在的“…169”机器上去看一下具体情况。其他排查过程省略，后来我截取了一下堆栈信息：jstack -l id &amp;gt; billing，如下：&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-inputQueueLength排查堆栈信息截取.png?raw=true&quot; alt=&quot;2019-05-16-inputQueueLength排查堆栈信息截取&quot; /&gt;&lt;br /&gt;
通过此内容可以发现卡在BulkRequestHandler的88行，88行内容如下：&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-05-16-checkpoint超时es问题.png?raw=true&quot; alt=&quot;2019-05-16-checkpoint超时es问题&quot; /&gt;&lt;br /&gt;
可以判断写入es的时候发生了阻塞，我们现在使用的是es6具体后续排查优化一下，有时间的话再写一篇详细继续说明一下。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;至此，本篇内容完成。 小渣叶通过这次排查的最终感悟：一个好的全面的监控实在太重要了！&lt;/p&gt;</content><author><name>叶子  ( ˘ ³˘)♥</name></author><category term="Flink" /><summary type="html">本文主要关于Flink Checkpoint超时问题排查过程，基于Flink1.7.1版本。 最近在使用Flink进行流处理开发，开发时间不长，但是经历了很长时间的调优过程。最近发现Checkpoint经常出现超时失败的情况，所以对这一现象进行了排查。 针对Flink Checkpoint超时问题，已经有一个大神最近刚刚写了关于这个的排查思路给了很多的参考，我也跟着他的思路，来进行进一步排查。参考文章如下:Flink常见Checkpoint超时问题排查思路，这个文章最开始对于checkpoint超时做了分析，后来给出了一般的排查方式，我也是对照他的排查方式来查找问题的。下面文章我将对此问题排查过程进行一下记录。 Flink Checkpoint超时问题排查 最近程序经常出现checkpoint超时失败的问题，因此去排查了一下问题，查找资料的时候看到了上文提到的文章，Flink常见Checkpoint超时问题排查思路，在他最初的分析中指出“可能是因为Barrier对齐原因导致的checkpoint超时”，我就对这这个思路去排查了下问题。 首先，可以看到下图checkpoint开始失败(这个图是后来再截的补充的，所以时间和ck ID与后续内容不一致，为了表明现象补充的截图，现象是一样)。 点开看下详细信息，发现”narrowReduce-&amp;gt;Sink:es”整体显示的n/a,但是它的上游”wideReduce-toNarrow”可以看出是479/480,可以看到是卡在了一个task上。 点开show subtasks,可以看一下，卡在了编号97的subtask上。 这里有个问题，看参考文章里写的是“这个id并不是subtaskIndex”，这里显示的97，但是我理解此97确实为subtaskIndex,对于subtaskIndex的描述我看了源码里写的是：“The task’s index in the subtask group.”，对于此我的理解是，我们程序中没有划分subtask group，都是默认的“default”，因此暂时可以用此subtaskIndex标识一个subtask，但是如果程序中划分了group，那这个id就不准确了。因此后续查看了一下，executionId也就是通过metric采集到的taskAttemptId，看它的描述是：“The execution Id uniquely identifying the executed task represented by this metrics group.”，因此后续对于查看subtask维度的监控，可以使用taskAttemptId作为标识。 因此，假设我们不能使用此subtaskIndex ID作为标示去查询此task的信息，我们就继续跟随参考文章的步骤，去查看下JobManager的日志，查看到日志如下： 从上面日志截图可以看到这个checkpoint的一些延迟的信息，可以看到一个taskAttemptID，然后我们可以去监控上查下相关信息，我们拿“0d2b9593f56af1f5719a00bf4f6”这个taskAttemptId去查一下: 正好看到，taskIndexId显示的为96，因为Flink UI上ID从1开始算的，监控采集的指标ID从0开始算，因此此task即为我们上面看到的卡住的task，可以看到taskName也为“wideReduce-toNarrow”。 参考文章中有说明，Checkpoint时间要么花费在barrier对齐，要么花费在异步状态遍历和写hdfs。而我们的状态并不是很大，因此可以判断下是否是barrier没有对其，barrier下游无法对齐的主要原因还是在于下游消费能力不足，会导致buffer堆积一段时间，但这时并不足以造成上游反压，因为反压需要下游channel持续无法写入，导致tcp阻塞，导致上游的outputbuffer占满才会引起反压。 因此，我们去查看一下flink对于buffer的几个指标。flink针对与task buffers metircs的监控有inputQueueLength（队列输入缓冲区的数量）、outputQueueLength（队列输出缓冲区的数量）、inPoolUsage（输入缓冲区使用情况评估）、outPoolUsage（输出缓冲区使用情况评估）。其中input QueueLength（队列输入缓冲区的数量）我们来参考一下。那么就去看一下具体的监控，如下图： 可以看到，的确在那段时间，对应subTask的inputQueuelength值达到了一条横线，也就是达到了一个最大值，判断inputQueuelength满了，此时发送barrier无法对其引起了Checkpoint超时。此时可以断定下游消费能力不足，但是是因为数据倾斜导致的还是因为下游其他原因阻塞，我们还不能轻易下结论，需要继续排查。不过我们可以确定的是，我们需要计算一个inputQueuelength的最大值怎么计算，便于以后更好的监控和告警，快速定位。对于inputQueuelength最大值如何计算，后续会单独整理一个文章来说明。 为了判断是否是数据倾斜原因还是其他原因导致的问题，可以具体继续分析一下，我们再继续看一下我们采集的此算子每秒records的监控，如下图： 可以看到，的确在那段时间，数据量非常大，而且我们也可以观察到，后续的15:55左右也是不同的subTask的inputQueueLength满了，也可以发现它们的每秒in的数据量较多，并且我们keyby选用的key是有每5min的时间戳的，所以根据in数据量也可以看得出，subtask差不多是每5min变化一次，就可以初步判断出，可能是因为出现了热点导致了数据倾斜，后续我们需要根据这个问题进行一次热点处理操作。 此次的checkpoint超时问题就可以暂时排查到这里，后续需要进行热点处理操作，对于针对这次热点打散的相关文章，如果有时间也会整理一下。 后续 之前的checkpoint超时问题可以判断可能是因为热点问题导致的，因此先去做了打散操作处理了热点，基本解决了问题。后续其他流也出现了类似问题，但是此次问题不是因为数据倾斜的问题，具体排查过程再来一次如下： 通过UI页面看到卡在“Sink：job”的subtaskIndex为1的subtask处，这次直接去看了InputQueueLength的监控，我们通过taskName、TaskAttemptID、TaskIndex 3个维度看一下监控如下： inputQueuelength taskName维度 inputQueuelength TaskAttemptID维度 inputQueueLength SubTaskIndex维度 通过上面三个图可以看出，这次的问题较之前不一样，这次可以发现是某个subTask的InputQueueLength先达到了一个“满”的状态，并且一直是这一个subTask，并没有变化的情况，所以我们可以具体登陆到那台host上去看一下问题，可以直接通过监控查询到具体哪台host： 可以看到上面三个图的taskName、subtaskIndex、TaskAttemptId正好对应上，那么我们去它所在的“…169”机器上去看一下具体情况。其他排查过程省略，后来我截取了一下堆栈信息：jstack -l id &amp;gt; billing，如下： 通过此内容可以发现卡在BulkRequestHandler的88行，88行内容如下： 可以判断写入es的时候发生了阻塞，我们现在使用的是es6具体后续排查优化一下，有时间的话再写一篇详细继续说明一下。 至此，本篇内容完成。 小渣叶通过这次排查的最终感悟：一个好的全面的监控实在太重要了！</summary></entry><entry><title type="html">Flink中Checkpoint和Savepoint相关概念</title><link href="http://localhost:4000/bigdata/2019/05/08/FlinkCheckPoint%E5%92%8CSavePoint%E6%A6%82%E8%BF%B0/" rel="alternate" type="text/html" title="Flink中Checkpoint和Savepoint相关概念" /><published>2019-05-08T00:00:00+08:00</published><updated>2019-05-08T00:00:00+08:00</updated><id>http://localhost:4000/bigdata/2019/05/08/FlinkCheckPoint%E5%92%8CSavePoint%E6%A6%82%E8%BF%B0</id><content type="html" xml:base="http://localhost:4000/bigdata/2019/05/08/FlinkCheckPoint%E5%92%8CSavePoint%E6%A6%82%E8%BF%B0/">&lt;blockquote&gt;
  &lt;p&gt;本文主要关于Flink中Checkpoint和Savepoint相关概念，基于Flink1.7.1。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近在遇到了一些state相关的问题，因此就重新学习和整理了一下Flink里的Checkpoint和Savepoint相关知识，此篇文章基本上就是对于官网文章的整理和翻译，当作一篇笔记来记录一下～&lt;/p&gt;
&lt;h1 id=&quot;基础概念一览-checkpoint和savepoint的区别&quot;&gt;基础概念一览-Checkpoint和Savepoint的区别&lt;/h1&gt;
&lt;p&gt;对于Flink容错保障中，Checkpoint和Savepoint是两个关键的概念，注意区分和应用。&lt;/p&gt;
&lt;h3 id=&quot;使用场景&quot;&gt;使用场景&lt;/h3&gt;
&lt;p&gt;Checkpoint仅用于恢复意外失败的作业（走flink的job默认恢复机制）。&lt;br /&gt;
SavePoint用于用户计划的、手动的备份和恢复（代码版本更新、更改并行度、jog graph、2个程序同时运行red/blue deployment）。&lt;/p&gt;
&lt;h3 id=&quot;保留时间&quot;&gt;保留时间&lt;/h3&gt;
&lt;p&gt;Checkpoint默认情况下是作业终止会被删除可配置保留）；Savepoint作业终止后继续存在。&lt;/p&gt;
&lt;h3 id=&quot;设计目标&quot;&gt;设计目标&lt;/h3&gt;
&lt;p&gt;Checkpoint设计目标：轻量级创建；快速恢复。&lt;br /&gt;
SavePoint：生成和恢复成本更高，关注可移植性和对先前提到的作业更改的支持。&lt;/p&gt;
&lt;h3 id=&quot;维护&quot;&gt;维护&lt;/h3&gt;
&lt;p&gt;Checkpoint由flink自动维护（ created, owned, and released by Flink），Savepoint需用户维护（ created, owned, and released by user）。&lt;/p&gt;
&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;
&lt;p&gt;存储的数据格式与state backend密切相关；使用RocksDB state backend，Checkpoint支持增量存储（轻量）；Savepoint是全量Snapshot。&lt;/p&gt;

&lt;h1 id=&quot;checkpoint&quot;&gt;Checkpoint&lt;/h1&gt;
&lt;h2 id=&quot;checkpoint配置例子&quot;&gt;Checkpoint配置例子&lt;/h2&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StreamExecutionEnvironment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;StreamExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createLocalEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;StreamExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getExecutionEnvironment&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateBackend&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RocksDBStateBackend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RocksDBStateBackend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkpointDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rocksdbConf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Configuration&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rocksdbConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RocksDBOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TIMER_SERVICE_FACTORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RocksDBStateBackend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PriorityQueueStateType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ROCKSDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stateBackend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPredefinedOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PredefinedOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SPINNING_DISK_OPTIMIZED_HIGH_MEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stateBackend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateBackend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rocksdbConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setStateBackend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateBackend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enableCheckpointing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggerInterval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getCheckpointConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCheckpointingMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckpointingMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AT_LEAST_ONCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getCheckpointConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enableExternalizedCheckpoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExternalizedCheckpointCleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DELETE_ON_CANCELLATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getCheckpointConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setMinPauseBetweenCheckpoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getCheckpointConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setMaxConcurrentCheckpoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;:&lt;br /&gt;
通过env.setStateBackend(stateBackend)，设置使用的state backend。&lt;br /&gt;
通过env.enableCheckpointing开启checkpoint并设置时间间隔为triggerInterval * 1000。&lt;br /&gt;
通过ExternalizedCheckpointCleanup配置checkpoints在job取消的时候是否清除：ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION表示一旦Flink处理程序被cancel后，会保留Checkpoint数据，以便后续需要的话根据实际需要恢复到指定的Checkpoint处理，需要手动清除checkpoint。ExternalizedCheckpointCleanup.DELETE_ON_CANCELLATION表示默认的，当job停止后删除checkpoint数据。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其他配置&lt;/strong&gt;:&lt;br /&gt;
默认情况下，如果设置了Checkpoint选项，则Flink只保留最近成功生成的1个Checkpoint，由于Flink的job恢复机制只需要使用最新一个有效的checkpoint，因此在新的checkpoint生成后就可以安全移除其余旧的checkpoint了，当Flink程序失败时，可以从最近的这个Checkpoint来进行恢复。&lt;br /&gt;
如果需要保留多个Checkpoint，需要在Flink的配置文件conf/flink-conf.yaml中，添加如下配置，指定最多需要保存Checkpoint的个数，这样在HDFS的相应文件夹下面会产生多个checkpoint文件：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;state.checkpoints.num-retained: 20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;从checkpoint恢复&quot;&gt;从checkpoint恢复&lt;/h2&gt;
&lt;p&gt;checkpoint由元数据文件、额外的数据文件（与state backend相关）组成。在保留checkpoint的情况下，使用命令:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/flink run -s :checkpointMetaDataPath [:runArgs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;从checkpoint的元数据文件进行数据恢复，注意若元数据文件中信息不够，那么jobmanager就需要使用相关的数据文件来恢复作业。&lt;br /&gt;
例如：bin/flink run -s hdfs://checkpoint目录/JobID/chk-21(checkpint点)/_metadata 其他运行命令，成功启动的job对应的Checkpoint编号会从该次运行基于的编号继续连续生成：chk-22、chk-23、chk-24等。&lt;/p&gt;

&lt;h1 id=&quot;savepoint&quot;&gt;SavePoint&lt;/h1&gt;
&lt;p&gt;avepoint使用Flink的Checkpoint机制创建流作业的全量（非增量）状态快照，包含Streaming程序的状态，并且将checkpoint数据和元数据写出到外部文件系统。&lt;/p&gt;
&lt;h2 id=&quot;算子uid&quot;&gt;算子UID&lt;/h2&gt;
&lt;p&gt;Flink程序中包含两种状态数据，一种是用户定义的状态（User-defined State），他们是基于Flink的Transformation函数来创建或者修改得到的状态数据；另一种是系统状态（System State），他们是指作为Operator计算一部分的数据Buffer等状态数据，比如在使用Window Function时，在Window内部缓存Streaming数据记录。为了能够在创建Savepoint过程中，唯一识别对应的Operator的状态数据，Flink提供了API来为程序中每个Operator设置ID，这样可以在后续更新/升级程序的时候，可以在Savepoint数据中基于Operator ID来与对应的状态信息进行匹配，从而实现恢复。&lt;br /&gt;
当然，如果我们不指定Operator ID，Flink也会我们自动生成对应的Operator状态ID。自动生成的ID依赖于程序的结构，并且非常容易受到程序变化的影响。因此，强烈推荐手动指定ID。手动为每个Operator设置ID，即使未来Flink应用程序可能会改动很大，比如替换原来的Operator实现、增加新的Operator、删除Operator等等，至少我们有可能与Savepoint中存储的Operator状态对应上。另外，保存的Savepoint状态数据，毕竟是基于当时程序及其内存数据结构生成的，所以如果未来Flink程序改动比较大，尤其是对应的需要操作的内存数据结构都变化了，可能根本就无法从原来旧的Savepoint正确地恢复。&lt;br /&gt;
&lt;strong&gt;官网设置例子&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;DataStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Stateful source (e.g. Kafka) with ID
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StatefulSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;source-id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ID for the source operator
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Stateful mapper with ID
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StatefulMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mapper-id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ID for the mapper
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Stateless printing sink
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Auto-generated ID
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;savepoint-state&quot;&gt;Savepoint state&lt;/h2&gt;
&lt;p&gt;可以将savepoint想象成为保存了每个有状态的算子的“算子ID-&amp;gt;状态”映射的集合。&lt;br /&gt;
Operator ID | State&lt;br /&gt;
————+————————&lt;br /&gt;
source-id   | State of StatefulSource&lt;br /&gt;
mapper-id   | State of StatefulMapper&lt;br /&gt;
在上述示例中，print结果表是无状态的，因此不是savepoint状态的一部分。默认情况下，我们试图将savepoint的每条数据，都映射到新的程序中。&lt;/p&gt;

&lt;h2 id=&quot;savepoint操作&quot;&gt;Savepoint操作&lt;/h2&gt;
&lt;p&gt;可以通过命令行操作Savepoint，Flink版本&amp;gt;=1.2.0可以使用 webui 从savepoint恢复作业 。&lt;/p&gt;
&lt;h3 id=&quot;创建一个savepoint&quot;&gt;创建一个Savepoint&lt;/h3&gt;
&lt;p&gt;创建一个Savepoint，需要指定对应Savepoint基础目录，此job对应的新的savepoint目录将在其内被创建并存储数据和元数据。&lt;br /&gt;
有两种方式来指定Savepoint目录:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;配置Savepoint的默认路径，在Flink的配置文件conf/flink-conf.yaml中，添加如下配置：state.savepoints.dir:hdfs://hdfscluster/flink-savepoints&lt;/li&gt;
  &lt;li&gt;在手动执行savepoint命令的时候，指定Savepoint存储目录，命令格式如下所示：bin/flink savepoint :jobId [:targetDirectory]&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果你既不配置默认目标目录，也不指定自定义目标目录，触发savepoint将失败。&lt;br /&gt;
注意： 目标目录位置必须可以被JobManager和TaskManager访问，比如位于分布式文件系统中。&lt;br /&gt;
&lt;strong&gt;例子&lt;/strong&gt;：&lt;br /&gt;
例如，正在运行的Flink Job对应的ID为，使用默认state.savepoints.dir配置指定的Savepoint目录，执行如下命令:bin/flink savepoint 40be7c0160b73041dbceafc6256cb37d,可以看到，在目录hdfs://hdfscluster/flink-savepoints/savepoint-40be7c-8201276a3c10下面生成了ID为40be7c0160b73041dbceafc6256cb37d的Job的Savepoint数据。&lt;br /&gt;
为正在运行的Flink Job指定一个目录存储Savepoint数据，执行如下命令:bin/flink savepoint 40be7c0160b73041dbceafc6256cb37d hdfs://hdfscluster/tmp/flink/savepoints,可以看到，在目录 hdfs://hdfscluster/tmp/flink/savepoints/savepoint-40be7c-c19253t1b376下面生成了ID为40be7c0160b73041dbceafc6256cb37d的Job的Savepoint数据。&lt;/p&gt;
&lt;h4 id=&quot;yarn环境中触发savepoint&quot;&gt;YARN环境中触发Savepoint&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/flink savepoint :jobId [:targetDirectory] -yid :yarnAppId  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这将为ID为:yarnAppId的YARN应用中，为ID为:jobId的作业触发一份savepoint，并返回savepoint的路径。&lt;/p&gt;
&lt;h4 id=&quot;取消作业时触发savepoint&quot;&gt;取消作业时触发savepoint&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/flink cancel -s [:targetDirectory] :jobId  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这将为ID为:jobId的作业自动触发一份savepoint，并取消作业。此外，你可以指定目标目录用于保存savepoint。此目录需要可以被JobManager和TaskManager访问。&lt;/p&gt;

&lt;h3 id=&quot;savepoint目录结构&quot;&gt;savepoint目录结构&lt;/h3&gt;
&lt;p&gt;以FsStateBackend或RocksDBStateBackend为例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Savepoint target directory
# savepoint目标目录
/savepoints/
# Savepoint directory
# savepoint目录
/savepoints/savepoint-:shortjobid-:savepointid/
# Savepoint file contains the checkpoint meta data
# savepoint元数据文件
/savepoints/savepoint-:shortjobid-:savepointid/_metadata
# Savepoint state
# savepoint状态
/savepoints/savepoint-:shortjobid-:savepointid/...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;： 虽然看起来savepoint可能被移动，但是由于_metadata文件中的绝对路径，目前这是不可能的。如果你使用MemoryStateBackend，元数据和savepoint状态将被存储于_metadata文件。因为它是自完备的，你可以移动此文件并从任何位置恢复。&lt;br /&gt;
&lt;strong&gt;例子&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hdfs dfs -ls /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b
Found 5 items
-rw-r--r--   3 hadoop supergroup       4935 2018-09-02 01:21 /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b/50231e5f-1d05-435f-b288-06d5946407d6
-rw-r--r--   3 hadoop supergroup       4599 2018-09-02 01:21 /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b/7a025ad8-207c-47b6-9cab-c13938939159
-rw-r--r--   3 hadoop supergroup       4976 2018-09-02 01:21 /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b/_metadata
-rw-r--r--   3 hadoop supergroup       4348 2018-09-02 01:21 /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b/bd9b0849-aad2-4dd4-a5e0-89297718a13c
-rw-r--r--   3 hadoop supergroup       4724 2018-09-02 01:21 /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b/be8c1370-d10c-476f-bfe1-dd0c0e7d498a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如上面列出的HDFS路径中，11bbc5是Flink Job ID字符串前6个字符，后面bd967f90709b是随机生成的字符串，然后savepoint-11bbc5-bd967f90709b作为存储此次Savepoint数据的根目录，最后savepoint-11bbc5-bd967f90709b目录下面_metadata文件包含了Savepoint的元数据信息，其中序列化包含了savepoint-11bbc5-bd967f90709b目录下面其它文件的路径，这些文件内容都是序列化的状态信息。&lt;/p&gt;

&lt;h3 id=&quot;从savepoint恢复&quot;&gt;从savepoint恢复&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/flink run -s :savepointPath [:runArgs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这将提交作业并从指定的savepoint目录恢复作业。你可以指定savepoint的目录或_metadata 文件路径。&lt;/p&gt;
&lt;h4 id=&quot;允许不恢复状态-allowing-non-restored-state&quot;&gt;允许不恢复状态-Allowing Non-Restored State&lt;/h4&gt;
&lt;p&gt;默认情况下，恢复操作将试图将savepoint中所有状态条目映射到你计划恢复的程序中。如果你删除了一个算子，通过–allowNonRestoredState(简写：-n)参数，将允许忽略某个不能映射到新程序的状态：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/flink run -s :savepointPath -n [:runArgs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;删除savepoint&quot;&gt;删除savepoint&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/flink savepoint -d :savepointPath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这将删除存储于:savepointPath的savepoint。&lt;br /&gt;
注意，同样可以通过常规的文件系统操作手动的删除savepoint，而不影响其他的savepoint或checkpoint（回想下每个savepoint都是自完备的）。在FLink 1.2版本之前，执行以上savepoint命令曾是一个更繁琐的任务。&lt;/p&gt;

&lt;h2 id=&quot;savepoint-faq&quot;&gt;Savepoint FAQ&lt;/h2&gt;
&lt;h3 id=&quot;是否需要为我作业中的所有算子都分配id&quot;&gt;是否需要为我作业中的所有算子都分配ID？&lt;/h3&gt;
&lt;p&gt;根据经验，是的。严格来说，在作业中通过uid方法仅仅为那些有状态的算子分配ID更高效。savepoint仅仅包含这些算子的状态，而无状态算子则不是savepoint的一部分。&lt;br /&gt;
在实践中，推荐为所有算子分配ID，因为某些Flink的内置算子如窗口同样是有状态的，但是哪些算子实际上是有状态的、哪些是没有状态的却并不明显。如果你非常确定某个算子是无状态的，你可以省略uid方法。&lt;/p&gt;
&lt;h3 id=&quot;如果在我的作业中增加一个需要状态的新算子将会发生什么&quot;&gt;如果在我的作业中增加一个需要状态的新算子将会发生什么？&lt;/h3&gt;
&lt;p&gt;当你在作业中增加一个新算子，它将被初始化为无任何状态。savepoint包含每个有状态算子的状态。无状态算子不是savepoint的一部分。新算子表现为类似于无状态算子。&lt;/p&gt;
&lt;h3 id=&quot;如果从作业中删除一个有状态算子将会发生什么&quot;&gt;如果从作业中删除一个有状态算子将会发生什么？&lt;/h3&gt;
&lt;p&gt;默认情况下，从savepoint恢复时作业时，将试图匹配savepoint中所有operatorid和state条目。如果你的新作业将某个有状态的算子删除了，那么从savepoint恢复作业会失败。&lt;br /&gt;
你可以通过使用–allowNonRestoredState (简写：-n)参数运行命令来允许这种情况下对作业恢复状态。&lt;br /&gt;
$ bin/flink run -s :savepointPath -n [:runArgs]&lt;/p&gt;
&lt;h3 id=&quot;如果在我的作业中重排序reorder有状态的算子将会发生什么&quot;&gt;如果在我的作业中重排序（reorder）有状态的算子将会发生什么？&lt;/h3&gt;
&lt;p&gt;如果你为这些算子分配了ID，它们将正常的被恢复。&lt;br /&gt;
如果你没有分配ID，在重排序后，有状态算子自动生成的ID很可能改变。这将可能导致你无法从之前的savepoint中恢复。&lt;/p&gt;
&lt;h3 id=&quot;如果在我的作业中增加删除或重排序无状态的算子将会发生什么&quot;&gt;如果在我的作业中增加、删除或重排序无状态的算子将会发生什么？&lt;/h3&gt;
&lt;p&gt;如果你为有状态算子分配了ID，在savepoint恢复时无状态算子将不受影响。&lt;br /&gt;
如果你没有分配ID，在重排序后，这些有状态算子自动生成的ID很可能改变。这将可能导致你无法从之前的savepoint中恢复。&lt;/p&gt;
&lt;h3 id=&quot;在恢复时当我改变程序的并发时将会发生什么&quot;&gt;在恢复时当我改变程序的并发时将会发生什么？&lt;/h3&gt;
&lt;p&gt;如果savepoint是在Flink 1.2.0及以上版本触发的，并且没有使用deprecated state API如Checkpointed，你可以指定新的并发并从savepoint恢复程序。&lt;br /&gt;
如果作业要从低于flink 1.2.0版本触发的savepoint中恢复，或使用了已经deprecated APIs，则在改并发之前，必须将作业和savepoint迁移到Flink 1.2.0及以上版本。&lt;br /&gt;
更新详见&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/upgrading.html&quot;&gt;Upgrading Applications and Flink Versions&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;我可以在稳定存储上移动保存点文件吗&quot;&gt;我可以在稳定存储上移动保存点文件吗？&lt;/h3&gt;
&lt;p&gt;这个问题的快速答案目前是“否”，因为元数据文件出于技术原因将稳定存储中的文件作为绝对路径引用。详细回答答案是：如果出于某种原因必须移动文件，有两种可能的解决方法。首先，更简单但可能更危险，您可以使用编辑器在元数据文件中查找旧路径，并将其替换为新路径。其次，可以使用 class SavepointV2Serializer作为以编程方式读取、操作和用新路径重写元数据文件的起点。&lt;/p&gt;

&lt;p&gt;本文参考:&lt;br /&gt;
&lt;a href=&quot;https://www.jianshu.com/p/8e74c7cdd463&quot;&gt;flink使用checkpoint等知识&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/state/savepoints.html&quot;&gt;flink官网以及相关官网翻译&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;至此，本篇内容完成。&lt;/p&gt;</content><author><name>叶子  ( ˘ ³˘)♥</name></author><category term="Flink" /><summary type="html">本文主要关于Flink中Checkpoint和Savepoint相关概念，基于Flink1.7.1。 最近在遇到了一些state相关的问题，因此就重新学习和整理了一下Flink里的Checkpoint和Savepoint相关知识，此篇文章基本上就是对于官网文章的整理和翻译，当作一篇笔记来记录一下～ 基础概念一览-Checkpoint和Savepoint的区别 对于Flink容错保障中，Checkpoint和Savepoint是两个关键的概念，注意区分和应用。 使用场景 Checkpoint仅用于恢复意外失败的作业（走flink的job默认恢复机制）。 SavePoint用于用户计划的、手动的备份和恢复（代码版本更新、更改并行度、jog graph、2个程序同时运行red/blue deployment）。 保留时间 Checkpoint默认情况下是作业终止会被删除可配置保留）；Savepoint作业终止后继续存在。 设计目标 Checkpoint设计目标：轻量级创建；快速恢复。 SavePoint：生成和恢复成本更高，关注可移植性和对先前提到的作业更改的支持。 维护 Checkpoint由flink自动维护（ created, owned, and released by Flink），Savepoint需用户维护（ created, owned, and released by user）。 其他 存储的数据格式与state backend密切相关；使用RocksDB state backend，Checkpoint支持增量存储（轻量）；Savepoint是全量Snapshot。 Checkpoint Checkpoint配置例子 val env: StreamExecutionEnvironment = if (mode == &quot;local&quot;) { StreamExecutionEnvironment.createLocalEnvironment() } else { StreamExecutionEnvironment.getExecutionEnvironment } var stateBackend: RocksDBStateBackend = new RocksDBStateBackend(checkpointDir, false) val rocksdbConf = new Configuration rocksdbConf.setString(RocksDBOptions.TIMER_SERVICE_FACTORY, RocksDBStateBackend.PriorityQueueStateType.ROCKSDB.toString) stateBackend.setPredefinedOptions(PredefinedOptions.SPINNING_DISK_OPTIMIZED_HIGH_MEM) stateBackend = stateBackend.configure(rocksdbConf) env.setStateBackend(stateBackend) env.enableCheckpointing(triggerInterval * 1000) env.getCheckpointConfig.setCheckpointingMode(CheckpointingMode.AT_LEAST_ONCE) env.getCheckpointConfig.enableExternalizedCheckpoints(ExternalizedCheckpointCleanup.DELETE_ON_CANCELLATION) env.getCheckpointConfig.setMinPauseBetweenCheckpoints(3000) env.getCheckpointConfig.setMaxConcurrentCheckpoints(1) 说明: 通过env.setStateBackend(stateBackend)，设置使用的state backend。 通过env.enableCheckpointing开启checkpoint并设置时间间隔为triggerInterval * 1000。 通过ExternalizedCheckpointCleanup配置checkpoints在job取消的时候是否清除：ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION表示一旦Flink处理程序被cancel后，会保留Checkpoint数据，以便后续需要的话根据实际需要恢复到指定的Checkpoint处理，需要手动清除checkpoint。ExternalizedCheckpointCleanup.DELETE_ON_CANCELLATION表示默认的，当job停止后删除checkpoint数据。 其他配置: 默认情况下，如果设置了Checkpoint选项，则Flink只保留最近成功生成的1个Checkpoint，由于Flink的job恢复机制只需要使用最新一个有效的checkpoint，因此在新的checkpoint生成后就可以安全移除其余旧的checkpoint了，当Flink程序失败时，可以从最近的这个Checkpoint来进行恢复。 如果需要保留多个Checkpoint，需要在Flink的配置文件conf/flink-conf.yaml中，添加如下配置，指定最多需要保存Checkpoint的个数，这样在HDFS的相应文件夹下面会产生多个checkpoint文件： state.checkpoints.num-retained: 20 从checkpoint恢复 checkpoint由元数据文件、额外的数据文件（与state backend相关）组成。在保留checkpoint的情况下，使用命令: $ bin/flink run -s :checkpointMetaDataPath [:runArgs] 从checkpoint的元数据文件进行数据恢复，注意若元数据文件中信息不够，那么jobmanager就需要使用相关的数据文件来恢复作业。 例如：bin/flink run -s hdfs://checkpoint目录/JobID/chk-21(checkpint点)/_metadata 其他运行命令，成功启动的job对应的Checkpoint编号会从该次运行基于的编号继续连续生成：chk-22、chk-23、chk-24等。 SavePoint avepoint使用Flink的Checkpoint机制创建流作业的全量（非增量）状态快照，包含Streaming程序的状态，并且将checkpoint数据和元数据写出到外部文件系统。 算子UID Flink程序中包含两种状态数据，一种是用户定义的状态（User-defined State），他们是基于Flink的Transformation函数来创建或者修改得到的状态数据；另一种是系统状态（System State），他们是指作为Operator计算一部分的数据Buffer等状态数据，比如在使用Window Function时，在Window内部缓存Streaming数据记录。为了能够在创建Savepoint过程中，唯一识别对应的Operator的状态数据，Flink提供了API来为程序中每个Operator设置ID，这样可以在后续更新/升级程序的时候，可以在Savepoint数据中基于Operator ID来与对应的状态信息进行匹配，从而实现恢复。 当然，如果我们不指定Operator ID，Flink也会我们自动生成对应的Operator状态ID。自动生成的ID依赖于程序的结构，并且非常容易受到程序变化的影响。因此，强烈推荐手动指定ID。手动为每个Operator设置ID，即使未来Flink应用程序可能会改动很大，比如替换原来的Operator实现、增加新的Operator、删除Operator等等，至少我们有可能与Savepoint中存储的Operator状态对应上。另外，保存的Savepoint状态数据，毕竟是基于当时程序及其内存数据结构生成的，所以如果未来Flink程序改动比较大，尤其是对应的需要操作的内存数据结构都变化了，可能根本就无法从原来旧的Savepoint正确地恢复。 官网设置例子： DataStream&amp;lt;String&amp;gt; stream = env. // Stateful source (e.g. Kafka) with ID .addSource(new StatefulSource()) .uid(&quot;source-id&quot;) // ID for the source operator .shuffle() // Stateful mapper with ID .map(new StatefulMapper()) .uid(&quot;mapper-id&quot;) // ID for the mapper // Stateless printing sink .print(); // Auto-generated ID Savepoint state 可以将savepoint想象成为保存了每个有状态的算子的“算子ID-&amp;gt;状态”映射的集合。 Operator ID | State ————+———————— source-id | State of StatefulSource mapper-id | State of StatefulMapper 在上述示例中，print结果表是无状态的，因此不是savepoint状态的一部分。默认情况下，我们试图将savepoint的每条数据，都映射到新的程序中。 Savepoint操作 可以通过命令行操作Savepoint，Flink版本&amp;gt;=1.2.0可以使用 webui 从savepoint恢复作业 。 创建一个Savepoint 创建一个Savepoint，需要指定对应Savepoint基础目录，此job对应的新的savepoint目录将在其内被创建并存储数据和元数据。 有两种方式来指定Savepoint目录: 配置Savepoint的默认路径，在Flink的配置文件conf/flink-conf.yaml中，添加如下配置：state.savepoints.dir:hdfs://hdfscluster/flink-savepoints 在手动执行savepoint命令的时候，指定Savepoint存储目录，命令格式如下所示：bin/flink savepoint :jobId [:targetDirectory] 如果你既不配置默认目标目录，也不指定自定义目标目录，触发savepoint将失败。 注意： 目标目录位置必须可以被JobManager和TaskManager访问，比如位于分布式文件系统中。 例子： 例如，正在运行的Flink Job对应的ID为，使用默认state.savepoints.dir配置指定的Savepoint目录，执行如下命令:bin/flink savepoint 40be7c0160b73041dbceafc6256cb37d,可以看到，在目录hdfs://hdfscluster/flink-savepoints/savepoint-40be7c-8201276a3c10下面生成了ID为40be7c0160b73041dbceafc6256cb37d的Job的Savepoint数据。 为正在运行的Flink Job指定一个目录存储Savepoint数据，执行如下命令:bin/flink savepoint 40be7c0160b73041dbceafc6256cb37d hdfs://hdfscluster/tmp/flink/savepoints,可以看到，在目录 hdfs://hdfscluster/tmp/flink/savepoints/savepoint-40be7c-c19253t1b376下面生成了ID为40be7c0160b73041dbceafc6256cb37d的Job的Savepoint数据。 YARN环境中触发Savepoint $ bin/flink savepoint :jobId [:targetDirectory] -yid :yarnAppId 这将为ID为:yarnAppId的YARN应用中，为ID为:jobId的作业触发一份savepoint，并返回savepoint的路径。 取消作业时触发savepoint $ bin/flink cancel -s [:targetDirectory] :jobId 这将为ID为:jobId的作业自动触发一份savepoint，并取消作业。此外，你可以指定目标目录用于保存savepoint。此目录需要可以被JobManager和TaskManager访问。 savepoint目录结构 以FsStateBackend或RocksDBStateBackend为例： # Savepoint target directory # savepoint目标目录 /savepoints/ # Savepoint directory # savepoint目录 /savepoints/savepoint-:shortjobid-:savepointid/ # Savepoint file contains the checkpoint meta data # savepoint元数据文件 /savepoints/savepoint-:shortjobid-:savepointid/_metadata # Savepoint state # savepoint状态 /savepoints/savepoint-:shortjobid-:savepointid/... 注意： 虽然看起来savepoint可能被移动，但是由于_metadata文件中的绝对路径，目前这是不可能的。如果你使用MemoryStateBackend，元数据和savepoint状态将被存储于_metadata文件。因为它是自完备的，你可以移动此文件并从任何位置恢复。 例子： hdfs dfs -ls /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b Found 5 items -rw-r--r-- 3 hadoop supergroup 4935 2018-09-02 01:21 /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b/50231e5f-1d05-435f-b288-06d5946407d6 -rw-r--r-- 3 hadoop supergroup 4599 2018-09-02 01:21 /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b/7a025ad8-207c-47b6-9cab-c13938939159 -rw-r--r-- 3 hadoop supergroup 4976 2018-09-02 01:21 /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b/_metadata -rw-r--r-- 3 hadoop supergroup 4348 2018-09-02 01:21 /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b/bd9b0849-aad2-4dd4-a5e0-89297718a13c -rw-r--r-- 3 hadoop supergroup 4724 2018-09-02 01:21 /flink-1.5.3/flink-savepoints/savepoint-11bbc5-bd967f90709b/be8c1370-d10c-476f-bfe1-dd0c0e7d498a 如上面列出的HDFS路径中，11bbc5是Flink Job ID字符串前6个字符，后面bd967f90709b是随机生成的字符串，然后savepoint-11bbc5-bd967f90709b作为存储此次Savepoint数据的根目录，最后savepoint-11bbc5-bd967f90709b目录下面_metadata文件包含了Savepoint的元数据信息，其中序列化包含了savepoint-11bbc5-bd967f90709b目录下面其它文件的路径，这些文件内容都是序列化的状态信息。 从savepoint恢复 $ bin/flink run -s :savepointPath [:runArgs] 这将提交作业并从指定的savepoint目录恢复作业。你可以指定savepoint的目录或_metadata 文件路径。 允许不恢复状态-Allowing Non-Restored State 默认情况下，恢复操作将试图将savepoint中所有状态条目映射到你计划恢复的程序中。如果你删除了一个算子，通过–allowNonRestoredState(简写：-n)参数，将允许忽略某个不能映射到新程序的状态： $ bin/flink run -s :savepointPath -n [:runArgs] 删除savepoint $ bin/flink savepoint -d :savepointPath 这将删除存储于:savepointPath的savepoint。 注意，同样可以通过常规的文件系统操作手动的删除savepoint，而不影响其他的savepoint或checkpoint（回想下每个savepoint都是自完备的）。在FLink 1.2版本之前，执行以上savepoint命令曾是一个更繁琐的任务。 Savepoint FAQ 是否需要为我作业中的所有算子都分配ID？ 根据经验，是的。严格来说，在作业中通过uid方法仅仅为那些有状态的算子分配ID更高效。savepoint仅仅包含这些算子的状态，而无状态算子则不是savepoint的一部分。 在实践中，推荐为所有算子分配ID，因为某些Flink的内置算子如窗口同样是有状态的，但是哪些算子实际上是有状态的、哪些是没有状态的却并不明显。如果你非常确定某个算子是无状态的，你可以省略uid方法。 如果在我的作业中增加一个需要状态的新算子将会发生什么？ 当你在作业中增加一个新算子，它将被初始化为无任何状态。savepoint包含每个有状态算子的状态。无状态算子不是savepoint的一部分。新算子表现为类似于无状态算子。 如果从作业中删除一个有状态算子将会发生什么？ 默认情况下，从savepoint恢复时作业时，将试图匹配savepoint中所有operatorid和state条目。如果你的新作业将某个有状态的算子删除了，那么从savepoint恢复作业会失败。 你可以通过使用–allowNonRestoredState (简写：-n)参数运行命令来允许这种情况下对作业恢复状态。 $ bin/flink run -s :savepointPath -n [:runArgs] 如果在我的作业中重排序（reorder）有状态的算子将会发生什么？ 如果你为这些算子分配了ID，它们将正常的被恢复。 如果你没有分配ID，在重排序后，有状态算子自动生成的ID很可能改变。这将可能导致你无法从之前的savepoint中恢复。 如果在我的作业中增加、删除或重排序无状态的算子将会发生什么？ 如果你为有状态算子分配了ID，在savepoint恢复时无状态算子将不受影响。 如果你没有分配ID，在重排序后，这些有状态算子自动生成的ID很可能改变。这将可能导致你无法从之前的savepoint中恢复。 在恢复时当我改变程序的并发时将会发生什么？ 如果savepoint是在Flink 1.2.0及以上版本触发的，并且没有使用deprecated state API如Checkpointed，你可以指定新的并发并从savepoint恢复程序。 如果作业要从低于flink 1.2.0版本触发的savepoint中恢复，或使用了已经deprecated APIs，则在改并发之前，必须将作业和savepoint迁移到Flink 1.2.0及以上版本。 更新详见Upgrading Applications and Flink Versions。 我可以在稳定存储上移动保存点文件吗？ 这个问题的快速答案目前是“否”，因为元数据文件出于技术原因将稳定存储中的文件作为绝对路径引用。详细回答答案是：如果出于某种原因必须移动文件，有两种可能的解决方法。首先，更简单但可能更危险，您可以使用编辑器在元数据文件中查找旧路径，并将其替换为新路径。其次，可以使用 class SavepointV2Serializer作为以编程方式读取、操作和用新路径重写元数据文件的起点。 本文参考: flink使用checkpoint等知识 flink官网以及相关官网翻译 至此，本篇内容完成。</summary></entry><entry><title type="html">Flink分布式运行时知识梳理脑图</title><link href="http://localhost:4000/bigdata/2019/02/17/Flink%E8%BF%90%E8%A1%8C%E6%97%B6%E8%84%91%E5%9B%BE%E6%A2%B3%E7%90%86/" rel="alternate" type="text/html" title="Flink分布式运行时知识梳理脑图" /><published>2019-02-17T00:00:00+08:00</published><updated>2019-02-17T00:00:00+08:00</updated><id>http://localhost:4000/bigdata/2019/02/17/Flink%E8%BF%90%E8%A1%8C%E6%97%B6%E8%84%91%E5%9B%BE%E6%A2%B3%E7%90%86</id><content type="html" xml:base="http://localhost:4000/bigdata/2019/02/17/Flink%E8%BF%90%E8%A1%8C%E6%97%B6%E8%84%91%E5%9B%BE%E6%A2%B3%E7%90%86/">&lt;blockquote&gt;
  &lt;p&gt;最近在重新整理学习flink官网内容，并在学习过程中将内容总结成脑图，是叶子自己最近一点一点整理绘制哒，转载请贴此文链接谢谢啦～图片以
svg形式插入文章，可拖动显示完整，后续如有更改会持续更新。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此脑图绘制依据官网链接：&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.7/concepts/runtime.html&quot;&gt;Distributed Runtime Environment&lt;/a&gt;&lt;/p&gt;

&lt;div width=&quot;100%&quot; style=&quot;overflow-x: auto;&quot;&gt;
&lt;svg id=&quot;kity_svg_6&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; width=&quot;2303&quot; height=&quot;7719&quot; style=&quot;background-color: rgb(251, 251, 251); visibility: visible; background-position: initial initial; background-repeat: initial initial;&quot; viewBox=&quot;0 0 2303 7719&quot;&gt;&lt;defs id=&quot;kity_defs_7&quot;&gt;&lt;linearGradient id=&quot;kity_linearGradient_17&quot; x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;1&quot;&gt;&lt;stop id=&quot;kity_stop_18&quot; offset=&quot;0&quot; stop-color=&quot;rgb(255, 255, 255)&quot;&gt;&lt;/stop&gt;&lt;stop id=&quot;kity_stop_19&quot; offset=&quot;1&quot; stop-color=&quot;rgb(204, 204, 204)&quot;&gt;&lt;/stop&gt;&lt;/linearGradient&gt;&lt;marker id=&quot;kity_marker_2&quot; orient=&quot;auto&quot; refX=&quot;6&quot; refY=&quot;0&quot; viewBox=&quot;-7 -7 14 14&quot; markerWidth=&quot;7&quot; markerHeight=&quot;7&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;kity_path_3&quot; fill=&quot;rgb(115, 161, 191)&quot; stroke=&quot;none&quot; d=&quot;M6,0A6,6,0,1,1,-6,0A6,6,0,1,1,6,0&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;g id=&quot;kity_g_8&quot;&gt;&lt;g id=&quot;minder1&quot; text-rendering=&quot;optimize-speed&quot;&gt;&lt;g id=&quot;minder_connect_group1&quot;&gt;&lt;path id=&quot;kity_path_31&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M119.5,4032.5A217,3420.5,0,0,1,336.5,612&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_33&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M548.5,612.5C568.5,612,568.5,128.5,588.5,128.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_35&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M636.5,128.5C656.5,128.5,656.5,103,676.5,103&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_37&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M636.5,128.5C656.5,128.5,656.5,226.5,676.5,226.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_39&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M548.5,612.5C568.5,612,568.5,303.5,588.5,303.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_41&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M655.5,303.5C675.5,303.5,675.5,277.5,695.5,277.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_43&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M655.5,303.5C675.5,303.5,675.5,329.5,695.5,329.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_45&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M548.5,612.5C568.5,612,568.5,1095.5,588.5,1095.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_47&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M700.5,1095.5C720.5,1095.5,720.5,538.5,740.5,538.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_49&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M784.5,538.5C804.5,538.5,804.5,381.5,824.5,381.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_51&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M784.5,538.5C804.5,538.5,804.5,433.5,824.5,433.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_53&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M784.5,538.5C804.5,538.5,804.5,564.5,824.5,564.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_55&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M993.5,564.5C1013.5,564.5,1013.5,564.5,1033.5,564.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_57&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M784.5,538.5C804.5,538.5,804.5,695.5,824.5,695.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_59&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M700.5,1095.5C720.5,1095.5,720.5,826.5,740.5,826.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_61&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M784.5,826.5C804.5,826.5,804.5,747.5,824.5,747.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_63&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M784.5,826.5C804.5,826.5,804.5,799.5,824.5,799.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_65&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M784.5,826.5C804.5,826.5,804.5,878.5,824.5,878.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_67&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1018.5,878.5C1038.5,878.5,1038.5,852.5,1058.5,852.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_69&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1431.5,852.5C1451.5,852.5,1451.5,852.5,1471.5,852.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_71&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1018.5,878.5C1038.5,878.5,1038.5,904.5,1058.5,904.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_73&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1376.5,904.5C1396.5,904.5,1396.5,904.5,1416.5,904.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_75&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M700.5,1095.5C720.5,1095.5,720.5,1243.5,740.5,1243.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_77&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M912.5,1243.5C932.5,1243.5,932.5,1078.5,952.5,1078.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_79&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1112.5,1078.5C1132.5,1078.5,1132.5,1079,1152.5,1079&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_81&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M912.5,1243.5C932.5,1243.5,932.5,1408.5,952.5,1408.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_83&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1296.5,1408.5C1316.5,1408.5,1316.5,1252.5,1336.5,1252.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_85&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1296.5,1408.5C1316.5,1408.5,1316.5,1304.5,1336.5,1304.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_87&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1296.5,1408.5C1316.5,1408.5,1316.5,1356.5,1336.5,1356.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_89&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1296.5,1408.5C1316.5,1408.5,1316.5,1408.5,1336.5,1408.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_91&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1296.5,1408.5C1316.5,1408.5,1316.5,1460.5,1336.5,1460.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_93&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1296.5,1408.5C1316.5,1408.5,1316.5,1512.5,1336.5,1512.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_95&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1296.5,1408.5C1316.5,1408.5,1316.5,1564.5,1336.5,1564.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_97&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M700.5,1095.5C720.5,1095.5,720.5,1634.5,740.5,1634.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_99&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M119.5,4032.5A217,1776,0,0,1,336.5,2256.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_101&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M635.5,2256.5C655.5,2256.5,655.5,1792.5,675.5,1792.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_103&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M855.5,1792.5C875.5,1792.5,875.5,1740.5,895.5,1740.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_105&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M939.5,1740.5C959.5,1740.5,959.5,1714.5,979.5,1714.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_107&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M939.5,1740.5C959.5,1740.5,959.5,1766.5,979.5,1766.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_109&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M855.5,1792.5C875.5,1792.5,875.5,1844.5,895.5,1844.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_111&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M939.5,1844.5C959.5,1844.5,959.5,1818.5,979.5,1818.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_113&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M939.5,1844.5C959.5,1844.5,959.5,1870.5,979.5,1870.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_115&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M635.5,2256.5C655.5,2256.5,655.5,2040.5,675.5,2040.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_117&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M854.5,2040.5C874.5,2040.5,874.5,1984.5,894.5,1984.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_119&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M938.5,1984.5C958.5,1984.5,958.5,1923.5,978.5,1923.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_121&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M938.5,1984.5C958.5,1984.5,958.5,1984.5,978.5,1984.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_123&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M938.5,1984.5C958.5,1984.5,958.5,2045.5,978.5,2045.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_125&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M854.5,2040.5C874.5,2040.5,874.5,2097.5,894.5,2097.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_127&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M938.5,2097.5C958.5,2097.5,958.5,2097.5,978.5,2097.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_129&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M635.5,2256.5C655.5,2256.5,655.5,2200.5,675.5,2200.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_131&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M743.5,2200.5C763.5,2200.5,763.5,2200.5,783.5,2200.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_133&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M851.5,2200.5C871.5,2200.5,871.5,2148.5,891.5,2148.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_135&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M851.5,2200.5C871.5,2200.5,871.5,2200.5,891.5,2200.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_137&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M851.5,2200.5C871.5,2200.5,871.5,2252.5,891.5,2252.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_139&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M635.5,2256.5C655.5,2256.5,655.5,2356.5,675.5,2356.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_141&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M812.5,2356.5C832.5,2356.5,832.5,2304.5,852.5,2304.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_143&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M812.5,2356.5C832.5,2356.5,832.5,2356.5,852.5,2356.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_145&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M812.5,2356.5C832.5,2356.5,832.5,2408.5,852.5,2408.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_147&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M635.5,2256.5C655.5,2256.5,655.5,2738.5,675.5,2738.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_149&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M755.5,2738.5C775.5,2738.5,775.5,2527,795.5,2527&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_151&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M755.5,2738.5C775.5,2738.5,775.5,2644.5,795.5,2644.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_153&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M755.5,2738.5C775.5,2738.5,775.5,2812.5,795.5,2812.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_155&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M863.5,2812.5C883.5,2812.5,883.5,2700.5,903.5,2700.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_157&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M863.5,2812.5C883.5,2812.5,883.5,2760.5,903.5,2760.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_159&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M863.5,2812.5C883.5,2812.5,883.5,2820.5,903.5,2820.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_161&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M863.5,2812.5C883.5,2812.5,883.5,2876.5,903.5,2876.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_163&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M863.5,2812.5C883.5,2812.5,883.5,2928.5,903.5,2928.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_165&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M755.5,2738.5C775.5,2738.5,775.5,2998.5,795.5,2998.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_167&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1293.5,2998.5C1313.5,2998.5,1313.5,2998.5,1333.5,2998.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_169&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M119.5,4032.5A217,206,0,0,0,336.5,4238.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_171&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M542.5,4238.5C562.5,4238.5,562.5,3310.5,582.5,3310.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_173&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M749.5,3310.5C769.5,3310.5,769.5,3078.5,789.5,3078.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_175&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M857.5,3078.5C877.5,3078.5,877.5,3078.5,897.5,3078.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_177&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M749.5,3310.5C769.5,3310.5,769.5,3130.5,789.5,3130.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_179&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M981.5,3130.5C1001.5,3130.5,1001.5,3130.5,1021.5,3130.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_181&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M749.5,3310.5C769.5,3310.5,769.5,3234.5,789.5,3234.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_183&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M857.5,3234.5C877.5,3234.5,877.5,3182.5,897.5,3182.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_185&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M857.5,3234.5C877.5,3234.5,877.5,3234.5,897.5,3234.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_187&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M857.5,3234.5C877.5,3234.5,877.5,3286.5,897.5,3286.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_189&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1001.5,3286.5C1021.5,3286.5,1021.5,3286.5,1041.5,3286.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_191&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M749.5,3310.5C769.5,3310.5,769.5,3543.5,789.5,3543.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_193&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M857.5,3543.5C877.5,3543.5,877.5,3338.5,897.5,3338.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_195&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M857.5,3543.5C877.5,3543.5,877.5,3480.5,897.5,3480.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_197&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M965.5,3480.5C985.5,3480.5,985.5,3391.5,1005.5,3391.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_199&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1085.5,3391.5C1105.5,3391.5,1105.5,3391.5,1125.5,3391.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_201&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M965.5,3480.5C985.5,3480.5,985.5,3570.5,1005.5,3570.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_203&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1061.5,3570.5C1081.5,3570.5,1081.5,3443.5,1101.5,3443.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_205&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1061.5,3570.5C1081.5,3570.5,1081.5,3530.5,1101.5,3530.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_207&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1145.5,3530.5C1165.5,3530.5,1165.5,3504.5,1185.5,3504.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_209&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1145.5,3530.5C1165.5,3530.5,1165.5,3565.5,1185.5,3565.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_211&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1061.5,3570.5C1081.5,3570.5,1081.5,3657.5,1101.5,3657.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_213&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M857.5,3543.5C877.5,3543.5,877.5,3748.5,897.5,3748.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_215&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M542.5,4238.5C562.5,4238.5,562.5,4258.5,582.5,4258.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_217&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M669.5,4258.5C689.5,4258.5,689.5,3834.5,709.5,3834.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_219&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M808.5,3834.5C828.5,3834.5,828.5,3808.5,848.5,3808.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_221&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M808.5,3834.5C828.5,3834.5,828.5,3869.5,848.5,3869.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_223&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M669.5,4258.5C689.5,4258.5,689.5,4137.5,709.5,4137.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_225&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M832.5,4137.5C852.5,4137.5,852.5,3931.5,872.5,3931.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_227&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M832.5,4137.5C852.5,4137.5,852.5,4097.5,872.5,4097.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_229&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1163.5,4097.5C1183.5,4097.5,1183.5,3992.5,1203.5,3992.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_231&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1163.5,4097.5C1183.5,4097.5,1183.5,4044.5,1203.5,4044.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_233&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1163.5,4097.5C1183.5,4097.5,1183.5,4105.5,1203.5,4105.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_235&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1163.5,4097.5C1183.5,4097.5,1183.5,4184.5,1203.5,4184.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_237&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M832.5,4137.5C852.5,4137.5,852.5,4304,872.5,4304&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_239&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1179.5,4304.5C1199.5,4304,1199.5,4265.5,1219.5,4265.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_241&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1179.5,4304.5C1199.5,4304,1199.5,4352.5,1219.5,4352.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_243&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1287.5,4352.5C1307.5,4352.5,1307.5,4326.5,1327.5,4326.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_245&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1287.5,4352.5C1307.5,4352.5,1307.5,4378.5,1327.5,4378.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_247&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M669.5,4258.5C689.5,4258.5,689.5,4682.5,709.5,4682.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_249&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M868.5,4682.5C888.5,4682.5,888.5,4572.5,908.5,4572.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_251&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1029.5,4572.5C1049.5,4572.5,1049.5,4481.5,1069.5,4481.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_253&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1113.5,4481.5C1133.5,4481.5,1133.5,4429.5,1153.5,4429.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_255&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1113.5,4481.5C1133.5,4481.5,1133.5,4481.5,1153.5,4481.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_257&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1113.5,4481.5C1133.5,4481.5,1133.5,4533.5,1153.5,4533.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_259&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1029.5,4572.5C1049.5,4572.5,1049.5,4663.5,1069.5,4663.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_261&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1298.5,4663.5C1318.5,4663.5,1318.5,4585.5,1338.5,4585.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_263&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1298.5,4663.5C1318.5,4663.5,1318.5,4663.5,1338.5,4663.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_265&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1625.5,4663.5C1645.5,4663.5,1645.5,4637.5,1665.5,4637.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_267&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1625.5,4663.5C1645.5,4663.5,1645.5,4689.5,1665.5,4689.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_269&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1298.5,4663.5C1318.5,4663.5,1318.5,4741.5,1338.5,4741.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_271&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M868.5,4682.5C888.5,4682.5,888.5,4793.5,908.5,4793.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_273&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1034.5,4793.5C1054.5,4793.5,1054.5,4793.5,1074.5,4793.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_275&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M542.5,4238.5C562.5,4238.5,562.5,4886.5,582.5,4886.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_277&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M741.5,4886.5C761.5,4886.5,761.5,4845.5,781.5,4845.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_279&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M741.5,4886.5C761.5,4886.5,761.5,4927.5,781.5,4927.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_281&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1170.5,4927.5C1190.5,4927.5,1190.5,4928,1210.5,4928&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_283&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M542.5,4238.5C562.5,4238.5,562.5,5157.5,582.5,5157.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_285&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M705.5,5157.5C725.5,5157.5,725.5,5010.5,745.5,5010.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_287&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1815.5,5010.5C1835.5,5010.5,1835.5,5010.5,1855.5,5010.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_289&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M705.5,5157.5C725.5,5157.5,725.5,5088.5,745.5,5088.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_291&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M945.5,5088.5C965.5,5088.5,965.5,5062.5,985.5,5062.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_293&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M945.5,5088.5C965.5,5088.5,965.5,5114.5,985.5,5114.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_295&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M705.5,5157.5C725.5,5157.5,725.5,5244.5,745.5,5244.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_297&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M965.5,5244.5C985.5,5244.5,985.5,5166.5,1005.5,5166.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_299&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M965.5,5244.5C985.5,5244.5,985.5,5218.5,1005.5,5218.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_301&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M965.5,5244.5C985.5,5244.5,985.5,5270.5,1005.5,5270.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_303&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M965.5,5244.5C985.5,5244.5,985.5,5322.5,1005.5,5322.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_305&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M119.5,4032.5A217,2292,0,0,0,336.5,6324.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_307&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M483.5,6324.5C503.5,6324.5,503.5,5462.5,523.5,5462.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_309&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M567.5,5462.5C587.5,5462.5,587.5,5384.5,607.5,5384.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_311&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M567.5,5462.5C587.5,5462.5,587.5,5436.5,607.5,5436.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_313&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M567.5,5462.5C587.5,5462.5,587.5,5488.5,607.5,5488.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_315&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M567.5,5462.5C587.5,5462.5,587.5,5540.5,607.5,5540.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_317&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M483.5,6324.5C503.5,6324.5,503.5,6311.5,523.5,6311.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_319&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M723.5,6311.5C743.5,6311.5,743.5,5849.5,763.5,5849.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_321&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M961.5,5849.5C981.5,5849.5,981.5,5680.5,1001.5,5680.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_323&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1045.5,5680.5C1065.5,5680.5,1065.5,5593.5,1085.5,5593.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_325&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1045.5,5680.5C1065.5,5680.5,1065.5,5645.5,1085.5,5645.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_327&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1045.5,5680.5C1065.5,5680.5,1065.5,5697.5,1085.5,5697.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_329&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1045.5,5680.5C1065.5,5680.5,1065.5,5758.5,1085.5,5758.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_331&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M961.5,5849.5C981.5,5849.5,981.5,5880.5,1001.5,5880.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_333&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1057.5,5880.5C1077.5,5880.5,1077.5,5828.5,1097.5,5828.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_335&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1057.5,5880.5C1077.5,5880.5,1077.5,5889.5,1097.5,5889.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_337&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1057.5,5880.5C1077.5,5880.5,1077.5,5941.5,1097.5,5941.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_339&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M961.5,5849.5C981.5,5849.5,981.5,6019.5,1001.5,6019.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_341&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1069.5,6019.5C1089.5,6019.5,1089.5,5993.5,1109.5,5993.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_343&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1069.5,6019.5C1089.5,6019.5,1089.5,6045.5,1109.5,6045.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_345&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M723.5,6311.5C743.5,6311.5,743.5,6291.5,763.5,6291.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_347&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M876.5,6291.5C896.5,6291.5,896.5,6200.5,916.5,6200.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_349&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M960.5,6200.5C980.5,6200.5,980.5,6096.5,1000.5,6096.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_351&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M960.5,6200.5C980.5,6200.5,980.5,6148.5,1000.5,6148.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_353&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M960.5,6200.5C980.5,6200.5,980.5,6200.5,1000.5,6200.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_355&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M960.5,6200.5C980.5,6200.5,980.5,6252.5,1000.5,6252.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_357&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M960.5,6200.5C980.5,6200.5,980.5,6304.5,1000.5,6304.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_359&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M876.5,6291.5C896.5,6291.5,896.5,6382.5,916.5,6382.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_361&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M984.5,6382.5C1004.5,6382.5,1004.5,6356.5,1024.5,6356.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_363&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M984.5,6382.5C1004.5,6382.5,1004.5,6408.5,1024.5,6408.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_365&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M723.5,6311.5C743.5,6311.5,743.5,6773.5,763.5,6773.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_367&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M915.5,6773.5C935.5,6773.5,935.5,6564.5,955.5,6564.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_369&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M999.5,6564.5C1019.5,6564.5,1019.5,6460.5,1039.5,6460.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_371&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M999.5,6564.5C1019.5,6564.5,1019.5,6512.5,1039.5,6512.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_373&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M999.5,6564.5C1019.5,6564.5,1019.5,6564.5,1039.5,6564.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_375&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M999.5,6564.5C1019.5,6564.5,1019.5,6616.5,1039.5,6616.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_377&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M999.5,6564.5C1019.5,6564.5,1019.5,6668.5,1039.5,6668.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_379&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M915.5,6773.5C935.5,6773.5,935.5,6738.5,955.5,6738.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_381&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1011.5,6738.5C1031.5,6738.5,1031.5,6738.5,1051.5,6738.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_383&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M915.5,6773.5C935.5,6773.5,935.5,6834.5,955.5,6834.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_385&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1023.5,6834.5C1043.5,6834.5,1043.5,6808.5,1063.5,6808.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_387&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1023.5,6834.5C1043.5,6834.5,1043.5,6860.5,1063.5,6860.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_389&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M915.5,6773.5C935.5,6773.5,935.5,6982.5,955.5,6982.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_391&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M999.5,6982.5C1019.5,6982.5,1019.5,6912.5,1039.5,6912.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_393&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M999.5,6982.5C1019.5,6982.5,1019.5,6982.5,1039.5,6982.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_395&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M999.5,6982.5C1019.5,6982.5,1019.5,7052.5,1039.5,7052.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_397&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M483.5,6324.5C503.5,6324.5,503.5,7186.5,523.5,7186.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_399&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M567.5,7186.5C587.5,7186.5,587.5,7130.5,607.5,7130.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_401&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M699.5,7130.5C719.5,7130.5,719.5,7104.5,739.5,7104.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_403&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M699.5,7130.5C719.5,7130.5,719.5,7156.5,739.5,7156.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_405&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M567.5,7186.5C587.5,7186.5,587.5,7243.5,607.5,7243.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_407&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M729.5,7243.5C749.5,7243.5,749.5,7208.5,769.5,7208.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_409&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M729.5,7243.5C749.5,7243.5,749.5,7269.5,769.5,7269.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_411&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M119.5,4032.5A217,3431,0,0,0,336.5,7463.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_413&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M494.5,7463.5C514.5,7463.5,514.5,7365.5,534.5,7365.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_415&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M578.5,7365.5C598.5,7365.5,598.5,7339.5,618.5,7339.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_417&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M578.5,7365.5C598.5,7365.5,598.5,7391.5,618.5,7391.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_419&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M494.5,7463.5C514.5,7463.5,514.5,7561.5,534.5,7561.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_421&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M669.5,7561.5C689.5,7561.5,689.5,7444.5,709.5,7444.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_423&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M669.5,7561.5C689.5,7561.5,689.5,7496.5,709.5,7496.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_425&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M669.5,7561.5C689.5,7561.5,689.5,7583.5,709.5,7583.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_427&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M777.5,7583.5C797.5,7583.5,797.5,7557.5,817.5,7557.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_429&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M777.5,7583.5C797.5,7583.5,797.5,7618.5,817.5,7618.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_431&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M669.5,7561.5C689.5,7561.5,689.5,7679.5,709.5,7679.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_433&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M832.5,7679.5C852.5,7679.5,852.5,7679.5,872.5,7679.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;minder_node1&quot;&gt;&lt;path id=&quot;node_outline1&quot; fill=&quot;rgb(115, 161, 191)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M25.5,4012.5h188a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-188a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot; stroke-width=&quot;3&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text1&quot; fill=&quot;white&quot;&gt;&lt;text id=&quot;kity_text_22&quot; text-rendering=&quot;inherit&quot; font-size=&quot;16&quot; dy=&quot;.8em&quot; y=&quot;4024.5&quot; x=&quot;44.5&quot;&gt;2、flink分布式运行时&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;kity_g_12&quot;&gt;&lt;path id=&quot;kity_path_13&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M44.5,4032.5h0v0h0z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;kity_g_14&quot;&gt;&lt;path id=&quot;kity_path_15&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M44.5,4032.5h0v0h0z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_16&quot; fill=&quot;none&quot; stroke=&quot;none&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;minder_node2&quot;&gt;&lt;g id=&quot;node_expander34&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1217&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M337.5,612A6,6,0,1,1,325.5,612A6,6,0,1,1,337.5,612&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1218&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M327,612L336,612&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline35&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M341.5,588.5h204a3,3,0,0,1,3,3v41a3,3,0,0,1,-3,3h-204a3,3,0,0,1,-3,-3v-41a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text35&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_513&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;594&quot; x=&quot;358.5&quot;&gt;任务和算子链&lt;/text&gt;&lt;text id=&quot;kity_text_514&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;615&quot; x=&quot;358.5&quot;&gt;(Tasks和Operator Chains)&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node3&quot;&gt;&lt;g id=&quot;node_expander3&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1124&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M588.5,128.5A6,6,0,1,1,576.5,128.5A6,6,0,1,1,588.5,128.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1125&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M578,128.5L587,128.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline4&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M593.5,117.5h38a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-38a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text4&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_439&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;122.5&quot; x=&quot;598.5&quot;&gt;tasks&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node4&quot;&gt;&lt;g id=&quot;node_expander1&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1118&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M676.5,103A6,6,0,1,1,664.5,103A6,6,0,1,1,676.5,103&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1119&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline2&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M681.5,20.5h299a5,5,0,0,1,5,5v155a5,5,0,0,1,-5,5h-299a5,5,0,0,1,-5,-5v-155a5,5,0,0,1,5,-5z&quot; stroke-width=&quot;3&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text2&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_435&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;168.5&quot; x=&quot;686.5&quot;&gt;如示例图，包括5个subtasks，也就是说有5个并行线程&lt;/text&gt;&lt;/g&gt;&lt;image id=&quot;kity_image_907&quot; xlink:href=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-02-15-运行时task和chain.png?raw=true&quot; x=&quot;730.5&quot; y=&quot;25.5&quot; width=&quot;200&quot; height=&quot;138&quot;&gt;&lt;/image&gt;&lt;/g&gt;&lt;g id=&quot;minder_node5&quot;&gt;&lt;g id=&quot;node_expander2&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1121&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M676.5,226.5A6,6,0,1,1,664.5,226.5A6,6,0,1,1,676.5,226.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1122&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline3&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M681.5,215.5h201a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-201a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text3&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_437&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;220.5&quot; x=&quot;686.5&quot;&gt;每个任务（task）在一个线程中执行&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node6&quot;&gt;&lt;g id=&quot;node_expander6&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1133&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M588.5,303.5A6,6,0,1,1,576.5,303.5A6,6,0,1,1,588.5,303.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1134&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M578,303.5L587,303.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline7&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M593.5,292.5h57a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-57a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text7&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_445&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;297.5&quot; x=&quot;598.5&quot;&gt;task形成&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node7&quot;&gt;&lt;g id=&quot;node_expander4&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1127&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M695.5,277.5A6,6,0,1,1,683.5,277.5A6,6,0,1,1,695.5,277.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1128&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline5&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M700.5,266.5h696a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-696a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text5&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_441&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;271.5&quot; x=&quot;705.5&quot;&gt;在实际的分布式计算环境中，Flink会将多个运算子任务（ operator subtasks）链接一起（chains）形成分布式计算任务（tasks）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node8&quot;&gt;&lt;g id=&quot;node_expander5&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1130&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M695.5,329.5A6,6,0,1,1,683.5,329.5A6,6,0,1,1,695.5,329.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1131&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline6&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M700.5,318.5h573a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-573a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text6&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_443&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;323.5&quot; x=&quot;705.5&quot;&gt;task和subtask关系理解：task可能是一个subtask，也可能是多个operator subtasks chains在一起形成的&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node9&quot;&gt;&lt;g id=&quot;node_expander33&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1214&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M588.5,1095.5A6,6,0,1,1,576.5,1095.5A6,6,0,1,1,588.5,1095.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1215&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M578,1095.5L587,1095.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline34&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M593.5,1084.5h102a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-102a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text34&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_511&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1089.5&quot; x=&quot;598.5&quot;&gt;operator chains&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node10&quot;&gt;&lt;g id=&quot;node_expander12&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1151&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M740.5,538.5A6,6,0,1,1,728.5,538.5A6,6,0,1,1,740.5,538.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1152&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M730,538.5L739,538.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline13&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M745.5,527.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text13&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_460&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;532.5&quot; x=&quot;750.5&quot;&gt;优点&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node11&quot;&gt;&lt;g id=&quot;node_expander7&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1136&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M824.5,381.5A6,6,0,1,1,812.5,381.5A6,6,0,1,1,824.5,381.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1137&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline8&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M829.5,370.5h118a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-118a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text8&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_447&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;375.5&quot; x=&quot;834.5&quot;&gt;降低了线程间的切换&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node12&quot;&gt;&lt;g id=&quot;node_expander8&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1139&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M824.5,433.5A6,6,0,1,1,812.5,433.5A6,6,0,1,1,824.5,433.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1140&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline9&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M829.5,422.5h166a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-166a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text9&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_449&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;427.5&quot; x=&quot;834.5&quot;&gt;减少了数据在与缓冲区的开销&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node13&quot;&gt;&lt;g id=&quot;node_expander10&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1145&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M824.5,564.5A6,6,0,1,1,812.5,564.5A6,6,0,1,1,824.5,564.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1146&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M814,564.5L823,564.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline11&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M829.5,553.5h159a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-159a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text11&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_456&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;558.5&quot; x=&quot;834.5&quot;&gt;减少消息的序列化/反序列化&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node14&quot;&gt;&lt;g id=&quot;node_expander9&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1142&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1033.5,564.5A6,6,0,1,1,1021.5,564.5A6,6,0,1,1,1033.5,564.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1143&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline10&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1038.5,474.5h391a5,5,0,0,1,5,5v170a5,5,0,0,1,-5,5h-391a5,5,0,0,1,-5,-5v-170a5,5,0,0,1,5,-5z&quot; stroke-width=&quot;3&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text10&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_451&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;583.5&quot; x=&quot;1043.5&quot;&gt;框中的虚线是operator chain内部的数据流，&lt;/text&gt;&lt;text id=&quot;kity_text_452&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;601.5&quot; x=&quot;1043.5&quot;&gt;这个流内的数据不会经过序列化/反序列化、网络传输，&lt;/text&gt;&lt;text id=&quot;kity_text_453&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;619.5&quot; x=&quot;1043.5&quot;&gt;而是直接将消息对象传递给下游的 ChainOperator 处理。&lt;/text&gt;&lt;text id=&quot;kity_text_454&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;637.5&quot; x=&quot;1043.5&quot;&gt;上面的OperaotrChain就可以看做是一个入度为1，出度为2的operator&lt;/text&gt;&lt;/g&gt;&lt;image id=&quot;kity_image_908&quot; xlink:href=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-09-FlinkChains原理.png?raw=true&quot; x=&quot;1133.5&quot; y=&quot;479.5&quot; width=&quot;200&quot; height=&quot;99&quot;&gt;&lt;/image&gt;&lt;/g&gt;&lt;g id=&quot;minder_node15&quot;&gt;&lt;g id=&quot;node_expander11&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1148&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M824.5,695.5A6,6,0,1,1,812.5,695.5A6,6,0,1,1,824.5,695.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1149&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline12&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M829.5,684.5h238a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-238a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text12&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_458&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;689.5&quot; x=&quot;834.5&quot;&gt;在降低延时的同时减少了系统的总体吞吐量&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node16&quot;&gt;&lt;g id=&quot;node_expander20&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1175&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M740.5,826.5A6,6,0,1,1,728.5,826.5A6,6,0,1,1,740.5,826.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1176&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M730,826.5L739,826.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline21&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M745.5,815.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text21&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_479&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;820.5&quot; x=&quot;750.5&quot;&gt;操作&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node17&quot;&gt;&lt;g id=&quot;node_expander13&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1154&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M824.5,747.5A6,6,0,1,1,812.5,747.5A6,6,0,1,1,824.5,747.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1155&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline14&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M829.5,736.5h82a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-82a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text14&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_462&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;741.5&quot; x=&quot;834.5&quot;&gt;默认全局开启&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node18&quot;&gt;&lt;g id=&quot;node_expander14&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1157&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M824.5,799.5A6,6,0,1,1,812.5,799.5A6,6,0,1,1,824.5,799.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1158&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline15&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M829.5,788.5h400a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-400a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text15&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_464&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;793.5&quot; x=&quot;834.5&quot;&gt;全局关闭：StreamExecutionEnvironment.disableOperatorChaining()&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node19&quot;&gt;&lt;g id=&quot;node_expander19&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1172&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M824.5,878.5A6,6,0,1,1,812.5,878.5A6,6,0,1,1,824.5,878.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1173&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M814,878.5L823,878.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline20&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M829.5,840.5h184a5,5,0,0,1,5,5v66a5,5,0,0,1,-5,5h-184a5,5,0,0,1,-5,-5v-66a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text20&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_474&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;845.5&quot; x=&quot;834.5&quot;&gt;单独创建和结束&lt;/text&gt;&lt;text id=&quot;kity_text_475&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;863.5&quot; x=&quot;834.5&quot;&gt;在底层，这两个方法都是&lt;/text&gt;&lt;text id=&quot;kity_text_476&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;881.5&quot; x=&quot;834.5&quot;&gt;通过调整operator的 chain 策略&lt;/text&gt;&lt;text id=&quot;kity_text_477&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;899.5&quot; x=&quot;834.5&quot;&gt;（HEAD、NEVER）来实现的&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node20&quot;&gt;&lt;g id=&quot;node_expander16&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1163&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1058.5,852.5A6,6,0,1,1,1046.5,852.5A6,6,0,1,1,1058.5,852.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1164&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M1048,852.5L1057,852.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline17&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1063.5,841.5h363a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-363a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text17&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_468&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;846.5&quot; x=&quot;1068.5&quot;&gt;创建：someStream.filter(...).map(...).startNewChain().map(...)&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node21&quot;&gt;&lt;g id=&quot;node_expander15&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1160&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1471.5,852.5A6,6,0,1,1,1459.5,852.5A6,6,0,1,1,1471.5,852.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1161&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline16&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1476.5,841.5h522a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-522a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text16&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_466&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;846.5&quot; x=&quot;1481.5&quot;&gt;startNewChain()来指示从该operator开始一个新的chain（与前面截断，不会被chain到前面）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node22&quot;&gt;&lt;g id=&quot;node_expander18&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1169&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1058.5,904.5A6,6,0,1,1,1046.5,904.5A6,6,0,1,1,1058.5,904.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1170&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M1048,904.5L1057,904.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline19&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1063.5,893.5h308a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-308a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text19&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_472&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;898.5&quot; x=&quot;1068.5&quot;&gt;结束chain：someStream.map(...).disableChaining()&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node23&quot;&gt;&lt;g id=&quot;node_expander17&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1166&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1416.5,904.5A6,6,0,1,1,1404.5,904.5A6,6,0,1,1,1416.5,904.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1167&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline18&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1421.5,893.5h531a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-531a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text18&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_470&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;898.5&quot; x=&quot;1426.5&quot;&gt;disableChaining()来指示指示该operator不参与chaining（不会与前后的operator chain一起）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node24&quot;&gt;&lt;g id=&quot;node_expander31&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1208&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M740.5,1243.5A6,6,0,1,1,728.5,1243.5A6,6,0,1,1,740.5,1243.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1209&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M730,1243.5L739,1243.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline32&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M745.5,1232.5h162a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-162a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text32&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_505&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1237.5&quot; x=&quot;750.5&quot;&gt;形成operator chains的条件&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node25&quot;&gt;&lt;g id=&quot;node_expander22&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1181&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M952.5,1078.5A6,6,0,1,1,940.5,1078.5A6,6,0,1,1,952.5,1078.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1182&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M942,1078.5L951,1078.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline23&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M957.5,1067.5h150a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-150a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text23&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_487&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1072.5&quot; x=&quot;962.5&quot;&gt;operator chains过程例子&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node26&quot;&gt;&lt;g id=&quot;node_expander21&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1178&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1152.5,1079A6,6,0,1,1,1140.5,1079A6,6,0,1,1,1152.5,1079&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1179&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline22&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1157.5,946.5h335a5,5,0,0,1,5,5v255a5,5,0,0,1,-5,5h-335a5,5,0,0,1,-5,-5v-255a5,5,0,0,1,5,-5z&quot; stroke-width=&quot;3&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text22&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_481&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1122.5&quot; x=&quot;1162.5&quot;&gt;Source并行度为1，&lt;/text&gt;&lt;text id=&quot;kity_text_482&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1140.5&quot; x=&quot;1162.5&quot;&gt;FlatMap、KeyAggregation、Sink并行度均为2，&lt;/text&gt;&lt;text id=&quot;kity_text_483&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1158.5&quot; x=&quot;1162.5&quot;&gt;最终以5个并行的线程来执行的优化过程。&lt;/text&gt;&lt;text id=&quot;kity_text_484&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1176.5&quot; x=&quot;1162.5&quot;&gt;上图中将KeyAggregation和Sink两个operator进行了合并，&lt;/text&gt;&lt;text id=&quot;kity_text_485&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1194.5&quot; x=&quot;1162.5&quot;&gt;因为这两个合并后并不会改变整体的拓扑结构&lt;/text&gt;&lt;/g&gt;&lt;image id=&quot;kity_image_909&quot; xlink:href=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-09-FlinkOperatorChains形成.png?raw=true&quot; x=&quot;1224.5&quot; y=&quot;951.5&quot; width=&quot;200&quot; height=&quot;166&quot;&gt;&lt;/image&gt;&lt;/g&gt;&lt;g id=&quot;minder_node27&quot;&gt;&lt;g id=&quot;node_expander30&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1205&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M952.5,1408.5A6,6,0,1,1,940.5,1408.5A6,6,0,1,1,952.5,1408.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1206&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M942,1408.5L951,1408.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline31&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M957.5,1397.5h334a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-334a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text31&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_503&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1402.5&quot; x=&quot;962.5&quot;&gt;并不是任意两个operator就能chain一起的，需要一定的条件 &lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node28&quot;&gt;&lt;g id=&quot;node_expander23&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1184&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1336.5,1252.5A6,6,0,1,1,1324.5,1252.5A6,6,0,1,1,1336.5,1252.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1185&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline24&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1341.5,1241.5h145a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-145a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text24&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_489&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1246.5&quot; x=&quot;1346.5&quot;&gt;没有禁用Chain-默认开启&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node29&quot;&gt;&lt;g id=&quot;node_expander24&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1187&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1336.5,1304.5A6,6,0,1,1,1324.5,1304.5A6,6,0,1,1,1336.5,1304.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1188&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline25&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1341.5,1293.5h130a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-130a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text25&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_491&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1298.5&quot; x=&quot;1346.5&quot;&gt;上下游算子并行度一致&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node30&quot;&gt;&lt;g id=&quot;node_expander25&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1190&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1336.5,1356.5A6,6,0,1,1,1324.5,1356.5A6,6,0,1,1,1336.5,1356.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1191&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline26&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1341.5,1345.5h365a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-365a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text26&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_493&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1350.5&quot; x=&quot;1346.5&quot;&gt;下游算子的入度为1（也就是说下游节点没有来自其他节点的输入）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node31&quot;&gt;&lt;g id=&quot;node_expander26&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1193&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1336.5,1408.5A6,6,0,1,1,1324.5,1408.5A6,6,0,1,1,1336.5,1408.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1194&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline27&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1341.5,1397.5h199a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-199a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text27&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_495&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1402.5&quot; x=&quot;1346.5&quot;&gt;上下游算子都在同一个slot group中&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node32&quot;&gt;&lt;g id=&quot;node_expander27&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1196&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1336.5,1460.5A6,6,0,1,1,1324.5,1460.5A6,6,0,1,1,1336.5,1460.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1197&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline28&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1341.5,1449.5h368a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-368a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text28&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_497&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1454.5&quot; x=&quot;1346.5&quot;&gt;上下游算子之间没有shuffle（两个算子间数据分区方式是forward）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node33&quot;&gt;&lt;g id=&quot;node_expander28&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1199&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1336.5,1512.5A6,6,0,1,1,1324.5,1512.5A6,6,0,1,1,1336.5,1512.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1200&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline29&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1341.5,1501.5h513a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-513a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text29&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_499&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1506.5&quot; x=&quot;1346.5&quot;&gt;下游的chain策略为ALWAYS（可以与上下游链接，map、flatmap、filter等默认是ALWAYS）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node34&quot;&gt;&lt;g id=&quot;node_expander29&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1202&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1336.5,1564.5A6,6,0,1,1,1324.5,1564.5A6,6,0,1,1,1336.5,1564.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1203&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline30&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1341.5,1553.5h532a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-532a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text30&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_501&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1558.5&quot; x=&quot;1346.5&quot;&gt;上游的chain策略为ALWAYS或HEAD（只能与下游链接，不能与上游链接，Source默认是HEAD）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node35&quot;&gt;&lt;g id=&quot;node_expander32&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1211&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M740.5,1634.5A6,6,0,1,1,728.5,1634.5A6,6,0,1,1,740.5,1634.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1212&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline33&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M745.5,1605.5h597a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-597a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text33&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_507&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1610.5&quot; x=&quot;750.5&quot;&gt;源码及原理思路：Flink内部是通过OperatorChain这个类来将多个operator链在一起形成一个新的operator；&lt;/text&gt;&lt;text id=&quot;kity_text_508&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1628.5&quot; x=&quot;750.5&quot;&gt;OpeeratorChain是黑盒，对外可见的只有HeadOperator，以及与外部连通的实线输出，&lt;/text&gt;&lt;text id=&quot;kity_text_509&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1646.5&quot; x=&quot;750.5&quot;&gt;这些输出对应了JobGraph中的JobEdge，在底层通过RecordWriterOutput来实现&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node36&quot;&gt;&lt;g id=&quot;node_expander69&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1322&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M337.5,2256.5A6,6,0,1,1,325.5,2256.5A6,6,0,1,1,337.5,2256.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1323&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M327,2256.5L336,2256.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline70&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M341.5,2243.5h291a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-291a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text70&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_593&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;2249.5&quot; x=&quot;358.5&quot;&gt;Job Managers, Task Managers, Clients&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node37&quot;&gt;&lt;g id=&quot;node_expander41&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1238&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M675.5,1792.5A6,6,0,1,1,663.5,1792.5A6,6,0,1,1,675.5,1792.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1239&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M665,1792.5L674,1792.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline42&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M680.5,1763.5h170a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-170a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text42&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_528&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1768.5&quot; x=&quot;685.5&quot;&gt;Job Managers&lt;/text&gt;&lt;text id=&quot;kity_text_529&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1786.5&quot; x=&quot;685.5&quot;&gt;作业管理器（也称为master）&lt;/text&gt;&lt;text id=&quot;kity_text_530&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1804.5&quot; x=&quot;685.5&quot;&gt;独立的JVM 进程&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node38&quot;&gt;&lt;g id=&quot;node_expander37&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1226&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M895.5,1740.5A6,6,0,1,1,883.5,1740.5A6,6,0,1,1,895.5,1740.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1227&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M885,1740.5L894,1740.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline38&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M900.5,1729.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text38&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_520&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1734.5&quot; x=&quot;905.5&quot;&gt;功能&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node39&quot;&gt;&lt;g id=&quot;node_expander35&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1220&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M979.5,1714.5A6,6,0,1,1,967.5,1714.5A6,6,0,1,1,979.5,1714.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1221&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline36&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M984.5,1703.5h579a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-579a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text36&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_516&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1708.5&quot; x=&quot;989.5&quot;&gt;用于协调程序的分布式执行。它的主要功能是调度job，协调任务（tasks），协调checkpoint，故障恢复等&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node40&quot;&gt;&lt;g id=&quot;node_expander36&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1223&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M979.5,1766.5A6,6,0,1,1,967.5,1766.5A6,6,0,1,1,979.5,1766.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1224&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline37&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M984.5,1755.5h634a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-634a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text37&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_518&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1760.5&quot; x=&quot;989.5&quot;&gt;从Client处接收到Job和JAR包等资源后，会生成优化后的执行计划，并以Task的单元调度到各个TaskManager去执行&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node41&quot;&gt;&lt;g id=&quot;node_expander40&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1235&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M895.5,1844.5A6,6,0,1,1,883.5,1844.5A6,6,0,1,1,895.5,1844.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1236&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M885,1844.5L894,1844.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline41&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M900.5,1833.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text41&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_526&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1838.5&quot; x=&quot;905.5&quot;&gt;数量&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node42&quot;&gt;&lt;g id=&quot;node_expander38&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1229&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M979.5,1818.5A6,6,0,1,1,967.5,1818.5A6,6,0,1,1,979.5,1818.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1230&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline39&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M984.5,1807.5h230a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-230a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text39&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_522&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1812.5&quot; x=&quot;989.5&quot;&gt;每个Flink环境中至少一个JobManager；&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node43&quot;&gt;&lt;g id=&quot;node_expander39&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1232&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M979.5,1870.5A6,6,0,1,1,967.5,1870.5A6,6,0,1,1,979.5,1870.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1233&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline40&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M984.5,1859.5h380a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-380a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text40&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_524&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1864.5&quot; x=&quot;989.5&quot;&gt;高可用会包含多个JobManagers，其中一个是leader，其他standby&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node44&quot;&gt;&lt;g id=&quot;node_expander48&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1259&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M675.5,2040.5A6,6,0,1,1,663.5,2040.5A6,6,0,1,1,675.5,2040.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1260&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M665,2040.5L674,2040.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline49&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M680.5,2011.5h169a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-169a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text49&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_545&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2016.5&quot; x=&quot;685.5&quot;&gt;Task Managers&lt;/text&gt;&lt;text id=&quot;kity_text_546&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2034.5&quot; x=&quot;685.5&quot;&gt;任务管理器（也称为worker）&lt;/text&gt;&lt;text id=&quot;kity_text_547&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2052.5&quot; x=&quot;685.5&quot;&gt;独立的JVM 进程&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node45&quot;&gt;&lt;g id=&quot;node_expander45&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1250&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M894.5,1984.5A6,6,0,1,1,882.5,1984.5A6,6,0,1,1,894.5,1984.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1251&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M884,1984.5L893,1984.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline46&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M899.5,1973.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text46&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_539&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1978.5&quot; x=&quot;904.5&quot;&gt;功能&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node46&quot;&gt;&lt;g id=&quot;node_expander42&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1241&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M978.5,1923.5A6,6,0,1,1,966.5,1923.5A6,6,0,1,1,978.5,1923.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1242&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline43&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M983.5,1912.5h462a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-462a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text43&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_532&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1917.5&quot; x=&quot;988.5&quot;&gt;用于执行dataflow的tasks（更准确地说，是subtasks），并对数据流进行缓冲、交换&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node47&quot;&gt;&lt;g id=&quot;node_expander43&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1244&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M978.5,1984.5A6,6,0,1,1,966.5,1984.5A6,6,0,1,1,978.5,1984.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1245&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline44&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M983.5,1964.5h567a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-567a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text44&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_534&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1969.5&quot; x=&quot;988.5&quot;&gt;在启动的时候就设置好了槽位数（Slot），每个slot能启动一个Task，Task为线程。&lt;/text&gt;&lt;text id=&quot;kity_text_535&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1987.5&quot; x=&quot;988.5&quot;&gt;从JobManager处接收需要部署的Task，部署启动后，与自己的上游建立 Netty 连接，接收数据并处理。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node48&quot;&gt;&lt;g id=&quot;node_expander44&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1247&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M978.5,2045.5A6,6,0,1,1,966.5,2045.5A6,6,0,1,1,978.5,2045.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1248&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline45&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M983.5,2034.5h626a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-626a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text45&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_537&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2039.5&quot; x=&quot;988.5&quot;&gt;启动之后，TaskManagers会连接到JobManagers来宣布自己可用报告自身的状态，便于JobManagers来分配工作&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node49&quot;&gt;&lt;g id=&quot;node_expander47&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1256&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M894.5,2097.5A6,6,0,1,1,882.5,2097.5A6,6,0,1,1,894.5,2097.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1257&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M884,2097.5L893,2097.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline48&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M899.5,2086.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text48&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_543&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2091.5&quot; x=&quot;904.5&quot;&gt;数量&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node50&quot;&gt;&lt;g id=&quot;node_expander46&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1253&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M978.5,2097.5A6,6,0,1,1,966.5,2097.5A6,6,0,1,1,978.5,2097.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1254&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline47&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M983.5,2086.5h249a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-249a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text47&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_541&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2091.5&quot; x=&quot;988.5&quot;&gt;每个Flink环境中至少包含一个TaskManagers&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node51&quot;&gt;&lt;g id=&quot;node_expander53&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1274&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M675.5,2200.5A6,6,0,1,1,663.5,2200.5A6,6,0,1,1,675.5,2200.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1275&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M665,2200.5L674,2200.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline54&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M680.5,2189.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text54&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_557&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2194.5&quot; x=&quot;685.5&quot;&gt;集群启动&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node52&quot;&gt;&lt;g id=&quot;node_expander52&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1271&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M783.5,2200.5A6,6,0,1,1,771.5,2200.5A6,6,0,1,1,783.5,2200.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1272&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M773,2200.5L782,2200.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline53&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M788.5,2189.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text53&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_555&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2194.5&quot; x=&quot;793.5&quot;&gt;启动方式&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node53&quot;&gt;&lt;g id=&quot;node_expander49&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1262&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M891.5,2148.5A6,6,0,1,1,879.5,2148.5A6,6,0,1,1,891.5,2148.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1263&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline50&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M896.5,2137.5h117a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-117a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text50&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_549&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2142.5&quot; x=&quot;901.5&quot;&gt;standalone cluster&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node54&quot;&gt;&lt;g id=&quot;node_expander50&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1265&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M891.5,2200.5A6,6,0,1,1,879.5,2200.5A6,6,0,1,1,891.5,2200.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1266&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline51&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M896.5,2189.5h46a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-46a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text51&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_551&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2194.5&quot; x=&quot;901.5&quot;&gt;容器中&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node55&quot;&gt;&lt;g id=&quot;node_expander51&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1268&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M891.5,2252.5A6,6,0,1,1,879.5,2252.5A6,6,0,1,1,891.5,2252.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1269&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline52&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M896.5,2241.5h318a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-318a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text52&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_553&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2246.5&quot; x=&quot;901.5&quot;&gt;resource frameworks：YARN或Mesos等资源框架来管理&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node56&quot;&gt;&lt;g id=&quot;node_expander57&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1286&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M675.5,2356.5A6,6,0,1,1,663.5,2356.5A6,6,0,1,1,675.5,2356.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1287&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M665,2356.5L674,2356.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline58&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M680.5,2327.5h127a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-127a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text58&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_565&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2332.5&quot; x=&quot;685.5&quot;&gt;client&lt;/text&gt;&lt;text id=&quot;kity_text_566&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2350.5&quot; x=&quot;685.5&quot;&gt;(不是运行时的一部分)&lt;/text&gt;&lt;text id=&quot;kity_text_567&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2368.5&quot; x=&quot;685.5&quot;&gt;独立的JVM 进程&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node57&quot;&gt;&lt;g id=&quot;node_expander54&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1277&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M852.5,2304.5A6,6,0,1,1,840.5,2304.5A6,6,0,1,1,852.5,2304.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1278&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline55&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M857.5,2293.5h637a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-637a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text55&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_559&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2298.5&quot; x=&quot;862.5&quot;&gt;Client其实并不是运行时及程序执行时的一个组成部分，而是被用来准备和发送的数据流(dataflow)给JobManager的&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node58&quot;&gt;&lt;g id=&quot;node_expander55&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1280&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M852.5,2356.5A6,6,0,1,1,840.5,2356.5A6,6,0,1,1,852.5,2356.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1281&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline56&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M857.5,2345.5h432a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-432a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text56&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_561&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2350.5&quot; x=&quot;862.5&quot;&gt;提交Job的客户端，可以是运行在任何机器上（与JobManager环境连通即可）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node59&quot;&gt;&lt;g id=&quot;node_expander56&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1283&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M852.5,2408.5A6,6,0,1,1,840.5,2408.5A6,6,0,1,1,852.5,2408.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1284&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline57&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M857.5,2397.5h665a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-665a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text57&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_563&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2402.5&quot; x=&quot;862.5&quot;&gt;在发送完dataflow之后（提交Job后），可以选择断开与JobManager的连接，或继续保持连接以接收程序运行的进度报告&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node60&quot;&gt;&lt;g id=&quot;node_expander68&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1319&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M675.5,2738.5A6,6,0,1,1,663.5,2738.5A6,6,0,1,1,675.5,2738.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1320&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M665,2738.5L674,2738.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline69&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M680.5,2727.5h70a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-70a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text69&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_591&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2732.5&quot; x=&quot;685.5&quot;&gt;关系架构图&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node61&quot;&gt;&lt;g id=&quot;node_expander58&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1289&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M795.5,2527A6,6,0,1,1,783.5,2527A6,6,0,1,1,795.5,2527&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1290&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline59&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M800.5,2450.5h210a5,5,0,0,1,5,5v143a5,5,0,0,1,-5,5h-210a5,5,0,0,1,-5,-5v-143a5,5,0,0,1,5,-5z&quot; stroke-width=&quot;3&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text59&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_569&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2586.5&quot; x=&quot;904.5&quot;&gt; &lt;/text&gt;&lt;/g&gt;&lt;image id=&quot;kity_image_910&quot; xlink:href=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-02-15-运行时关系架构图.png?raw=true&quot; x=&quot;805.5&quot; y=&quot;2455.5&quot; width=&quot;200&quot; height=&quot;126&quot;&gt;&lt;/image&gt;&lt;/g&gt;&lt;g id=&quot;minder_node62&quot;&gt;&lt;g id=&quot;node_expander59&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1292&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M795.5,2644.5A6,6,0,1,1,783.5,2644.5A6,6,0,1,1,795.5,2644.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1293&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline60&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M800.5,2633.5h604a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-604a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text60&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_571&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2638.5&quot; x=&quot;805.5&quot;&gt;Flink运行时角色间的通信使用akka（Client，JobManager，TaskManager之间通信），数据的传输使用netty&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node63&quot;&gt;&lt;g id=&quot;node_expander65&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1310&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M795.5,2812.5A6,6,0,1,1,783.5,2812.5A6,6,0,1,1,795.5,2812.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1311&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M785,2812.5L794,2812.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline66&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M800.5,2801.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text66&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_583&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2806.5&quot; x=&quot;805.5&quot;&gt;过程总结&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node64&quot;&gt;&lt;g id=&quot;node_expander60&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1295&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M903.5,2700.5A6,6,0,1,1,891.5,2700.5A6,6,0,1,1,903.5,2700.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1296&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline61&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M908.5,2685.5h510a5,5,0,0,1,5,5v20a5,5,0,0,1,-5,5h-510a5,5,0,0,1,-5,-5v-20a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text61&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_573&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2694.5&quot; x=&quot;938.5&quot;&gt;当Flink集群启动后，首先会启动一个（或HA）JobManger和一个或多个的TaskManager&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;node_priority1&quot;&gt;&lt;path id=&quot;kity_path_888&quot; fill=&quot;#840023&quot; stroke=&quot;none&quot; d=&quot;M914,2704c0,3.866,3.134,7,7,7h6c3.866,0,7,-3.134,7,-7V2698H914V2704z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_889&quot; fill=&quot;#FF1200&quot; stroke=&quot;none&quot; d=&quot;M934,2701c0,3.866,-3.134,7,-7,7H921c-3.866,0,-7,-3.134,-7,-7V2698c0,-3.866,3.134,-7,7,-7h6c3.866,0,7,3.134,7,7V2701z&quot; opacity=&quot;0.8&quot;&gt;&lt;/path&gt;&lt;text id=&quot;kity_text_890&quot; text-rendering=&quot;geometricPrecision&quot; x=&quot;923&quot; y=&quot;2700.5&quot; text-anchor=&quot;middle&quot; font-style=&quot;italic&quot; font-size=&quot;12&quot; fill=&quot;white&quot; dy=&quot;4.3203125&quot;&gt;1&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node65&quot;&gt;&lt;g id=&quot;node_expander61&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1298&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M903.5,2760.5A6,6,0,1,1,891.5,2760.5A6,6,0,1,1,903.5,2760.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1299&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline62&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M908.5,2745.5h217a5,5,0,0,1,5,5v20a5,5,0,0,1,-5,5h-217a5,5,0,0,1,-5,-5v-20a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text62&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_575&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2754.5&quot; x=&quot;938.5&quot;&gt;由Client提交任务给JobManager&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;node_priority2&quot;&gt;&lt;path id=&quot;kity_path_893&quot; fill=&quot;#01467F&quot; stroke=&quot;none&quot; d=&quot;M914,2764c0,3.866,3.134,7,7,7h6c3.866,0,7,-3.134,7,-7V2758H914V2764z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_894&quot; fill=&quot;#0074FF&quot; stroke=&quot;none&quot; d=&quot;M934,2761c0,3.866,-3.134,7,-7,7H921c-3.866,0,-7,-3.134,-7,-7V2758c0,-3.866,3.134,-7,7,-7h6c3.866,0,7,3.134,7,7V2761z&quot; opacity=&quot;0.8&quot;&gt;&lt;/path&gt;&lt;text id=&quot;kity_text_895&quot; text-rendering=&quot;geometricPrecision&quot; x=&quot;923&quot; y=&quot;2760.5&quot; text-anchor=&quot;middle&quot; font-style=&quot;italic&quot; font-size=&quot;12&quot; fill=&quot;white&quot; dy=&quot;4.3203125&quot;&gt;2&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node66&quot;&gt;&lt;g id=&quot;node_expander62&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1301&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M903.5,2820.5A6,6,0,1,1,891.5,2820.5A6,6,0,1,1,903.5,2820.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1302&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline63&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M908.5,2805.5h321a5,5,0,0,1,5,5v20a5,5,0,0,1,-5,5h-321a5,5,0,0,1,-5,-5v-20a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text63&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_577&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2814.5&quot; x=&quot;938.5&quot;&gt;JobManager再调度任务到各个TaskManager去执行&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;node_priority3&quot;&gt;&lt;path id=&quot;kity_path_898&quot; fill=&quot;#006300&quot; stroke=&quot;none&quot; d=&quot;M914,2824c0,3.866,3.134,7,7,7h6c3.866,0,7,-3.134,7,-7V2818H914V2824z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_899&quot; fill=&quot;#00AF00&quot; stroke=&quot;none&quot; d=&quot;M934,2821c0,3.866,-3.134,7,-7,7H921c-3.866,0,-7,-3.134,-7,-7V2818c0,-3.866,3.134,-7,7,-7h6c3.866,0,7,3.134,7,7V2821z&quot; opacity=&quot;0.8&quot;&gt;&lt;/path&gt;&lt;text id=&quot;kity_text_900&quot; text-rendering=&quot;geometricPrecision&quot; x=&quot;923&quot; y=&quot;2820.5&quot; text-anchor=&quot;middle&quot; font-style=&quot;italic&quot; font-size=&quot;12&quot; fill=&quot;white&quot; dy=&quot;4.3203125&quot;&gt;3&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node67&quot;&gt;&lt;g id=&quot;node_expander63&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1304&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M903.5,2876.5A6,6,0,1,1,891.5,2876.5A6,6,0,1,1,903.5,2876.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1305&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline64&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M908.5,2865.5h296a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-296a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text64&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_579&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2870.5&quot; x=&quot;913.5&quot;&gt;TaskManager将心跳和统计信息汇报给JobManager&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node68&quot;&gt;&lt;g id=&quot;node_expander64&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1307&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M903.5,2928.5A6,6,0,1,1,891.5,2928.5A6,6,0,1,1,903.5,2928.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1308&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline65&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M908.5,2917.5h259a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-259a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text65&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_581&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2922.5&quot; x=&quot;913.5&quot;&gt;TaskManager 之间以流的形式进行数据的传输&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node69&quot;&gt;&lt;g id=&quot;node_expander67&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1316&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M795.5,2998.5A6,6,0,1,1,783.5,2998.5A6,6,0,1,1,795.5,2998.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1317&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M785,2998.5L794,2998.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline68&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M800.5,2969.5h488a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-488a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text68&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_587&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2974.5&quot; x=&quot;830.5&quot;&gt;Flink的任务调度是多线程模型，并且不同Job/Task混合在一个TaskManager进程中。&lt;/text&gt;&lt;text id=&quot;kity_text_588&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2992.5&quot; x=&quot;830.5&quot;&gt;虽然这种方式可以有效提高CPU利用率，资源隔离如何实现？？？&lt;/text&gt;&lt;text id=&quot;kity_text_589&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3010.5&quot; x=&quot;830.5&quot;&gt;Storm的进程模型，一个JVM中只跑该Job的Tasks实际应用中更为合理？？？？？&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;node_progress1&quot;&gt;&lt;path id=&quot;kity_path_902&quot; fill=&quot;#FFED83&quot; stroke=&quot;none&quot; d=&quot;M825,2999A9,9,0,1,1,807,2999A9,9,0,1,1,825,2999&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_903&quot; fill=&quot;#43BC00&quot; stroke=&quot;none&quot; d=&quot;M816,2999L825,2999A9,9,0,0,1,807,2999A9,9,0,0,1,825,2999L816,2999z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_904&quot; fill=&quot;#8E8E8E&quot; stroke=&quot;none&quot; d=&quot;M816,2992c4.418,0,8,3.582,8,8h1c0,-5.523,-3.477,-10,-9,-10S807,2994.477,807,3000h1C808,2995.582,811.582,2992,816,2992z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_906&quot; fill=&quot;#EEE&quot; stroke=&quot;none&quot; d=&quot;M821.812,2996.896l-6.75,6.75l-4.5,-4.5L812.25,2997.459l2.812,2.803l5.062,-5.053L821.812,2996.896z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_905&quot; fill=&quot;url(#kity_linearGradient_17)&quot; stroke=&quot;none&quot; d=&quot;M816,2989C810.477,2989,806,2993.477,806,2999c0,5.523,4.477,10,10,10s10,-4.477,10,-10C826,2993.477,821.523,2989,816,2989zM816,3007c-4.418,0,-8,-3.582,-8,-8s3.582,-8,8,-8s8,3.582,8,8S820.418,3007,816,3007z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node70&quot;&gt;&lt;g id=&quot;node_expander66&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1313&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1333.5,2998.5A6,6,0,1,1,1321.5,2998.5A6,6,0,1,1,1333.5,2998.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1314&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline67&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1338.5,2987.5h138a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-138a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text67&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_585&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2992.5&quot; x=&quot;1343.5&quot;&gt;解决：task solt、group&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node71&quot;&gt;&lt;g id=&quot;node_expander137&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1526&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M337.5,4238.5A6,6,0,1,1,325.5,4238.5A6,6,0,1,1,337.5,4238.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1527&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M327,4238.5L336,4238.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline138&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M341.5,4225.5h198a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-198a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text138&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_740&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;4231.5&quot; x=&quot;358.5&quot;&gt;Task Slots and Resources&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node72&quot;&gt;&lt;g id=&quot;node_expander91&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1388&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M582.5,3310.5A6,6,0,1,1,570.5,3310.5A6,6,0,1,1,582.5,3310.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1389&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M572,3310.5L581,3310.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline92&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M587.5,3290.5h157a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-157a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text92&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_638&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3295.5&quot; x=&quot;592.5&quot;&gt;TaskManager和Slot的关系&lt;/text&gt;&lt;text id=&quot;kity_text_639&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3313.5&quot; x=&quot;592.5&quot;&gt;-资源隔离，控制task数量&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node73&quot;&gt;&lt;g id=&quot;node_expander71&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1328&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M789.5,3078.5A6,6,0,1,1,777.5,3078.5A6,6,0,1,1,789.5,3078.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1329&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M779,3078.5L788,3078.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline72&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M794.5,3067.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text72&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_597&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3072.5&quot; x=&quot;799.5&quot;&gt;引入原因&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node74&quot;&gt;&lt;g id=&quot;node_expander70&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1325&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M897.5,3078.5A6,6,0,1,1,885.5,3078.5A6,6,0,1,1,897.5,3078.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1326&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline71&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M902.5,3067.5h717a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-717a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text71&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_595&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3072.5&quot; x=&quot;907.5&quot;&gt;每个worker都是一个独立的JVM进程，运行一个或多个subtask在其不同的线程中;task slots为了控制worker接收任务（tasks）的数量&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node75&quot;&gt;&lt;g id=&quot;node_expander73&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1334&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M789.5,3130.5A6,6,0,1,1,777.5,3130.5A6,6,0,1,1,789.5,3130.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1335&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M779,3130.5L788,3130.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline74&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M794.5,3119.5h182a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-182a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text74&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_601&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3124.5&quot; x=&quot;799.5&quot;&gt;taskmanager中最高并发task数&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node76&quot;&gt;&lt;g id=&quot;node_expander72&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1331&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1021.5,3130.5A6,6,0,1,1,1009.5,3130.5A6,6,0,1,1,1021.5,3130.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1332&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline73&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1026.5,3119.5h347a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-347a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text73&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_599&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3124.5&quot; x=&quot;1031.5&quot;&gt;TaskManager最多能同时并发执行的任务，不能超过slot的数量&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node77&quot;&gt;&lt;g id=&quot;node_expander78&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1349&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M789.5,3234.5A6,6,0,1,1,777.5,3234.5A6,6,0,1,1,789.5,3234.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1350&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M779,3234.5L788,3234.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline79&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M794.5,3223.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text79&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_611&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3228.5&quot; x=&quot;799.5&quot;&gt;资源隔离&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node78&quot;&gt;&lt;g id=&quot;node_expander74&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1337&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M897.5,3182.5A6,6,0,1,1,885.5,3182.5A6,6,0,1,1,897.5,3182.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1338&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline75&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M902.5,3171.5h516a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-516a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text75&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_603&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3176.5&quot; x=&quot;907.5&quot;&gt;每个task slots代表TaskManager中一个特定的资源池子集，槽把TaskManager的资源进行平分&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node79&quot;&gt;&lt;g id=&quot;node_expander75&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1340&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M897.5,3234.5A6,6,0,1,1,885.5,3234.5A6,6,0,1,1,897.5,3234.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1341&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline76&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M902.5,3223.5h494a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-494a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text76&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_605&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3228.5&quot; x=&quot;907.5&quot;&gt;将资源池solt化可以让subtask获取指定容量的内存资源，而避免同其他job中的subtask竞争&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node80&quot;&gt;&lt;g id=&quot;node_expander77&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1346&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M897.5,3286.5A6,6,0,1,1,885.5,3286.5A6,6,0,1,1,897.5,3286.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1347&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M887,3286.5L896,3286.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline78&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M902.5,3275.5h94a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-94a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text78&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_609&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3280.5&quot; x=&quot;907.5&quot;&gt;注意：仅内存！&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node81&quot;&gt;&lt;g id=&quot;node_expander76&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1343&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1041.5,3286.5A6,6,0,1,1,1029.5,3286.5A6,6,0,1,1,1041.5,3286.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1344&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline77&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1046.5,3275.5h359a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-359a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text77&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_607&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3280.5&quot; x=&quot;1051.5&quot;&gt;这里没有对CPU进行隔离；目前task solt仅仅用于隔离tasks的内存&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node82&quot;&gt;&lt;g id=&quot;node_expander90&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1385&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M789.5,3543.5A6,6,0,1,1,777.5,3543.5A6,6,0,1,1,789.5,3543.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1386&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M779,3543.5L788,3543.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline91&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M794.5,3532.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text91&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_636&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3537.5&quot; x=&quot;799.5&quot;&gt;数量设置&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node83&quot;&gt;&lt;g id=&quot;node_expander79&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1352&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M897.5,3338.5A6,6,0,1,1,885.5,3338.5A6,6,0,1,1,897.5,3338.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1353&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline80&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M902.5,3327.5h289a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-289a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text80&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_613&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3332.5&quot; x=&quot;907.5&quot;&gt;每个worker(TaskManager)中至少包含一个task slot&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node84&quot;&gt;&lt;g id=&quot;node_expander88&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1379&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M897.5,3480.5A6,6,0,1,1,885.5,3480.5A6,6,0,1,1,897.5,3480.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1380&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M887,3480.5L896,3480.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline89&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M902.5,3469.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text89&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_632&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3474.5&quot; x=&quot;907.5&quot;&gt;调整数量&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node85&quot;&gt;&lt;g id=&quot;node_expander81&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1358&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1005.5,3391.5A6,6,0,1,1,993.5,3391.5A6,6,0,1,1,1005.5,3391.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1359&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M995,3391.5L1004,3391.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline82&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1010.5,3380.5h70a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-70a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text82&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_617&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3385.5&quot; x=&quot;1015.5&quot;&gt;只有一个槽&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node86&quot;&gt;&lt;g id=&quot;node_expander80&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1355&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1125.5,3391.5A6,6,0,1,1,1113.5,3391.5A6,6,0,1,1,1125.5,3391.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1356&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline81&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1130.5,3380.5h240a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-240a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text81&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_615&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3385.5&quot; x=&quot;1135.5&quot;&gt;每个task group都运行在一个独立的JVM中&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node87&quot;&gt;&lt;g id=&quot;node_expander87&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1376&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1005.5,3570.5A6,6,0,1,1,993.5,3570.5A6,6,0,1,1,1005.5,3570.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1377&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M995,3570.5L1004,3570.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline88&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1010.5,3559.5h46a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-46a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text88&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_630&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3564.5&quot; x=&quot;1015.5&quot;&gt;多个槽&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node88&quot;&gt;&lt;g id=&quot;node_expander82&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1361&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1101.5,3443.5A6,6,0,1,1,1089.5,3443.5A6,6,0,1,1,1101.5,3443.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1362&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline83&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1106.5,3432.5h412a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-412a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text83&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_619&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3437.5&quot; x=&quot;1111.5&quot;&gt;TaskManager 有多个槽就意味着会有更多的子任务subtask共享同一个JVM&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node89&quot;&gt;&lt;g id=&quot;node_expander85&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1370&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1101.5,3530.5A6,6,0,1,1,1089.5,3530.5A6,6,0,1,1,1101.5,3530.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1371&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M1091,3530.5L1100,3530.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline86&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1106.5,3519.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text86&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_626&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3524.5&quot; x=&quot;1111.5&quot;&gt;优势&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node90&quot;&gt;&lt;g id=&quot;node_expander83&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1364&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1185.5,3504.5A6,6,0,1,1,1173.5,3504.5A6,6,0,1,1,1185.5,3504.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1365&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline84&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1190.5,3484.5h538a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-538a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text84&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_621&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3489.5&quot; x=&quot;1195.5&quot;&gt;在同一个JVM中的任务会共享 TCP连接（通过多路复用（multiplexing）的方式）和共享心跳信息，&lt;/text&gt;&lt;text id=&quot;kity_text_622&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3507.5&quot; x=&quot;1195.5&quot;&gt;可以减少数据的网络传输&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node91&quot;&gt;&lt;g id=&quot;node_expander84&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1367&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1185.5,3565.5A6,6,0,1,1,1173.5,3565.5A6,6,0,1,1,1185.5,3565.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1368&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline85&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1190.5,3554.5h357a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-357a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text85&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_624&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3559.5&quot; x=&quot;1195.5&quot;&gt;也会共享数据集和数据结构，一定程度上可以降低每个task的开销&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node92&quot;&gt;&lt;g id=&quot;node_expander86&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1373&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1101.5,3657.5A6,6,0,1,1,1089.5,3657.5A6,6,0,1,1,1101.5,3657.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1374&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline87&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1106.5,3606.5h210a5,5,0,0,1,5,5v92a5,5,0,0,1,-5,5h-210a5,5,0,0,1,-5,-5v-92a5,5,0,0,1,5,-5z&quot; stroke-width=&quot;3&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text87&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_628&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3691.5&quot; x=&quot;1155.5&quot;&gt;wordcount分布示例&lt;/text&gt;&lt;/g&gt;&lt;image id=&quot;kity_image_911&quot; xlink:href=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-09-FlinkSlot分布例子.png?raw=true&quot; x=&quot;1111.5&quot; y=&quot;3611.5&quot; width=&quot;200&quot; height=&quot;75&quot;&gt;&lt;/image&gt;&lt;/g&gt;&lt;g id=&quot;minder_node93&quot;&gt;&lt;g id=&quot;node_expander89&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1382&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M897.5,3748.5A6,6,0,1,1,885.5,3748.5A6,6,0,1,1,897.5,3748.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1383&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline90&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M902.5,3737.5h547a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-547a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text90&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_634&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3742.5&quot; x=&quot;907.5&quot;&gt;经验上讲Slot的数量与CPU-core的数量一致为好。但考虑到超线程，可以让slotNumber=2*cpuCore&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node94&quot;&gt;&lt;g id=&quot;node_expander121&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1478&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M582.5,4258.5A6,6,0,1,1,570.5,4258.5A6,6,0,1,1,582.5,4258.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1479&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M572,4258.5L581,4258.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline122&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M587.5,4247.5h77a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-77a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text122&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_706&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4252.5&quot; x=&quot;592.5&quot;&gt;slot共享机制&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node95&quot;&gt;&lt;g id=&quot;node_expander94&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1397&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M709.5,3834.5A6,6,0,1,1,697.5,3834.5A6,6,0,1,1,709.5,3834.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1398&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M699,3834.5L708,3834.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline95&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M714.5,3823.5h89a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-89a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text95&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_646&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3828.5&quot; x=&quot;719.5&quot;&gt;solt共享的概念&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node96&quot;&gt;&lt;g id=&quot;node_expander92&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1391&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M848.5,3808.5A6,6,0,1,1,836.5,3808.5A6,6,0,1,1,848.5,3808.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1392&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline93&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M853.5,3788.5h690a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-690a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text93&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_641&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3793.5&quot; x=&quot;858.5&quot;&gt;默认情况下，Flink允许subtasks共享slot，即Flink会允许同一个作业（job）中来自不同的task的多个subtasks共享一个槽，&lt;/text&gt;&lt;text id=&quot;kity_text_642&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3811.5&quot; x=&quot;858.5&quot;&gt;即前提是他们来自同一个job，哪怕不同task也可以。这种情况下，可以使得同一个slot运行一个完整的job的流水线（pipleline）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node97&quot;&gt;&lt;g id=&quot;node_expander93&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1394&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M848.5,3869.5A6,6,0,1,1,836.5,3869.5A6,6,0,1,1,848.5,3869.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1395&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline94&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M853.5,3858.5h124a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-124a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text94&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_644&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3863.5&quot; x=&quot;858.5&quot;&gt;注意前提：同一个job&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node98&quot;&gt;&lt;g id=&quot;node_expander106&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1433&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M709.5,4137.5A6,6,0,1,1,697.5,4137.5A6,6,0,1,1,709.5,4137.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1434&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M699,4137.5L708,4137.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline107&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M714.5,4126.5h113a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-113a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text107&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_676&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4131.5&quot; x=&quot;719.5&quot;&gt;使用solt共享的优势&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node99&quot;&gt;&lt;g id=&quot;node_expander95&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1400&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M872.5,3931.5A6,6,0,1,1,860.5,3931.5A6,6,0,1,1,872.5,3931.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1401&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline96&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M877.5,3911.5h720a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-720a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text96&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_648&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3916.5&quot; x=&quot;882.5&quot;&gt;Flink集群需要与job程序中使用的最高并行度（highest parallelism ）一样多的solt，因此只需计算Job中最高并行度（parallelism），&lt;/text&gt;&lt;text id=&quot;kity_text_649&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3934.5&quot; x=&quot;882.5&quot;&gt;只要这个满足，其他的job也都能满足，因此不需要去计算一个程序中一共会起多少个task&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node100&quot;&gt;&lt;g id=&quot;node_expander100&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1415&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M872.5,4097.5A6,6,0,1,1,860.5,4097.5A6,6,0,1,1,872.5,4097.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1416&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M862,4097.5L871,4097.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline101&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M877.5,4077.5h281a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-281a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text101&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_662&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4082.5&quot; x=&quot;882.5&quot;&gt;如果有比较空闲的slot可以将更多的任务分配给它，&lt;/text&gt;&lt;text id=&quot;kity_text_663&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4100.5&quot; x=&quot;882.5&quot;&gt;可以提高资源利用率。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node101&quot;&gt;&lt;g id=&quot;node_expander96&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1403&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1203.5,3992.5A6,6,0,1,1,1191.5,3992.5A6,6,0,1,1,1203.5,3992.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1404&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline97&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1208.5,3981.5h288a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-288a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text97&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_651&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;3986.5&quot; x=&quot;1213.5&quot;&gt;非密集型（non-intensive）如source/map()子任务&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node102&quot;&gt;&lt;g id=&quot;node_expander97&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1406&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1203.5,4044.5A6,6,0,1,1,1191.5,4044.5A6,6,0,1,1,1203.5,4044.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1407&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline98&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1208.5,4033.5h214a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-214a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text98&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_653&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4038.5&quot; x=&quot;1213.5&quot;&gt;密集型（intensive）如window子任务&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node103&quot;&gt;&lt;g id=&quot;node_expander98&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1409&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1203.5,4105.5A6,6,0,1,1,1191.5,4105.5A6,6,0,1,1,1203.5,4105.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1410&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline99&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1208.5,4085.5h450a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-450a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text99&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_655&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4090.5&quot; x=&quot;1213.5&quot;&gt;若没有任务槽共享，有时候负载不高的Source/Map等subtask将会占据许多资源，&lt;/text&gt;&lt;text id=&quot;kity_text_656&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4108.5&quot; x=&quot;1213.5&quot;&gt;而负载较高的窗口subtask则会缺乏资源&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node104&quot;&gt;&lt;g id=&quot;node_expander99&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1412&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1203.5,4184.5A6,6,0,1,1,1191.5,4184.5A6,6,0,1,1,1203.5,4184.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1413&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline100&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1208.5,4155.5h523a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-523a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text100&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_658&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4160.5&quot; x=&quot;1213.5&quot;&gt;如果有任务槽共享机制，通过提高程序的基础并发量，&lt;/text&gt;&lt;text id=&quot;kity_text_659&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4178.5&quot; x=&quot;1213.5&quot;&gt;就可以让密集型子任务（heavy subtasks）公平的完全分散到任务管理器（TaskManager）中，&lt;/text&gt;&lt;text id=&quot;kity_text_660&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4196.5&quot; x=&quot;1213.5&quot;&gt;从而可以显著提高槽的资源利用率充分利用资源&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node105&quot;&gt;&lt;g id=&quot;node_expander105&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1430&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M872.5,4304A6,6,0,1,1,860.5,4304A6,6,0,1,1,872.5,4304&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1431&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M862,4304L871,4304&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline106&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M877.5,4243.5h297a5,5,0,0,1,5,5v111a5,5,0,0,1,-5,5h-297a5,5,0,0,1,-5,-5v-111a5,5,0,0,1,5,-5z&quot; stroke-width=&quot;3&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text106&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_674&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4347.5&quot; x=&quot;882.5&quot;&gt;例子：上述wordcount开启solt共享并且提高并行度后&lt;/text&gt;&lt;/g&gt;&lt;image id=&quot;kity_image_912&quot; xlink:href=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-09-slot共享示例.png?raw=true&quot; x=&quot;925.5&quot; y=&quot;4248.5&quot; width=&quot;200&quot; height=&quot;94&quot;&gt;&lt;/image&gt;&lt;/g&gt;&lt;g id=&quot;minder_node106&quot;&gt;&lt;g id=&quot;node_expander101&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1418&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1219.5,4265.5A6,6,0,1,1,1207.5,4265.5A6,6,0,1,1,1219.5,4265.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1419&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline102&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1224.5,4245.5h438a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-438a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text102&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_665&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4250.5&quot; x=&quot;1229.5&quot;&gt;操作：将WordCount的并行度从之前的2个增加到6个（Source并行度仍为1），&lt;/text&gt;&lt;text id=&quot;kity_text_666&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4268.5&quot; x=&quot;1229.5&quot;&gt;并开启slot共享（所有operator都在default共享组）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node107&quot;&gt;&lt;g id=&quot;node_expander104&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1427&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1219.5,4352.5A6,6,0,1,1,1207.5,4352.5A6,6,0,1,1,1219.5,4352.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1428&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M1209,4352.5L1218,4352.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline105&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1224.5,4341.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text105&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_672&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4346.5&quot; x=&quot;1229.5&quot;&gt;优势体现&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node108&quot;&gt;&lt;g id=&quot;node_expander102&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1421&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1327.5,4326.5A6,6,0,1,1,1315.5,4326.5A6,6,0,1,1,1327.5,4326.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1422&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline103&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1332.5,4315.5h544a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-544a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text103&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_668&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4320.5&quot; x=&quot;1337.5&quot;&gt;首先，我们不用去计算这个job会其多少个task，总之该任务最终会占用6个slots（最高并行度为6）。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node109&quot;&gt;&lt;g id=&quot;node_expander103&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1424&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1327.5,4378.5A6,6,0,1,1,1315.5,4378.5A6,6,0,1,1,1327.5,4378.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1425&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline104&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1332.5,4367.5h484a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-484a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text104&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_670&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4372.5&quot; x=&quot;1337.5&quot;&gt;其次，我们可以看到密集型操作keyAggregation/sink被平均地分配到各个TaskManager&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node110&quot;&gt;&lt;g id=&quot;node_expander120&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1475&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M709.5,4682.5A6,6,0,1,1,697.5,4682.5A6,6,0,1,1,709.5,4682.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1476&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M699,4682.5L708,4682.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline121&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M714.5,4671.5h149a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-149a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text121&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_704&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4676.5&quot; x=&quot;719.5&quot;&gt;实现共享slot以及分配策略&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node111&quot;&gt;&lt;g id=&quot;node_expander117&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1466&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M908.5,4572.5A6,6,0,1,1,896.5,4572.5A6,6,0,1,1,908.5,4572.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1467&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M898,4572.5L907,4572.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline118&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M913.5,4561.5h111a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-111a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text118&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_698&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4566.5&quot; x=&quot;918.5&quot;&gt;SlotSharingGroup&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node112&quot;&gt;&lt;g id=&quot;node_expander110&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1445&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1069.5,4481.5A6,6,0,1,1,1057.5,4481.5A6,6,0,1,1,1069.5,4481.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1446&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M1059,4481.5L1068,4481.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline111&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1074.5,4470.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text111&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_684&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4475.5&quot; x=&quot;1079.5&quot;&gt;概念&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node113&quot;&gt;&lt;g id=&quot;node_expander107&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1436&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1153.5,4429.5A6,6,0,1,1,1141.5,4429.5A6,6,0,1,1,1153.5,4429.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1437&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline108&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1158.5,4418.5h197a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-197a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text108&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_678&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4423.5&quot; x=&quot;1163.5&quot;&gt;默认slot sharing group是&quot;default&quot;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node114&quot;&gt;&lt;g id=&quot;node_expander108&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1439&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1153.5,4481.5A6,6,0,1,1,1141.5,4481.5A6,6,0,1,1,1153.5,4481.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1440&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline109&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1158.5,4470.5h1120a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-1120a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text109&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_680&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4475.5&quot; x=&quot;1163.5&quot;&gt;Flink中用来实现slot共享的类，它尽可能地让subtasks共享一个slot。Flink将把具有相同slot sharing group的 算子操作（operations）放入同一个插槽，同时保持其他插槽中没用此slot sharing group的算子操作&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node115&quot;&gt;&lt;g id=&quot;node_expander109&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1442&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1153.5,4533.5A6,6,0,1,1,1141.5,4533.5A6,6,0,1,1,1153.5,4533.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1443&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline110&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1158.5,4522.5h701a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-701a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text110&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_682&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4527.5&quot; x=&quot;1163.5&quot;&gt;手动强制指定slot sharing group：someStream.filter(...).slotSharingGroup(&quot;name&quot;)，就强制指定了filter的slot共享组为name。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node116&quot;&gt;&lt;g id=&quot;node_expander116&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1463&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1069.5,4663.5A6,6,0,1,1,1057.5,4663.5A6,6,0,1,1,1069.5,4663.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1464&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M1059,4663.5L1068,4663.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline117&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1074.5,4652.5h219a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-219a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text117&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_696&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4657.5&quot; x=&quot;1079.5&quot;&gt;怎么确定一个算子的SlotSharingGroup&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node117&quot;&gt;&lt;g id=&quot;node_expander111&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1448&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1338.5,4585.5A6,6,0,1,1,1326.5,4585.5A6,6,0,1,1,1338.5,4585.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1449&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline112&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1343.5,4574.5h701a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-701a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text112&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_686&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4579.5&quot; x=&quot;1348.5&quot;&gt;默认情况下，所有的operator（算子）都属于默认的共享组default，也就是说默认情况下所有的operator都是可以共享一个slot的&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node118&quot;&gt;&lt;g id=&quot;node_expander114&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1457&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1338.5,4663.5A6,6,0,1,1,1326.5,4663.5A6,6,0,1,1,1338.5,4663.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1458&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M1328,4663.5L1337,4663.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline115&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1343.5,4652.5h277a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-277a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text115&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_692&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4657.5&quot; x=&quot;1348.5&quot;&gt;根据input的group和自身是否设置group共同确定&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node119&quot;&gt;&lt;g id=&quot;node_expander112&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1451&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1665.5,4637.5A6,6,0,1,1,1653.5,4637.5A6,6,0,1,1,1665.5,4637.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1452&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline113&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1670.5,4626.5h432a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-432a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text113&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_688&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4631.5&quot; x=&quot;1675.5&quot;&gt;当所有input operators具有相同的slot共享组时，该operator会继承这个共享组&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node120&quot;&gt;&lt;g id=&quot;node_expander113&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1454&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1665.5,4689.5A6,6,0,1,1,1653.5,4689.5A6,6,0,1,1,1665.5,4689.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1455&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline114&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1670.5,4678.5h341a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-341a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text114&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_690&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4683.5&quot; x=&quot;1675.5&quot;&gt;判断是否写代码强制指定：**.slotSharingGroup(“group1”)&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node121&quot;&gt;&lt;g id=&quot;node_expander115&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1460&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1338.5,4741.5A6,6,0,1,1,1326.5,4741.5A6,6,0,1,1,1338.5,4741.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1461&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline116&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1343.5,4730.5h425a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-425a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text116&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_694&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4735.5&quot; x=&quot;1348.5&quot;&gt;好处：适当的设置可以减少每个slot运行的线程数，从而整体上减少机器的负载&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node122&quot;&gt;&lt;g id=&quot;node_expander119&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1472&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M908.5,4793.5A6,6,0,1,1,896.5,4793.5A6,6,0,1,1,908.5,4793.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1473&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M898,4793.5L907,4793.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline120&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M913.5,4782.5h116a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-116a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text120&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_702&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4787.5&quot; x=&quot;918.5&quot;&gt;CoLocationGroup&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node123&quot;&gt;&lt;g id=&quot;node_expander118&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1469&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1074.5,4793.5A6,6,0,1,1,1062.5,4793.5A6,6,0,1,1,1074.5,4793.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1470&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline119&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1079.5,4782.5h834a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-834a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text119&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_700&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4787.5&quot; x=&quot;1084.5&quot;&gt;用来强制将subtasks放到同一个slot中。CoLocationGroup主要用于迭代流中，用来保证迭代头与迭代尾的第i个subtask能被调度到同一个TaskManager上&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node124&quot;&gt;&lt;g id=&quot;node_expander125&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1490&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M582.5,4886.5A6,6,0,1,1,570.5,4886.5A6,6,0,1,1,582.5,4886.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1491&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M572,4886.5L581,4886.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline126&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M587.5,4875.5h149a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-149a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text126&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_714&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4880.5&quot; x=&quot;592.5&quot;&gt;一个应用需要多少个slot？&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node125&quot;&gt;&lt;g id=&quot;node_expander122&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1481&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M781.5,4845.5A6,6,0,1,1,769.5,4845.5A6,6,0,1,1,781.5,4845.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1482&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline123&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M786.5,4834.5h303a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-303a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text123&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_708&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4839.5&quot; x=&quot;791.5&quot;&gt;不设置SlotSharingGroup的情况下：应用的最大并行度&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node126&quot;&gt;&lt;g id=&quot;node_expander124&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1487&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M781.5,4927.5A6,6,0,1,1,769.5,4927.5A6,6,0,1,1,781.5,4927.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1488&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M771,4927.5L780,4927.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline125&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M786.5,4916.5h379a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-379a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text125&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_712&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4921.5&quot; x=&quot;791.5&quot;&gt;设置了SlotSharingGroup：所有SlotSharingGroup中最大并行度之和&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node127&quot;&gt;&lt;g id=&quot;node_expander123&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1484&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1210.5,4928A6,6,0,1,1,1198.5,4928A6,6,0,1,1,1210.5,4928&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1485&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline124&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1215.5,4886.5h552a5,5,0,0,1,5,5v73a5,5,0,0,1,-5,5h-552a5,5,0,0,1,-5,-5v-73a5,5,0,0,1,5,-5z&quot; stroke-width=&quot;3&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text124&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_710&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;4952.5&quot; x=&quot;1220.5&quot;&gt;如下图：source时为default，然后在map算子处设置gourp为test，那么这个需要的槽数是10+20=30&lt;/text&gt;&lt;/g&gt;&lt;image id=&quot;kity_image_913&quot; xlink:href=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-10-slot和并行度关系.png?raw=true&quot; x=&quot;1391.5&quot; y=&quot;4891.5&quot; width=&quot;200&quot; height=&quot;56&quot;&gt;&lt;/image&gt;&lt;/g&gt;&lt;g id=&quot;minder_node128&quot;&gt;&lt;g id=&quot;node_expander136&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1523&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M582.5,5157.5A6,6,0,1,1,570.5,5157.5A6,6,0,1,1,582.5,5157.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1524&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M572,5157.5L581,5157.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline137&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M587.5,5128.5h113a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-113a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text137&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_736&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5133.5&quot; x=&quot;592.5&quot;&gt;solt和并行度的关系&lt;/text&gt;&lt;text id=&quot;kity_text_737&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5151.5&quot; x=&quot;592.5&quot;&gt;-任务调度&lt;/text&gt;&lt;text id=&quot;kity_text_738&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5169.5&quot; x=&quot;592.5&quot;&gt;-pipeline&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node129&quot;&gt;&lt;g id=&quot;node_expander127&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1496&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M745.5,5010.5A6,6,0,1,1,733.5,5010.5A6,6,0,1,1,745.5,5010.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1497&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M735,5010.5L744,5010.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline128&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M750.5,4999.5h1060a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-1060a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text128&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_718&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5004.5&quot; x=&quot;755.5&quot;&gt;Flink通过任务槽（Task Slot）定义执行资源，每个TaskManager都有一或多个任务槽，每个任务槽都可以运行一个并行任务流(one pipeline of parallel tasks)，一个流(pipeline)包括多个连续的任务&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node130&quot;&gt;&lt;g id=&quot;node_expander126&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1493&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1855.5,5010.5A6,6,0,1,1,1843.5,5010.5A6,6,0,1,1,1855.5,5010.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1494&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline127&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1860.5,4999.5h89a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-89a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text127&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_716&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5004.5&quot; x=&quot;1865.5&quot;&gt;solt共享可调整&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node131&quot;&gt;&lt;g id=&quot;node_expander130&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1505&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M745.5,5088.5A6,6,0,1,1,733.5,5088.5A6,6,0,1,1,745.5,5088.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1506&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M735,5088.5L744,5088.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline131&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M750.5,5077.5h190a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-190a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text131&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_724&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5082.5&quot; x=&quot;755.5&quot;&gt;Flink通常会并行的执行连续的任务&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node132&quot;&gt;&lt;g id=&quot;node_expander128&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1499&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M985.5,5062.5A6,6,0,1,1,973.5,5062.5A6,6,0,1,1,985.5,5062.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1500&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline129&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M990.5,5051.5h261a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-261a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text129&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_720&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5056.5&quot; x=&quot;995.5&quot;&gt;对于Streaming程序来说，任何情况都如此执行&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node133&quot;&gt;&lt;g id=&quot;node_expander129&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1502&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M985.5,5114.5A6,6,0,1,1,973.5,5114.5A6,6,0,1,1,985.5,5114.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1503&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline130&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M990.5,5103.5h217a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-217a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text130&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_722&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5108.5&quot; x=&quot;995.5&quot;&gt;对于batch 程序，多数情况也如此执行&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node134&quot;&gt;&lt;g id=&quot;node_expander135&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1520&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M745.5,5244.5A6,6,0,1,1,733.5,5244.5A6,6,0,1,1,745.5,5244.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1521&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M735,5244.5L744,5244.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline136&quot; fill=&quot;none&quot; stroke=&quot;rgb(57, 80, 96)&quot; d=&quot;M750.5,5172.5h210a5,5,0,0,1,5,5v134a5,5,0,0,1,-5,5h-210a5,5,0,0,1,-5,-5v-134a5,5,0,0,1,5,-5z&quot; stroke-width=&quot;3&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text136&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_734&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5299.5&quot; x=&quot;810.5&quot;&gt;Scheduling示例&lt;/text&gt;&lt;/g&gt;&lt;image id=&quot;kity_image_914&quot; xlink:href=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-02-15-task和并行度.png?raw=true&quot; x=&quot;755.5&quot; y=&quot;5177.5&quot; width=&quot;200&quot; height=&quot;117&quot;&gt;&lt;/image&gt;&lt;/g&gt;&lt;g id=&quot;minder_node135&quot;&gt;&lt;g id=&quot;node_expander131&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1508&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1005.5,5166.5A6,6,0,1,1,993.5,5166.5A6,6,0,1,1,1005.5,5166.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1509&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline132&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1010.5,5155.5h419a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-419a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text132&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_726&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5160.5&quot; x=&quot;1015.5&quot;&gt;在具有2个TaskManager，每个TaskManager都有3个Task Slot的集群上运行&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node136&quot;&gt;&lt;g id=&quot;node_expander132&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1511&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1005.5,5218.5A6,6,0,1,1,993.5,5218.5A6,6,0,1,1,1005.5,5218.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1512&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline133&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1010.5,5207.5h422a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-422a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text133&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_728&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5212.5&quot; x=&quot;1015.5&quot;&gt;由一个data source、一个MapFunction和一个ReduceFunction组成的程序&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node137&quot;&gt;&lt;g id=&quot;node_expander133&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1514&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1005.5,5270.5A6,6,0,1,1,993.5,5270.5A6,6,0,1,1,1005.5,5270.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1515&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline134&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1010.5,5259.5h435a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-435a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text134&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_730&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5264.5&quot; x=&quot;1015.5&quot;&gt;data source和MapFunction的并发度都为4，而ReduceFunction的并发度为3&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node138&quot;&gt;&lt;g id=&quot;node_expander134&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1517&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1005.5,5322.5A6,6,0,1,1,993.5,5322.5A6,6,0,1,1,1005.5,5322.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1518&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline135&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1010.5,5311.5h870a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-870a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text135&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_732&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5316.5&quot; x=&quot;1015.5&quot;&gt;一个数据流由Source-Map-Reduce的顺序组成，一个MapFunction的第n个并行实例与一个ReduceFunction的第n个并行实例的连续任务可以组成一个pipeline&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node139&quot;&gt;&lt;g id=&quot;node_expander190&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1685&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M337.5,6324.5A6,6,0,1,1,325.5,6324.5A6,6,0,1,1,337.5,6324.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1686&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M327,6324.5L336,6324.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline191&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M341.5,6311.5h139a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-139a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text191&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_859&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;6317.5&quot; x=&quot;358.5&quot;&gt;State Backends&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node140&quot;&gt;&lt;g id=&quot;node_expander142&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1541&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M523.5,5462.5A6,6,0,1,1,511.5,5462.5A6,6,0,1,1,523.5,5462.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1542&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M513,5462.5L522,5462.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline143&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M528.5,5451.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text143&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_750&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5456.5&quot; x=&quot;533.5&quot;&gt;概念&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node141&quot;&gt;&lt;g id=&quot;node_expander138&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1529&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M607.5,5384.5A6,6,0,1,1,595.5,5384.5A6,6,0,1,1,607.5,5384.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1530&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline139&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M612.5,5373.5h1074a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-1074a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text139&quot; fill=&quot;#548dd4&quot;&gt;&lt;text id=&quot;kity_text_742&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5378.5&quot; x=&quot;617.5&quot;&gt;当检查点（checkpoint）机制启动时，状态将在检查点中持久化来应对数据丢失以及恢复。而状态在内部是如何表示的、状态是如何持久化到检查点中以及持久化到哪里都取决于选定的State Backend&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node142&quot;&gt;&lt;g id=&quot;node_expander139&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1532&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M607.5,5436.5A6,6,0,1,1,595.5,5436.5A6,6,0,1,1,607.5,5436.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1533&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline140&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M612.5,5425.5h376a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-376a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text140&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_744&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5430.5&quot; x=&quot;617.5&quot;&gt;Flink提供了不同的state backend，用于指定state的存储方式和位置&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node143&quot;&gt;&lt;g id=&quot;node_expander140&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1535&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M607.5,5488.5A6,6,0,1,1,595.5,5488.5A6,6,0,1,1,607.5,5488.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1536&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline141&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M612.5,5477.5h329a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-329a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text141&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_746&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5482.5&quot; x=&quot;617.5&quot;&gt;存储键/值索引的确切数据结构取决于所选的State Backend&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node144&quot;&gt;&lt;g id=&quot;node_expander141&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1538&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M607.5,5540.5A6,6,0,1,1,595.5,5540.5A6,6,0,1,1,607.5,5540.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1539&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline142&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M612.5,5529.5h1199a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-1199a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text142&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_748&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5534.5&quot; x=&quot;617.5&quot;&gt;有的后端存储将数据保存在内存中的哈希表中，而有的存储会使用RocksDB来保存键值对。除了定义保存状态的数据结构之外，后端存储还实现了获取键值对的特定时间点快照的功能，该功能可以将快照保存为检查点的一部分&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node145&quot;&gt;&lt;g id=&quot;node_expander182&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1661&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M523.5,6311.5A6,6,0,1,1,511.5,6311.5A6,6,0,1,1,523.5,6311.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1662&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M513,6311.5L522,6311.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline183&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M528.5,6300.5h190a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-190a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text183&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_842&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6305.5&quot; x=&quot;533.5&quot;&gt;种类（后续有时间详细扩展描述）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node146&quot;&gt;&lt;g id=&quot;node_expander155&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1580&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M763.5,5849.5A6,6,0,1,1,751.5,5849.5A6,6,0,1,1,763.5,5849.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1581&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M753,5849.5L762,5849.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline156&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M768.5,5820.5h188a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-188a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text156&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_778&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5825.5&quot; x=&quot;773.5&quot;&gt;MemoryStateBackend（默认）&lt;/text&gt;&lt;text id=&quot;kity_text_779&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5843.5&quot; x=&quot;773.5&quot;&gt;&lt;/text&gt;&lt;text id=&quot;kity_text_780&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5861.5&quot; x=&quot;773.5&quot;&gt;-较小&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node147&quot;&gt;&lt;g id=&quot;node_expander147&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1556&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1001.5,5680.5A6,6,0,1,1,989.5,5680.5A6,6,0,1,1,1001.5,5680.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1557&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M991,5680.5L1000,5680.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline148&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1006.5,5669.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text148&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_761&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5674.5&quot; x=&quot;1011.5&quot;&gt;描述&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node148&quot;&gt;&lt;g id=&quot;node_expander143&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1544&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1085.5,5593.5A6,6,0,1,1,1073.5,5593.5A6,6,0,1,1,1085.5,5593.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1545&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline144&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1090.5,5582.5h263a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-263a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text144&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_752&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5587.5&quot; x=&quot;1095.5&quot;&gt;内部状态backend ，用于维护Java堆上的状态&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node149&quot;&gt;&lt;g id=&quot;node_expander144&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1547&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1085.5,5645.5A6,6,0,1,1,1073.5,5645.5A6,6,0,1,1,1085.5,5645.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1548&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline145&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1090.5,5634.5h361a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-361a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text145&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_754&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5639.5&quot; x=&quot;1095.5&quot;&gt;&amp;#xa0;Key/value 状态和window算子包含存储值和计时器等的的哈希表&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node150&quot;&gt;&lt;g id=&quot;node_expander145&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1550&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1085.5,5697.5A6,6,0,1,1,1073.5,5697.5A6,6,0,1,1,1085.5,5697.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1551&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline146&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1090.5,5686.5h829a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-829a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text146&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_756&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5691.5&quot; x=&quot;1095.5&quot;&gt;在检查点时，此state backend将对state进行SNAPSHOT，并将其作为检查点确认消息的一部分发送到JobManager，JobManager也将其存储在其堆上&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node151&quot;&gt;&lt;g id=&quot;node_expander146&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1553&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1085.5,5758.5A6,6,0,1,1,1073.5,5758.5A6,6,0,1,1,1085.5,5758.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1554&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline147&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1090.5,5738.5h647a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-647a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text147&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_758&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5743.5&quot; x=&quot;1095.5&quot;&gt;默认情况下，MemoryStateBackend配置为支持异步快照。 异步快照可避免可能导致流应用程序背压的潜在阻塞管道。&lt;/text&gt;&lt;text id=&quot;kity_text_759&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5761.5&quot; x=&quot;1095.5&quot;&gt;（调试时可以关闭new MemoryStateBackend(MAX_MEM_STATE_SIZE, false);）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node152&quot;&gt;&lt;g id=&quot;node_expander151&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1568&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1001.5,5880.5A6,6,0,1,1,989.5,5880.5A6,6,0,1,1,1001.5,5880.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1569&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M991,5880.5L1000,5880.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline152&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1006.5,5869.5h46a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-46a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text152&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_770&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5874.5&quot; x=&quot;1011.5&quot;&gt;局限性&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node153&quot;&gt;&lt;g id=&quot;node_expander148&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1559&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1097.5,5828.5A6,6,0,1,1,1085.5,5828.5A6,6,0,1,1,1097.5,5828.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1560&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline149&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1102.5,5808.5h308a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-308a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text149&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_763&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5813.5&quot; x=&quot;1107.5&quot;&gt;默认情况下，每个状态的大小限制为5 MB。&lt;/text&gt;&lt;text id=&quot;kity_text_764&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5831.5&quot; x=&quot;1107.5&quot;&gt;可以在MemoryStateBackend的构造函数中增加此值。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node154&quot;&gt;&lt;g id=&quot;node_expander149&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1562&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1097.5,5889.5A6,6,0,1,1,1085.5,5889.5A6,6,0,1,1,1097.5,5889.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1563&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline150&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1102.5,5878.5h326a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-326a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text150&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_766&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5883.5&quot; x=&quot;1107.5&quot;&gt;无论配置的最大状态大小如何，状态都不能大于akka帧大小&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node155&quot;&gt;&lt;g id=&quot;node_expander150&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1565&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1097.5,5941.5A6,6,0,1,1,1085.5,5941.5A6,6,0,1,1,1097.5,5941.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1566&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline151&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1102.5,5930.5h206a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-206a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text151&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_768&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5935.5&quot; x=&quot;1107.5&quot;&gt;聚合状态必须适合JobManager内存&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node156&quot;&gt;&lt;g id=&quot;node_expander154&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1577&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1001.5,6019.5A6,6,0,1,1,989.5,6019.5A6,6,0,1,1,1001.5,6019.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1578&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M991,6019.5L1000,6019.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline155&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1006.5,6008.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text155&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_776&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6013.5&quot; x=&quot;1011.5&quot;&gt;应用场景&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node157&quot;&gt;&lt;g id=&quot;node_expander152&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1571&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1109.5,5993.5A6,6,0,1,1,1097.5,5993.5A6,6,0,1,1,1109.5,5993.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1572&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline153&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1114.5,5982.5h202a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-202a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text153&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_772&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;5987.5&quot; x=&quot;1119.5&quot;&gt;本地开发和调试，因为它的状态有限&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node158&quot;&gt;&lt;g id=&quot;node_expander153&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1574&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1109.5,6045.5A6,6,0,1,1,1097.5,6045.5A6,6,0,1,1,1109.5,6045.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1575&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline154&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1114.5,6034.5h562a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-562a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text154&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_774&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6039.5&quot; x=&quot;1119.5&quot;&gt;适合很少状态的作业，如仅包含一次记录功能（Map，FlatMap或Filter）的作业或使用Kafkaconsumer&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node159&quot;&gt;&lt;g id=&quot;node_expander165&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1610&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M763.5,6291.5A6,6,0,1,1,751.5,6291.5A6,6,0,1,1,763.5,6291.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1611&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M753,6291.5L762,6291.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline166&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M768.5,6262.5h103a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-103a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text166&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_800&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6267.5&quot; x=&quot;773.5&quot;&gt;FsStateBackend&lt;/text&gt;&lt;text id=&quot;kity_text_801&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6285.5&quot; x=&quot;773.5&quot;&gt;&lt;/text&gt;&lt;text id=&quot;kity_text_802&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6303.5&quot; x=&quot;773.5&quot;&gt;-大&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node160&quot;&gt;&lt;g id=&quot;node_expander161&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1598&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M916.5,6200.5A6,6,0,1,1,904.5,6200.5A6,6,0,1,1,916.5,6200.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1599&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M906,6200.5L915,6200.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline162&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M921.5,6189.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text162&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_792&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6194.5&quot; x=&quot;926.5&quot;&gt;描述&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node161&quot;&gt;&lt;g id=&quot;node_expander156&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1583&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1000.5,6096.5A6,6,0,1,1,988.5,6096.5A6,6,0,1,1,1000.5,6096.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1584&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline157&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1005.5,6085.5h82a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-82a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text157&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_782&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6090.5&quot; x=&quot;1010.5&quot;&gt;基于文件系统&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node162&quot;&gt;&lt;g id=&quot;node_expander157&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1586&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1000.5,6148.5A6,6,0,1,1,988.5,6148.5A6,6,0,1,1,1000.5,6148.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1587&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline158&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1005.5,6137.5h268a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-268a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text158&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_784&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6142.5&quot; x=&quot;1010.5&quot;&gt;将正在运行的数据保存在TaskManager的内存中&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node163&quot;&gt;&lt;g id=&quot;node_expander158&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1589&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1000.5,6200.5A6,6,0,1,1,988.5,6200.5A6,6,0,1,1,1000.5,6200.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1590&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline159&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1005.5,6189.5h359a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-359a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text159&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_786&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6194.5&quot; x=&quot;1010.5&quot;&gt;在检查点时，它将状态SNAPSHOT写入配置的文件系统和目录中。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node164&quot;&gt;&lt;g id=&quot;node_expander159&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1592&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1000.5,6252.5A6,6,0,1,1,988.5,6252.5A6,6,0,1,1,1000.5,6252.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1593&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline160&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1005.5,6241.5h752a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-752a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text160&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_788&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6246.5&quot; x=&quot;1010.5&quot;&gt;最小元数据（&amp;#xa0;Minimal metadata）存储在JobManager的内存中（或者，在高可用性模式下，存储在元数据检查点中（Zookeeper））。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node165&quot;&gt;&lt;g id=&quot;node_expander160&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1595&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1000.5,6304.5A6,6,0,1,1,988.5,6304.5A6,6,0,1,1,1000.5,6304.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1596&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline161&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1005.5,6293.5h792a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-792a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text161&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_790&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6298.5&quot; x=&quot;1010.5&quot;&gt;FsStateBackend&amp;#xa0;默认使用异步SNAPSHOT，以避免在编写状态检查点时阻塞处理管道。（禁用的话可以使用new FsStateBackend(path, false);）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node166&quot;&gt;&lt;g id=&quot;node_expander164&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1607&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M916.5,6382.5A6,6,0,1,1,904.5,6382.5A6,6,0,1,1,916.5,6382.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1608&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M906,6382.5L915,6382.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline165&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M921.5,6371.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text165&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_798&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6376.5&quot; x=&quot;926.5&quot;&gt;使用场景&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node167&quot;&gt;&lt;g id=&quot;node_expander162&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1601&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1024.5,6356.5A6,6,0,1,1,1012.5,6356.5A6,6,0,1,1,1024.5,6356.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1602&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline163&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1029.5,6345.5h351a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-351a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text163&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_794&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6350.5&quot; x=&quot;1034.5&quot;&gt;Jobs with large state, long windows, large key/value states.&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node168&quot;&gt;&lt;g id=&quot;node_expander163&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1604&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1024.5,6408.5A6,6,0,1,1,1012.5,6408.5A6,6,0,1,1,1024.5,6408.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1605&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline164&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1029.5,6397.5h269a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-269a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text164&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_796&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6402.5&quot; x=&quot;1034.5&quot;&gt;所有高可用性设置。All high-availability setups.&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node169&quot;&gt;&lt;g id=&quot;node_expander181&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1658&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M763.5,6773.5A6,6,0,1,1,751.5,6773.5A6,6,0,1,1,763.5,6773.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1659&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M753,6773.5L762,6773.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline182&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M768.5,6744.5h142a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-142a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text182&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_838&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6749.5&quot; x=&quot;773.5&quot;&gt;RocksDBStateBackend&lt;/text&gt;&lt;text id=&quot;kity_text_839&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6767.5&quot; x=&quot;773.5&quot;&gt;&lt;/text&gt;&lt;text id=&quot;kity_text_840&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6785.5&quot; x=&quot;773.5&quot;&gt;-超大&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node170&quot;&gt;&lt;g id=&quot;node_expander171&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1628&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M955.5,6564.5A6,6,0,1,1,943.5,6564.5A6,6,0,1,1,955.5,6564.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1629&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M945,6564.5L954,6564.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline172&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M960.5,6553.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text172&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_814&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6558.5&quot; x=&quot;965.5&quot;&gt;描述&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node171&quot;&gt;&lt;g id=&quot;node_expander166&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1613&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1039.5,6460.5A6,6,0,1,1,1027.5,6460.5A6,6,0,1,1,1039.5,6460.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1614&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline167&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1044.5,6449.5h82a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-82a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text167&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_804&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6454.5&quot; x=&quot;1049.5&quot;&gt;基于文件系统&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node172&quot;&gt;&lt;g id=&quot;node_expander167&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1616&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1039.5,6512.5A6,6,0,1,1,1027.5,6512.5A6,6,0,1,1,1039.5,6512.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1617&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline168&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1044.5,6501.5h354a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-354a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text168&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_806&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6506.5&quot; x=&quot;1049.5&quot;&gt;将RocksDB中正在运行的数据保存在TaskManager数据目录中。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node173&quot;&gt;&lt;g id=&quot;node_expander168&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1619&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1039.5,6564.5A6,6,0,1,1,1027.5,6564.5A6,6,0,1,1,1039.5,6564.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1620&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline169&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1044.5,6553.5h454a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-454a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text169&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_808&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6558.5&quot; x=&quot;1049.5&quot;&gt;在检查点时，整个RocksDB数据库将被checkpointed到配置的文件系统和目录中。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node174&quot;&gt;&lt;g id=&quot;node_expander169&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1622&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1039.5,6616.5A6,6,0,1,1,1027.5,6616.5A6,6,0,1,1,1039.5,6616.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1623&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline170&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1044.5,6605.5h617a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-617a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text170&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_810&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6610.5&quot; x=&quot;1049.5&quot;&gt;最小元数据存储在JobManager的内存中（或者，在高可用性模式下，存储在元数据检查点中（Zookeeper））。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node175&quot;&gt;&lt;g id=&quot;node_expander170&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1625&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1039.5,6668.5A6,6,0,1,1,1027.5,6668.5A6,6,0,1,1,1039.5,6668.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1626&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline171&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1044.5,6657.5h286a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-286a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text171&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_812&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6662.5&quot; x=&quot;1049.5&quot;&gt;RocksDBStateBackend始终执行异步SNAPSHOT。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node176&quot;&gt;&lt;g id=&quot;node_expander173&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1634&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M955.5,6738.5A6,6,0,1,1,943.5,6738.5A6,6,0,1,1,955.5,6738.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1635&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M945,6738.5L954,6738.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline174&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M960.5,6727.5h46a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-46a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text174&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_820&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6732.5&quot; x=&quot;965.5&quot;&gt;局限性&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node177&quot;&gt;&lt;g id=&quot;node_expander172&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1631&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1051.5,6738.5A6,6,0,1,1,1039.5,6738.5A6,6,0,1,1,1051.5,6738.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1632&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline173&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1056.5,6709.5h717a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-717a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text173&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_816&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6714.5&quot; x=&quot;1061.5&quot;&gt;由于RocksDB的JNI桥接API基于byte []，因此每个Keys和每个值的最大支持大小为2 ^ 31个字节。&lt;/text&gt;&lt;text id=&quot;kity_text_817&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6732.5&quot; x=&quot;1061.5&quot;&gt;重要提示：在RocksDB中使用合并 算子操作的状态（例如ListState）可以静默地累积&amp;gt; 2 ^ 31字节的值大小，然后在下次检索时失败。&lt;/text&gt;&lt;text id=&quot;kity_text_818&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6750.5&quot; x=&quot;1061.5&quot;&gt;这是目前RocksDB JNI的一个限制。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node178&quot;&gt;&lt;g id=&quot;node_expander176&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1643&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M955.5,6834.5A6,6,0,1,1,943.5,6834.5A6,6,0,1,1,955.5,6834.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1644&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M945,6834.5L954,6834.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline177&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M960.5,6823.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text177&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_826&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6828.5&quot; x=&quot;965.5&quot;&gt;使用场景&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node179&quot;&gt;&lt;g id=&quot;node_expander174&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1637&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1063.5,6808.5A6,6,0,1,1,1051.5,6808.5A6,6,0,1,1,1063.5,6808.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1638&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline175&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1068.5,6797.5h378a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-378a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text175&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_822&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6802.5&quot; x=&quot;1073.5&quot;&gt;Jobs with very large state, long windows, large key/value states.&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node180&quot;&gt;&lt;g id=&quot;node_expander175&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1640&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1063.5,6860.5A6,6,0,1,1,1051.5,6860.5A6,6,0,1,1,1063.5,6860.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1641&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline176&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1068.5,6849.5h269a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-269a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text176&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_824&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6854.5&quot; x=&quot;1073.5&quot;&gt;所有高可用性设置。All high-availability setups.&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node181&quot;&gt;&lt;g id=&quot;node_expander180&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1655&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M955.5,6982.5A6,6,0,1,1,943.5,6982.5A6,6,0,1,1,955.5,6982.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1656&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M945,6982.5L954,6982.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline181&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M960.5,6971.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text181&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_836&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6976.5&quot; x=&quot;965.5&quot;&gt;特点&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node182&quot;&gt;&lt;g id=&quot;node_expander177&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1646&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1039.5,6912.5A6,6,0,1,1,1027.5,6912.5A6,6,0,1,1,1039.5,6912.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1647&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline178&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1044.5,6901.5h638a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-638a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text178&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_828&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6906.5&quot; x=&quot;1049.5&quot;&gt;使用RocksDB时，状态大小仅受可用磁盘空间量的限制，这使RocksDBStateBackend成为管理超大状态的绝佳选择。&amp;#xa0;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node183&quot;&gt;&lt;g id=&quot;node_expander178&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1649&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1039.5,6982.5A6,6,0,1,1,1027.5,6982.5A6,6,0,1,1,1039.5,6982.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1650&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline179&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1044.5,6953.5h768a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-768a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text179&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_830&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6958.5&quot; x=&quot;1049.5&quot;&gt;使用RocksDB时的权衡是所有状态访问和检索都需要序列化（或反序列化）才能跨越JNI边界。&lt;/text&gt;&lt;text id=&quot;kity_text_831&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6976.5&quot; x=&quot;1049.5&quot;&gt;即所有读/写都必须通过去/序列化来检索/存储状态对象，&amp;#xa0;与上面提到的 on-heap（内存） backends相比，这可能会影响应用程序的吞吐量。&lt;/text&gt;&lt;text id=&quot;kity_text_832&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;6994.5&quot; x=&quot;1049.5&quot;&gt;（&amp;#xa0;All reads/writes from/to this backend have to go through de-/serialization to retrieve/store the state objects）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node184&quot;&gt;&lt;g id=&quot;node_expander179&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1652&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1039.5,7052.5A6,6,0,1,1,1027.5,7052.5A6,6,0,1,1,1039.5,7052.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1653&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline180&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1044.5,7041.5h351a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-351a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text180&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_834&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7046.5&quot; x=&quot;1049.5&quot;&gt;RocksDBStateBackend是目前唯一提供增量检查点的backend&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node185&quot;&gt;&lt;g id=&quot;node_expander189&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1682&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M523.5,7186.5A6,6,0,1,1,511.5,7186.5A6,6,0,1,1,523.5,7186.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1683&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M513,7186.5L522,7186.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline190&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M528.5,7175.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text190&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_857&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7180.5&quot; x=&quot;533.5&quot;&gt;配置&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node186&quot;&gt;&lt;g id=&quot;node_expander185&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1670&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M607.5,7130.5A6,6,0,1,1,595.5,7130.5A6,6,0,1,1,607.5,7130.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1671&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M597,7130.5L606,7130.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline186&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M612.5,7119.5h82a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-82a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text186&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_848&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7124.5&quot; x=&quot;617.5&quot;&gt;默认全局配置&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node187&quot;&gt;&lt;g id=&quot;node_expander183&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1664&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M739.5,7104.5A6,6,0,1,1,727.5,7104.5A6,6,0,1,1,739.5,7104.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1665&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline184&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M744.5,7093.5h370a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-370a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text184&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_844&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7098.5&quot; x=&quot;749.5&quot;&gt;默认情况下，配置文件flink-conf.yaml确定所有Flink作业的状态后台&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node188&quot;&gt;&lt;g id=&quot;node_expander184&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1667&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M739.5,7156.5A6,6,0,1,1,727.5,7156.5A6,6,0,1,1,739.5,7156.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1668&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline185&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M744.5,7145.5h228a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-228a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text185&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_846&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7150.5&quot; x=&quot;749.5&quot;&gt;state.backend、state.checkpoints.dir&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node189&quot;&gt;&lt;g id=&quot;node_expander188&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1679&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M607.5,7243.5A6,6,0,1,1,595.5,7243.5A6,6,0,1,1,607.5,7243.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1680&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M597,7243.5L606,7243.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline189&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M612.5,7232.5h112a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-112a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text189&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_855&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7237.5&quot; x=&quot;617.5&quot;&gt;对每个job单独配置&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node190&quot;&gt;&lt;g id=&quot;node_expander186&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1673&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M769.5,7208.5A6,6,0,1,1,757.5,7208.5A6,6,0,1,1,769.5,7208.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1674&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline187&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M774.5,7197.5h282a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-282a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text187&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_850&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7202.5&quot; x=&quot;779.5&quot;&gt;针对此job的StreamExecutionEnvironment来配置&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node191&quot;&gt;&lt;g id=&quot;node_expander187&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1676&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M769.5,7269.5A6,6,0,1,1,757.5,7269.5A6,6,0,1,1,769.5,7269.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1677&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline188&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M774.5,7249.5h524a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-524a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text188&quot; fill=&quot;#ff0000&quot;&gt;&lt;text id=&quot;kity_text_852&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7254.5&quot; x=&quot;779.5&quot;&gt;val env = StreamExecutionEnvironment.getExecutionEnvironment()&lt;/text&gt;&lt;text id=&quot;kity_text_853&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7272.5&quot; x=&quot;779.5&quot;&gt;env.setStateBackend(new FsStateBackend(&quot;hdfs://namenode:40010/flink/checkpoints&quot;))&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node192&quot;&gt;&lt;g id=&quot;node_expander202&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1721&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M337.5,7463.5A6,6,0,1,1,325.5,7463.5A6,6,0,1,1,337.5,7463.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1722&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M327,7463.5L336,7463.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline203&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M341.5,7450.5h150a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-150a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text203&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_885&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;7456.5&quot; x=&quot;358.5&quot;&gt;Savepoints保存点&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node193&quot;&gt;&lt;g id=&quot;node_expander193&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1694&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M534.5,7365.5A6,6,0,1,1,522.5,7365.5A6,6,0,1,1,534.5,7365.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1695&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M524,7365.5L533,7365.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline194&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M539.5,7354.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text194&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_865&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7359.5&quot; x=&quot;544.5&quot;&gt;概念&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node194&quot;&gt;&lt;g id=&quot;node_expander191&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1688&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M618.5,7339.5A6,6,0,1,1,606.5,7339.5A6,6,0,1,1,618.5,7339.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1689&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline192&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M623.5,7328.5h633a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-633a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text192&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_861&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7333.5&quot; x=&quot;628.5&quot;&gt;使用Data Stream API的程序可以从指定的保存点恢复。保存点可以更新程序和Flink集群，并且不丢失任何状态的功能&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node195&quot;&gt;&lt;g id=&quot;node_expander192&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1691&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M618.5,7391.5A6,6,0,1,1,606.5,7391.5A6,6,0,1,1,618.5,7391.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1692&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline193&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M623.5,7380.5h694a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-694a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text193&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_863&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7385.5&quot; x=&quot;628.5&quot;&gt;savepoint是手动触发的checkpoint，它会获取程序的SNAPSHOT并将其写入state backend。他们依靠常规的checkpoint机制&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node196&quot;&gt;&lt;g id=&quot;node_expander201&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1718&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M534.5,7561.5A6,6,0,1,1,522.5,7561.5A6,6,0,1,1,534.5,7561.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1719&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M524,7561.5L533,7561.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline202&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M539.5,7550.5h125a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-125a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text202&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_883&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7555.5&quot; x=&quot;544.5&quot;&gt;与checkpoint的比较&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node197&quot;&gt;&lt;g id=&quot;node_expander194&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1697&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M709.5,7444.5A6,6,0,1,1,697.5,7444.5A6,6,0,1,1,709.5,7444.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1698&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline195&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M714.5,7433.5h464a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-464a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text195&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_867&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7438.5&quot; x=&quot;719.5&quot;&gt;相对于checkpoint来比较，checkpoint是针对于内部的，savepoint是针对于外部的&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node198&quot;&gt;&lt;g id=&quot;node_expander195&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1700&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M709.5,7496.5A6,6,0,1,1,697.5,7496.5A6,6,0,1,1,709.5,7496.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1701&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline196&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M714.5,7485.5h194a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-194a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text196&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_869&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7490.5&quot; x=&quot;719.5&quot;&gt;checkpoint自动，savepoint手动&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node199&quot;&gt;&lt;g id=&quot;node_expander198&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1709&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M709.5,7583.5A6,6,0,1,1,697.5,7583.5A6,6,0,1,1,709.5,7583.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1710&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M699,7583.5L708,7583.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline199&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M714.5,7572.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text199&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_876&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7577.5&quot; x=&quot;719.5&quot;&gt;失效问题&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node200&quot;&gt;&lt;g id=&quot;node_expander196&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1703&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M817.5,7557.5A6,6,0,1,1,805.5,7557.5A6,6,0,1,1,817.5,7557.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1704&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline197&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M822.5,7537.5h689a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-689a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text197&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_871&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7542.5&quot; x=&quot;827.5&quot;&gt;程序执行时会定期在worker节点生成快照和checkpoint。&lt;/text&gt;&lt;text id=&quot;kity_text_872&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7560.5&quot; x=&quot;827.5&quot;&gt;由于Flink的恢复机制只需要使用最新一个有效的checkpoint，在新的checkpoint生成后就可以安全移除其余旧的checkpoint了&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node201&quot;&gt;&lt;g id=&quot;node_expander197&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1706&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M817.5,7618.5A6,6,0,1,1,805.5,7618.5A6,6,0,1,1,817.5,7618.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1707&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline198&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M822.5,7607.5h370a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-370a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text198&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_874&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7612.5&quot; x=&quot;827.5&quot;&gt;保存点是由用户触发的，并且在新的检查点生成后不会自动过期失效&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node202&quot;&gt;&lt;g id=&quot;node_expander200&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1715&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M709.5,7679.5A6,6,0,1,1,697.5,7679.5A6,6,0,1,1,709.5,7679.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1716&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M699,7679.5L708,7679.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline201&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M714.5,7668.5h113a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-113a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text201&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_881&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7673.5&quot; x=&quot;719.5&quot;&gt;举例，与spark比较&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node203&quot;&gt;&lt;g id=&quot;node_expander199&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_1712&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M872.5,7679.5A6,6,0,1,1,860.5,7679.5A6,6,0,1,1,872.5,7679.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_1713&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline200&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M877.5,7659.5h782a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-782a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text200&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_878&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7664.5&quot; x=&quot;882.5&quot;&gt;SparkStreaming中，如果使用了checkpoint，流处理程序有更新的话，进行程序替换需要清理调checkpoint才能生效，&lt;/text&gt;&lt;text id=&quot;kity_text_879&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;7682.5&quot; x=&quot;882.5&quot;&gt;而在flink中，可以在流处理程序更新后，手动添加savepoint，那么新程序能从savepoint的地方开始读取数据，能与老程序并行存在或者直接替换&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;至此，本篇内容完成。&lt;/p&gt;</content><author><name>叶子  ( ˘ ³˘)♥</name></author><category term="Flink" /><summary type="html">最近在重新整理学习flink官网内容，并在学习过程中将内容总结成脑图，是叶子自己最近一点一点整理绘制哒，转载请贴此文链接谢谢啦～图片以 svg形式插入文章，可拖动显示完整，后续如有更改会持续更新。</summary></entry><entry><title type="html">Flink编程模型知识梳理脑图</title><link href="http://localhost:4000/bigdata/2019/02/17/Flink%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E8%84%91%E5%9B%BE/" rel="alternate" type="text/html" title="Flink编程模型知识梳理脑图" /><published>2019-02-17T00:00:00+08:00</published><updated>2019-02-17T00:00:00+08:00</updated><id>http://localhost:4000/bigdata/2019/02/17/Flink%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E8%84%91%E5%9B%BE</id><content type="html" xml:base="http://localhost:4000/bigdata/2019/02/17/Flink%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E8%84%91%E5%9B%BE/">&lt;blockquote&gt;
  &lt;p&gt;最近在重新整理学习flink官网内容，并在学习过程中将内容总结成脑图，是叶子自己最近一点一点整理绘制哒，转载请贴此文链接谢谢啦～图片以svg形式插入文章，可拖动显示完整，后续如有更改会持续更新。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此脑图绘制依据官网链接：&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.7/concepts/programming-model.html&quot;&gt;Dataflow Programming Model&lt;/a&gt;&lt;/p&gt;

&lt;div width=&quot;100%&quot; style=&quot;overflow-x: auto;&quot;&gt; 
&lt;svg id=&quot;kity_svg_6&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; width=&quot;1893&quot; height=&quot;2111&quot; style=&quot;background-color: rgb(251, 251, 251); visibility: visible; background-position: initial initial; background-repeat: initial initial;&quot; viewBox=&quot;0 0 1893 2111&quot;&gt;&lt;defs id=&quot;kity_defs_7&quot;&gt;&lt;linearGradient id=&quot;kity_linearGradient_17&quot; x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;1&quot;&gt;&lt;stop id=&quot;kity_stop_18&quot; offset=&quot;0&quot; stop-color=&quot;rgb(255, 255, 255)&quot;&gt;&lt;/stop&gt;&lt;stop id=&quot;kity_stop_19&quot; offset=&quot;1&quot; stop-color=&quot;rgb(204, 204, 204)&quot;&gt;&lt;/stop&gt;&lt;/linearGradient&gt;&lt;marker id=&quot;kity_marker_2&quot; orient=&quot;auto&quot; refX=&quot;6&quot; refY=&quot;0&quot; viewBox=&quot;-7 -7 14 14&quot; markerWidth=&quot;7&quot; markerHeight=&quot;7&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;kity_path_3&quot; fill=&quot;rgb(115, 161, 191)&quot; stroke=&quot;none&quot; d=&quot;M6,0A6,6,0,1,1,-6,0A6,6,0,1,1,6,0&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;g id=&quot;kity_g_8&quot;&gt;&lt;g id=&quot;minder1&quot; text-rendering=&quot;optimize-speed&quot;&gt;&lt;g id=&quot;minder_connect_group1&quot;&gt;&lt;path id=&quot;kity_path_31&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M105.5,1039.5A186,930,0,0,1,291.5,109.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_33&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M392.5,109.5C412.5,109.5,412.5,31.5,432.5,31.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_35&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M392.5,109.5C412.5,109.5,412.5,83.5,432.5,83.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_37&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M392.5,109.5C412.5,109.5,412.5,135.5,432.5,135.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_39&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M392.5,109.5C412.5,109.5,412.5,187.5,432.5,187.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_41&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M105.5,1039.5A189,708.5,0,0,1,294.5,331&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_43&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M424.5,331.5C444.5,331,444.5,253.5,464.5,253.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_45&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M424.5,331.5C444.5,331,444.5,305.5,464.5,305.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_47&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M424.5,331.5C444.5,331,444.5,357.5,464.5,357.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_49&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M424.5,331.5C444.5,331,444.5,409.5,464.5,409.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_51&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M105.5,1039.5A185,435.5,0,0,1,290.5,604&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_53&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M544.5,604.5C564.5,604,564.5,480.5,584.5,480.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_55&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M544.5,604.5C564.5,604,564.5,532.5,584.5,532.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_57&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M544.5,604.5C564.5,604,564.5,610.5,584.5,610.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_59&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M652.5,610.5C672.5,610.5,672.5,584.5,692.5,584.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_61&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M652.5,610.5C672.5,610.5,672.5,636.5,692.5,636.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_63&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M544.5,604.5C564.5,604,564.5,727.5,584.5,727.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_65&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M767.5,727.5C787.5,727.5,787.5,688.5,807.5,688.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_67&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1012.5,688.5C1032.5,688.5,1032.5,688.5,1052.5,688.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_69&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M767.5,727.5C787.5,727.5,787.5,766.5,807.5,766.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_71&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1023.5,766.5C1043.5,766.5,1043.5,740.5,1063.5,740.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_73&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1023.5,766.5C1043.5,766.5,1043.5,792.5,1063.5,792.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_75&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M105.5,1039.5A203,179,0,0,1,308.5,860.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_77&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M662.5,860.5C682.5,860.5,682.5,834.5,702.5,834.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_79&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M965.5,834.5C985.5,834.5,985.5,834.5,1005.5,834.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_81&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M662.5,860.5C682.5,860.5,682.5,886.5,702.5,886.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_83&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M105.5,1039.5A203,0,0,0,1,308.5,1039.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_85&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M431.5,1039.5C451.5,1039.5,451.5,974.5,471.5,974.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_87&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M539.5,974.5C559.5,974.5,559.5,948.5,579.5,948.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_89&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M539.5,974.5C559.5,974.5,559.5,1000.5,579.5,1000.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_91&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M431.5,1039.5C451.5,1039.5,451.5,1104.5,471.5,1104.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_93&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M539.5,1104.5C559.5,1104.5,559.5,1052.5,579.5,1052.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_95&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M539.5,1104.5C559.5,1104.5,559.5,1104.5,579.5,1104.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_97&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M539.5,1104.5C559.5,1104.5,559.5,1156.5,579.5,1156.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_99&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M105.5,1039.5A203,231,0,0,0,308.5,1270.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_101&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M408.5,1270.5C428.5,1270.5,428.5,1218.5,448.5,1218.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_103&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M408.5,1270.5C428.5,1270.5,428.5,1270.5,448.5,1270.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_105&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M408.5,1270.5C428.5,1270.5,428.5,1322.5,448.5,1322.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_107&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M105.5,1039.5A203,407,0,0,0,308.5,1446.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_109&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M620.5,1446.5C640.5,1446.5,640.5,1384.5,660.5,1384.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_111&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M620.5,1446.5C640.5,1446.5,640.5,1508.5,660.5,1508.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_113&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M709.5,1508.5C729.5,1508.5,729.5,1437.5,749.5,1437.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_115&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M709.5,1508.5C729.5,1508.5,729.5,1489.5,749.5,1489.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_117&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M709.5,1508.5C729.5,1508.5,729.5,1580.5,749.5,1580.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_119&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M921.5,1580.5C941.5,1580.5,941.5,1541.5,961.5,1541.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_121&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M921.5,1580.5C941.5,1580.5,941.5,1619.5,961.5,1619.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_123&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1085.5,1619.5C1105.5,1619.5,1105.5,1593.5,1125.5,1593.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_125&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M1085.5,1619.5C1105.5,1619.5,1105.5,1645.5,1125.5,1645.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_127&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M105.5,1039.5A203,732,0,0,0,308.5,1771.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_129&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M392.5,1771.5C412.5,1771.5,412.5,1706.5,432.5,1706.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_131&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M392.5,1771.5C412.5,1771.5,412.5,1758.5,432.5,1758.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_133&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M587.5,1758.5C607.5,1758.5,607.5,1758.5,627.5,1758.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_135&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M392.5,1771.5C412.5,1771.5,412.5,1836.5,432.5,1836.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_137&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M476.5,1836.5C496.5,1836.5,496.5,1810.5,516.5,1810.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_139&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M476.5,1836.5C496.5,1836.5,496.5,1862.5,516.5,1862.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_141&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M105.5,1039.5A203,937,0,0,0,308.5,1976.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_143&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M483.5,1976.5C503.5,1976.5,503.5,1924.5,523.5,1924.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_145&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M483.5,1976.5C503.5,1976.5,503.5,2028.5,523.5,2028.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_147&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M663.5,2028.5C683.5,2028.5,683.5,1976.5,703.5,1976.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_149&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M795.5,1976.5C815.5,1976.5,815.5,1976.5,835.5,1976.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_151&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M663.5,2028.5C683.5,2028.5,683.5,2028.5,703.5,2028.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_153&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M908.5,2028.5C928.5,2028.5,928.5,2028.5,948.5,2028.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_155&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M663.5,2028.5C683.5,2028.5,683.5,2080.5,703.5,2080.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_157&quot; fill=&quot;none&quot; stroke=&quot;rgb(115, 161, 191)&quot; stroke-width=&quot;1&quot; d=&quot;M843.5,2080.5C863.5,2080.5,863.5,2080.5,883.5,2080.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;minder_node1&quot;&gt;&lt;path id=&quot;node_outline1&quot; fill=&quot;rgb(115, 161, 191)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M25.5,1019.5h160a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-160a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z&quot; stroke-width=&quot;3&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text1&quot; fill=&quot;white&quot;&gt;&lt;text id=&quot;kity_text_22&quot; text-rendering=&quot;inherit&quot; font-size=&quot;16&quot; dy=&quot;.8em&quot; y=&quot;1031.5&quot; x=&quot;44.5&quot;&gt;1、flink 编程模型&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;kity_g_12&quot;&gt;&lt;path id=&quot;kity_path_13&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M44.5,1039.5h0v0h0z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;kity_g_14&quot;&gt;&lt;path id=&quot;kity_path_15&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M44.5,1039.5h0v0h0z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_16&quot; fill=&quot;none&quot; stroke=&quot;none&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;minder_node2&quot;&gt;&lt;g id=&quot;node_expander5&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_370&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M292.5,109.5A6,6,0,1,1,280.5,109.5A6,6,0,1,1,292.5,109.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_371&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M282,109.5L291,109.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline6&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M296.5,96.5h93a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-93a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text6&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_167&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;102.5&quot; x=&quot;313.5&quot;&gt;program&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node3&quot;&gt;&lt;g id=&quot;node_expander1&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_358&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M432.5,31.5A6,6,0,1,1,420.5,31.5A6,6,0,1,1,432.5,31.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_359&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline2&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M437.5,20.5h133a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-133a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text2&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_159&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;25.5&quot; x=&quot;442.5&quot;&gt;source（一个或多个）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node4&quot;&gt;&lt;g id=&quot;node_expander2&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_361&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M432.5,83.5A6,6,0,1,1,420.5,83.5A6,6,0,1,1,432.5,83.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_362&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline3&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M437.5,72.5h158a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-158a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text3&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_161&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;77.5&quot; x=&quot;442.5&quot;&gt;stream（数据、中间结果）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node5&quot;&gt;&lt;g id=&quot;node_expander3&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_364&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M432.5,135.5A6,6,0,1,1,420.5,135.5A6,6,0,1,1,432.5,135.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_365&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline4&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M437.5,124.5h99a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-99a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text4&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_163&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;129.5&quot; x=&quot;442.5&quot;&gt;transformations&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node6&quot;&gt;&lt;g id=&quot;node_expander4&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_367&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M432.5,187.5A6,6,0,1,1,420.5,187.5A6,6,0,1,1,432.5,187.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_368&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline5&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M437.5,176.5h114a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-114a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text5&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_165&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;181.5&quot; x=&quot;442.5&quot;&gt;sink（一个或多个）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node7&quot;&gt;&lt;g id=&quot;node_expander10&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_385&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M295.5,331A6,6,0,1,1,283.5,331A6,6,0,1,1,295.5,331&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_386&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M285,331L294,331&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline11&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M299.5,316.5h122a3,3,0,0,1,3,3v23a3,3,0,0,1,-3,3h-122a3,3,0,0,1,-3,-3v-23a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text11&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_177&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;323.5&quot; x=&quot;316.5&quot;&gt;dataflows&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;kity_g_286&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_287&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M391,322h12a2,2,0,0,1,2,2v13a2,2,0,0,1,-2,2h-12a2,2,0,0,1,-2,-2v-13a2,2,0,0,1,2,-2z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_288&quot; fill=&quot;black&quot; stroke=&quot;none&quot; d=&quot;M400,333H394V332h6L400,333L400,333zM400,331H394V330h6V331zM400,329H394V328h6V329zM399.5,335H393V326h8v7.5M400,336l2,-2V325H392v11&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node8&quot;&gt;&lt;g id=&quot;node_expander6&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_373&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M464.5,253.5A6,6,0,1,1,452.5,253.5A6,6,0,1,1,464.5,253.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_374&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline7&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M469.5,242.5h187a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-187a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text7&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_169&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;247.5&quot; x=&quot;474.5&quot;&gt;source operator（一个或多个）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node9&quot;&gt;&lt;g id=&quot;node_expander7&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_376&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M464.5,305.5A6,6,0,1,1,452.5,305.5A6,6,0,1,1,464.5,305.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_377&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline8&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M469.5,294.5h54a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-54a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text8&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_171&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;299.5&quot; x=&quot;474.5&quot;&gt;streams&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node10&quot;&gt;&lt;g id=&quot;node_expander8&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_379&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M464.5,357.5A6,6,0,1,1,452.5,357.5A6,6,0,1,1,464.5,357.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_380&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline9&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M469.5,346.5h148a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-148a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text9&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_173&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;351.5&quot; x=&quot;474.5&quot;&gt;transformation operator&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node11&quot;&gt;&lt;g id=&quot;node_expander9&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_382&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M464.5,409.5A6,6,0,1,1,452.5,409.5A6,6,0,1,1,464.5,409.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_383&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline10&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M469.5,398.5h169a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-169a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text10&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_175&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;403.5&quot; x=&quot;474.5&quot;&gt;sink operator（一个或多个）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node12&quot;&gt;&lt;g id=&quot;node_expander22&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_421&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M291.5,604A6,6,0,1,1,279.5,604A6,6,0,1,1,291.5,604&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_422&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M281,604L290,604&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline23&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(57, 80, 96)&quot; d=&quot;M295.5,524.5h246a3,3,0,0,1,3,3v153a3,3,0,0,1,-3,3h-246a3,3,0,0,1,-3,-3v-153a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;3&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text23&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_201&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;661.5&quot; x=&quot;312.5&quot;&gt;parallel dataflows并行数据流&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;kity_g_289&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_290&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M511,660h12a2,2,0,0,1,2,2v13a2,2,0,0,1,-2,2h-12a2,2,0,0,1,-2,-2v-13a2,2,0,0,1,2,-2z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_291&quot; fill=&quot;black&quot; stroke=&quot;none&quot; d=&quot;M520,671H514V670h6L520,671L520,671zM520,669H514V668h6V669zM520,667H514V666h6V667zM519.5,673H513V664h8v7.5M520,674l2,-2V663H512v11&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;image id=&quot;kity_image_292&quot; xlink:href=&quot;https://github.com/leafming/bak/blob/master/images/flink/2019-02-15-编程模型并行数据流.png?raw=true&quot; x=&quot;318.5&quot; y=&quot;530.5&quot; width=&quot;200&quot; height=&quot;125&quot;&gt;&lt;/image&gt;&lt;/g&gt;&lt;g id=&quot;minder_node13&quot;&gt;&lt;g id=&quot;node_expander11&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_388&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M584.5,480.5A6,6,0,1,1,572.5,480.5A6,6,0,1,1,584.5,480.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_389&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline12&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M589.5,469.5h216a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-216a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text12&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_179&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;474.5&quot; x=&quot;594.5&quot;&gt;stream-被分割成多个stream partition&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node14&quot;&gt;&lt;g id=&quot;node_expander12&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_391&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M584.5,532.5A6,6,0,1,1,572.5,532.5A6,6,0,1,1,584.5,532.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_392&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline13&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M589.5,521.5h477a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-477a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text13&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_181&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;526.5&quot; x=&quot;594.5&quot;&gt;operator-被分割成多个operator subtask（独立的、可在不同线程\主机\容器内运行）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node15&quot;&gt;&lt;g id=&quot;node_expander15&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_400&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M584.5,610.5A6,6,0,1,1,572.5,610.5A6,6,0,1,1,584.5,610.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_401&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M574,610.5L583,610.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline16&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M589.5,599.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text16&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_187&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;604.5&quot; x=&quot;594.5&quot;&gt;关系描述&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node16&quot;&gt;&lt;g id=&quot;node_expander13&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_394&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M692.5,584.5A6,6,0,1,1,680.5,584.5A6,6,0,1,1,692.5,584.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_395&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline14&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M697.5,573.5h311a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-311a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text14&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_183&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;578.5&quot; x=&quot;702.5&quot;&gt;operator subtask数量=operator并行度（parallelism）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node17&quot;&gt;&lt;g id=&quot;node_expander14&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_397&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M692.5,636.5A6,6,0,1,1,680.5,636.5A6,6,0,1,1,692.5,636.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_398&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline15&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M697.5,625.5h240a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-240a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text15&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_185&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;630.5&quot; x=&quot;702.5&quot;&gt;stream并行度=生成它的operator的并行度&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node18&quot;&gt;&lt;g id=&quot;node_expander21&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_418&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M584.5,727.5A6,6,0,1,1,572.5,727.5A6,6,0,1,1,584.5,727.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_419&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M574,727.5L583,727.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline22&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M589.5,716.5h173a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-173a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text22&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_199&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;721.5&quot; x=&quot;594.5&quot;&gt;stream在operator之间的传输&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node19&quot;&gt;&lt;g id=&quot;node_expander17&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_406&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M807.5,688.5A6,6,0,1,1,795.5,688.5A6,6,0,1,1,807.5,688.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_407&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M797,688.5L806,688.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline18&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M812.5,677.5h195a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-195a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text18&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_191&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;682.5&quot; x=&quot;817.5&quot;&gt;one-to-one streams(forwarding)&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node20&quot;&gt;&lt;g id=&quot;node_expander16&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_403&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1052.5,688.5A6,6,0,1,1,1040.5,688.5A6,6,0,1,1,1052.5,688.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_404&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline17&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1057.5,677.5h202a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-202a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text17&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_189&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;682.5&quot; x=&quot;1062.5&quot;&gt;保持分区特性以及分区元素的有序性&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node21&quot;&gt;&lt;g id=&quot;node_expander20&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_415&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M807.5,766.5A6,6,0,1,1,795.5,766.5A6,6,0,1,1,807.5,766.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_416&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M797,766.5L806,766.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline21&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M812.5,755.5h206a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-206a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text21&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_197&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;760.5&quot; x=&quot;817.5&quot;&gt;Redistributing&amp;#xa0;streams(distribution)&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node22&quot;&gt;&lt;g id=&quot;node_expander18&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_409&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1063.5,740.5A6,6,0,1,1,1051.5,740.5A6,6,0,1,1,1063.5,740.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_410&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline19&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1068.5,729.5h800a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-800a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text19&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_193&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;734.5&quot; x=&quot;1073.5&quot;&gt;分区会改变-改变了此算子输入流的分区；每个上游的subtask向下游多个不同的subtasks发送数据（例如keyBy()&amp;#xa0;, broadcast(), or rebalance() ）。&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node23&quot;&gt;&lt;g id=&quot;node_expander19&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_412&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1063.5,792.5A6,6,0,1,1,1051.5,792.5A6,6,0,1,1,1063.5,792.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_413&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline20&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1068.5,781.5h293a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-293a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text20&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_195&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;786.5&quot; x=&quot;1073.5&quot;&gt;数据元之间的排序仅保存在每对发送和接收subtask中&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node24&quot;&gt;&lt;g id=&quot;node_expander26&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_433&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M309.5,860.5A6,6,0,1,1,297.5,860.5A6,6,0,1,1,309.5,860.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_434&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M299,860.5L308,860.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline27&quot; fill=&quot;#ffffff&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M313.5,847.5h346a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-346a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text27&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_209&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;853.5&quot; x=&quot;330.5&quot;&gt;program-dataflows-parallel dataflows关系描述&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node25&quot;&gt;&lt;g id=&quot;node_expander24&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_427&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M702.5,834.5A6,6,0,1,1,690.5,834.5A6,6,0,1,1,702.5,834.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_428&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M692,834.5L701,834.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline25&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M707.5,823.5h253a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-253a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text25&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_205&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;828.5&quot; x=&quot;712.5&quot;&gt;运行的program映射成Streaming Dataflows&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node26&quot;&gt;&lt;g id=&quot;node_expander23&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_424&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1005.5,834.5A6,6,0,1,1,993.5,834.5A6,6,0,1,1,1005.5,834.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_425&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline24&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1010.5,823.5h555a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-555a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text24&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_203&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;828.5&quot; x=&quot;1015.5&quot;&gt;program里的transformation和dataflows里的transofrmation operator映射关系一般1:1，也可能1:n&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node27&quot;&gt;&lt;g id=&quot;node_expander25&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_430&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M702.5,886.5A6,6,0,1,1,690.5,886.5A6,6,0,1,1,702.5,886.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_431&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline26&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M707.5,875.5h459a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-459a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text26&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_207&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;880.5&quot; x=&quot;712.5&quot;&gt;Flink中的程序本质上是并行和分布式的，执行期间dataflows应为parallel dataflows&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node28&quot;&gt;&lt;g id=&quot;node_expander34&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_457&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M309.5,1039.5A6,6,0,1,1,297.5,1039.5A6,6,0,1,1,309.5,1039.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_458&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M299,1039.5L308,1039.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline35&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M313.5,1026.5h115a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-115a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text35&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_225&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;1032.5&quot; x=&quot;330.5&quot;&gt;window窗口&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node29&quot;&gt;&lt;g id=&quot;node_expander29&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_442&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M471.5,974.5A6,6,0,1,1,459.5,974.5A6,6,0,1,1,471.5,974.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_443&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M461,974.5L470,974.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline30&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M476.5,963.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text30&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_215&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;968.5&quot; x=&quot;481.5&quot;&gt;驱动类型&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node30&quot;&gt;&lt;g id=&quot;node_expander27&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_436&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M579.5,948.5A6,6,0,1,1,567.5,948.5A6,6,0,1,1,579.5,948.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_437&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline28&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M584.5,937.5h100a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-100a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text28&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_211&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;942.5&quot; x=&quot;589.5&quot;&gt;时间驱动（30s）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node31&quot;&gt;&lt;g id=&quot;node_expander28&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_439&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M579.5,1000.5A6,6,0,1,1,567.5,1000.5A6,6,0,1,1,579.5,1000.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_440&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline29&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M584.5,989.5h150a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-150a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text29&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_213&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;994.5&quot; x=&quot;589.5&quot;&gt;数据驱动（100个数据元）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node32&quot;&gt;&lt;g id=&quot;node_expander33&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_454&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M471.5,1104.5A6,6,0,1,1,459.5,1104.5A6,6,0,1,1,471.5,1104.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_455&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M461,1104.5L470,1104.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline34&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M476.5,1093.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text34&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_223&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1098.5&quot; x=&quot;481.5&quot;&gt;窗口类型&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node33&quot;&gt;&lt;g id=&quot;node_expander30&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_445&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M579.5,1052.5A6,6,0,1,1,567.5,1052.5A6,6,0,1,1,579.5,1052.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_446&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline31&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M584.5,1041.5h121a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-121a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text31&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_217&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1046.5&quot; x=&quot;589.5&quot;&gt;tumbling（无重叠）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node34&quot;&gt;&lt;g id=&quot;node_expander31&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_448&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M579.5,1104.5A6,6,0,1,1,567.5,1104.5A6,6,0,1,1,579.5,1104.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_449&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline32&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M584.5,1093.5h159a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-159a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text32&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_219&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1098.5&quot; x=&quot;589.5&quot;&gt;sliding windows（有重叠）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node35&quot;&gt;&lt;g id=&quot;node_expander32&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_451&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M579.5,1156.5A6,6,0,1,1,567.5,1156.5A6,6,0,1,1,579.5,1156.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_452&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline33&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M584.5,1145.5h184a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-184a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text33&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_221&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1150.5&quot; x=&quot;589.5&quot;&gt;session windows(有空隙的活动)&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node36&quot;&gt;&lt;g id=&quot;node_expander38&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_469&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M309.5,1270.5A6,6,0,1,1,297.5,1270.5A6,6,0,1,1,309.5,1270.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_470&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M299,1270.5L308,1270.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline39&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M313.5,1257.5h92a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-92a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text39&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_233&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;1263.5&quot; x=&quot;330.5&quot;&gt;time时间&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node37&quot;&gt;&lt;g id=&quot;node_expander35&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_460&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M448.5,1218.5A6,6,0,1,1,436.5,1218.5A6,6,0,1,1,448.5,1218.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_461&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline36&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M453.5,1207.5h124a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-124a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text36&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_227&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1212.5&quot; x=&quot;458.5&quot;&gt;event time-创建时间&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node38&quot;&gt;&lt;g id=&quot;node_expander36&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_463&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M448.5,1270.5A6,6,0,1,1,436.5,1270.5A6,6,0,1,1,448.5,1270.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_464&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline37&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M453.5,1259.5h504a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-504a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text37&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_229&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1264.5&quot; x=&quot;458.5&quot;&gt;Ingestion time-进入时间-event(事件、数据)从source operator进入到flink dataflow的时间&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node39&quot;&gt;&lt;g id=&quot;node_expander37&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_466&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M448.5,1322.5A6,6,0,1,1,436.5,1322.5A6,6,0,1,1,448.5,1322.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_467&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline38&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M453.5,1311.5h436a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-436a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text38&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_231&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1316.5&quot; x=&quot;458.5&quot;&gt;processing time-处理时间-对event处理的本地系统时间（在taskmanager上）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node40&quot;&gt;&lt;g id=&quot;node_expander48&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_499&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M309.5,1446.5A6,6,0,1,1,297.5,1446.5A6,6,0,1,1,309.5,1446.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_500&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M299,1446.5L308,1446.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline49&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M313.5,1433.5h304a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-304a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text49&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_253&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;1439.5&quot; x=&quot;330.5&quot;&gt;Stateful Operations（有状态的数据处理）&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node41&quot;&gt;&lt;g id=&quot;node_expander39&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_472&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M660.5,1384.5A6,6,0,1,1,648.5,1384.5A6,6,0,1,1,660.5,1384.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_473&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline40&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M665.5,1373.5h259a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-259a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text40&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_235&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1378.5&quot; x=&quot;670.5&quot;&gt;是关系多个事件的信息并进行处理的operation&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node42&quot;&gt;&lt;g id=&quot;node_expander47&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_496&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M660.5,1508.5A6,6,0,1,1,648.5,1508.5A6,6,0,1,1,660.5,1508.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_497&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M650,1508.5L659,1508.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline48&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M665.5,1497.5h39a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-39a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text48&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_251&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1502.5&quot; x=&quot;670.5&quot;&gt;state&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node43&quot;&gt;&lt;g id=&quot;node_expander40&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_475&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M749.5,1437.5A6,6,0,1,1,737.5,1437.5A6,6,0,1,1,749.5,1437.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_476&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline41&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M754.5,1426.5h188a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-188a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text41&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_237&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1431.5&quot; x=&quot;759.5&quot;&gt;使用内嵌的key/value存储器维护&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node44&quot;&gt;&lt;g id=&quot;node_expander41&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_478&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M749.5,1489.5A6,6,0,1,1,737.5,1489.5A6,6,0,1,1,749.5,1489.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_479&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline42&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M754.5,1478.5h226a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-226a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text42&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_239&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1483.5&quot; x=&quot;759.5&quot;&gt;与stream一起partitioned和distributed&amp;#xa0;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node45&quot;&gt;&lt;g id=&quot;node_expander46&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_493&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M749.5,1580.5A6,6,0,1,1,737.5,1580.5A6,6,0,1,1,749.5,1580.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_494&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M739,1580.5L748,1580.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline47&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M754.5,1569.5h162a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-162a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text47&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_249&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1574.5&quot; x=&quot;759.5&quot;&gt;&amp;#xa0;使用stateful operators访问&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node46&quot;&gt;&lt;g id=&quot;node_expander42&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_481&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M961.5,1541.5A6,6,0,1,1,949.5,1541.5A6,6,0,1,1,961.5,1541.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_482&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline43&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M966.5,1530.5h709a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-709a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text43&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_241&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1535.5&quot; x=&quot;971.5&quot;&gt;这些key/value的状态信息仅在keyed streams（通过keyBy() 函数处理过）中才能访问到，并且只能根据当前事件的key来访问其值&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node47&quot;&gt;&lt;g id=&quot;node_expander45&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_490&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M961.5,1619.5A6,6,0,1,1,949.5,1619.5A6,6,0,1,1,961.5,1619.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_491&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M951,1619.5L960,1619.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline46&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M966.5,1608.5h114a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-114a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text46&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_247&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1613.5&quot; x=&quot;971.5&quot;&gt;数据流按照key排列&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node48&quot;&gt;&lt;g id=&quot;node_expander43&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_484&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1125.5,1593.5A6,6,0,1,1,1113.5,1593.5A6,6,0,1,1,1125.5,1593.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_485&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline44&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1130.5,1582.5h346a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-346a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text44&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_243&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1587.5&quot; x=&quot;1135.5&quot;&gt;能保证所有的状态更新都是本地操作，保证一致性且无事务问题&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node49&quot;&gt;&lt;g id=&quot;node_expander44&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_487&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M1125.5,1645.5A6,6,0,1,1,1113.5,1645.5A6,6,0,1,1,1125.5,1645.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_488&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline45&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M1130.5,1634.5h382a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-382a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text45&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_245&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1639.5&quot; x=&quot;1135.5&quot;&gt;同时这种排列方式使Flink能够透明的再分发状态信息和调整数据流分区&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node50&quot;&gt;&lt;g id=&quot;node_expander55&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_520&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M309.5,1771.5A6,6,0,1,1,297.5,1771.5A6,6,0,1,1,309.5,1771.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_521&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M299,1771.5L308,1771.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline56&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M313.5,1758.5h76a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-76a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text56&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_267&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;1764.5&quot; x=&quot;330.5&quot;&gt;容错性&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node51&quot;&gt;&lt;g id=&quot;node_expander49&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_502&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M432.5,1706.5A6,6,0,1,1,420.5,1706.5A6,6,0,1,1,432.5,1706.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_503&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline50&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M437.5,1695.5h134a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-134a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text50&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_255&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1700.5&quot; x=&quot;442.5&quot;&gt; stream replay(流重放)&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node52&quot;&gt;&lt;g id=&quot;node_expander51&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_508&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M432.5,1758.5A6,6,0,1,1,420.5,1758.5A6,6,0,1,1,432.5,1758.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_509&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M422,1758.5L431,1758.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline52&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M437.5,1747.5h145a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-145a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text52&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_259&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1752.5&quot; x=&quot;442.5&quot;&gt; checkpoint(设置检查点)&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node53&quot;&gt;&lt;g id=&quot;node_expander50&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_505&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M627.5,1758.5A6,6,0,1,1,615.5,1758.5A6,6,0,1,1,627.5,1758.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_506&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline51&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M632.5,1747.5h389a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-389a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text51&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_257&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1752.5&quot; x=&quot;637.5&quot;&gt;一个checkpoint关联了输入流中的某个特定记录和每个算子的对应状态&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node54&quot;&gt;&lt;g id=&quot;node_expander54&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_517&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M432.5,1836.5A6,6,0,1,1,420.5,1836.5A6,6,0,1,1,432.5,1836.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_518&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M422,1836.5L431,1836.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline55&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M437.5,1825.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text55&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_265&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1830.5&quot; x=&quot;442.5&quot;&gt;实现&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node55&quot;&gt;&lt;g id=&quot;node_expander52&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_511&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M516.5,1810.5A6,6,0,1,1,504.5,1810.5A6,6,0,1,1,516.5,1810.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_512&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline53&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M521.5,1799.5h750a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-750a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text53&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_261&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1804.5&quot; x=&quot;526.5&quot;&gt;数据流可以从checkpoint中进行恢复，通过恢复Operators的状态以及从该checkpoint重放事件，其保证一致性exactly-once 的处理语义&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node56&quot;&gt;&lt;g id=&quot;node_expander53&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_514&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M516.5,1862.5A6,6,0,1,1,504.5,1862.5A6,6,0,1,1,516.5,1862.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_515&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline54&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M521.5,1851.5h463a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-463a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text54&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_263&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1856.5&quot; x=&quot;526.5&quot;&gt;Checkpoint的间隔关系到执行时的容错性和恢复时间，也决定了需要被重放的事件数&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node57&quot;&gt;&lt;g id=&quot;node_expander64&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_547&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M309.5,1976.5A6,6,0,1,1,297.5,1976.5A6,6,0,1,1,309.5,1976.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_548&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M299,1976.5L308,1976.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline65&quot; fill=&quot;rgb(238, 243, 246)&quot; stroke=&quot;rgb(115, 161, 191)&quot; d=&quot;M313.5,1963.5h167a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-167a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text65&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_285&quot; text-rendering=&quot;inherit&quot; font-size=&quot;14&quot; dy=&quot;.8em&quot; y=&quot;1969.5&quot; x=&quot;330.5&quot;&gt;Batch on Streaming&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node58&quot;&gt;&lt;g id=&quot;node_expander56&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_523&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M523.5,1924.5A6,6,0,1,1,511.5,1924.5A6,6,0,1,1,523.5,1924.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_524&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline57&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M528.5,1913.5h645a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-645a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text57&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_269&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1918.5&quot; x=&quot;533.5&quot;&gt;Flink把批处理作为特殊的流处理程序来执行，将其看作有界的流（有限数量的元素）；DataSet在内部被当作一个流数据&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node59&quot;&gt;&lt;g id=&quot;node_expander63&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_544&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M523.5,2028.5A6,6,0,1,1,511.5,2028.5A6,6,0,1,1,523.5,2028.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_545&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M513,2028.5L522,2028.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline64&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M528.5,2017.5h130a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-130a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text64&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_283&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2022.5&quot; x=&quot;533.5&quot;&gt;概念几乎通用但有例外&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node60&quot;&gt;&lt;g id=&quot;node_expander58&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_529&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M703.5,1976.5A6,6,0,1,1,691.5,1976.5A6,6,0,1,1,703.5,1976.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_530&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M693,1976.5L702,1976.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline59&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M708.5,1965.5h82a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-82a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text59&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_273&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1970.5&quot; x=&quot;713.5&quot;&gt;容错机制不同&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node61&quot;&gt;&lt;g id=&quot;node_expander57&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_526&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M835.5,1976.5A6,6,0,1,1,823.5,1976.5A6,6,0,1,1,835.5,1976.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_527&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline58&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M840.5,1965.5h463a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-463a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text58&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_271&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;1970.5&quot; x=&quot;845.5&quot;&gt;因为inputs是有界的，所以不使用checkpoints，恢复机制是通过完整的流重放来实现&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node62&quot;&gt;&lt;g id=&quot;node_expander60&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_535&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M703.5,2028.5A6,6,0,1,1,691.5,2028.5A6,6,0,1,1,703.5,2028.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_536&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M693,2028.5L702,2028.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline61&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M708.5,2017.5h195a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-195a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text61&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_277&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2022.5&quot; x=&quot;713.5&quot;&gt;有状态的Operations数据结构不同&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node63&quot;&gt;&lt;g id=&quot;node_expander59&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_532&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M948.5,2028.5A6,6,0,1,1,936.5,2028.5A6,6,0,1,1,948.5,2028.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_533&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline60&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M953.5,2017.5h672a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-672a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text60&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_275&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2022.5&quot; x=&quot;958.5&quot;&gt;DataSet API的有状态操作API使用简单的内存和堆外内存（in-memory/out-of-core）的数据结构，而不是key/value的索引&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node64&quot;&gt;&lt;g id=&quot;node_expander62&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_541&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M703.5,2080.5A6,6,0,1,1,691.5,2080.5A6,6,0,1,1,703.5,2080.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_542&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; d=&quot;M693,2080.5L702,2080.5&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline63&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M708.5,2069.5h130a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-130a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text63&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_281&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2074.5&quot; x=&quot;713.5&quot;&gt;独特的同步的迭代操作&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;minder_node65&quot;&gt;&lt;g id=&quot;node_expander61&quot; display=&quot;none&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;path id=&quot;kity_path_538&quot; fill=&quot;white&quot; stroke=&quot;gray&quot; d=&quot;M883.5,2080.5A6,6,0,1,1,871.5,2080.5A6,6,0,1,1,883.5,2080.5&quot;&gt;&lt;/path&gt;&lt;path id=&quot;kity_path_539&quot; fill=&quot;none&quot; stroke=&quot;gray&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path id=&quot;node_outline62&quot; fill=&quot;none&quot; stroke=&quot;none&quot; d=&quot;M888.5,2069.5h409a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-409a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z&quot;&gt;&lt;/path&gt;&lt;g id=&quot;node_text62&quot; fill=&quot;black&quot;&gt;&lt;text id=&quot;kity_text_279&quot; text-rendering=&quot;inherit&quot; font-size=&quot;12&quot; dy=&quot;.8em&quot; y=&quot;2074.5&quot; x=&quot;893.5&quot;&gt;&amp;#xa0;special synchronized (superstep-based) iterations,仅应用于有界数据流&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;至此，本篇内容完成。&lt;/p&gt;</content><author><name>叶子  ( ˘ ³˘)♥</name></author><category term="Flink" /><summary type="html">最近在重新整理学习flink官网内容，并在学习过程中将内容总结成脑图，是叶子自己最近一点一点整理绘制哒，转载请贴此文链接谢谢啦～图片以svg形式插入文章，可拖动显示完整，后续如有更改会持续更新。</summary></entry><entry><title type="html">实时流处理系统反压机制（BackPressure）综述[转]</title><link href="http://localhost:4000/bigdata/2018/11/15/%E5%AE%9E%E6%97%B6%E6%B5%81%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8D%E5%8E%8B%E6%9C%BA%E5%88%B6-BackPressure-%E7%BB%BC%E8%BF%B0-%E8%BD%AC/" rel="alternate" type="text/html" title="实时流处理系统反压机制（BackPressure）综述[转]" /><published>2018-11-15T00:00:00+08:00</published><updated>2018-11-15T00:00:00+08:00</updated><id>http://localhost:4000/bigdata/2018/11/15/%E5%AE%9E%E6%97%B6%E6%B5%81%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8D%E5%8E%8B%E6%9C%BA%E5%88%B6(BackPressure)%E7%BB%BC%E8%BF%B0%5B%E8%BD%AC%5D</id><content type="html" xml:base="http://localhost:4000/bigdata/2018/11/15/%E5%AE%9E%E6%97%B6%E6%B5%81%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8D%E5%8E%8B%E6%9C%BA%E5%88%B6-BackPressure-%E7%BB%BC%E8%BF%B0-%E8%BD%AC/">&lt;blockquote&gt;
  &lt;p&gt;本文主要关于实时流处理系统反压机制，最近看到反压问题看到此文章很好，在此分享并mark一下。&lt;br /&gt;
 (￢_￢)ﾉ最近菜叶子没自己写见谅。&lt;br /&gt;
本文转自 &lt;a href=&quot;https://blog.csdn.net/qq_21125183/article/details/80708142&quot;&gt;实时流处理系统反压机制（BackPressure）综述&lt;/a&gt;&lt;br /&gt;
https://blog.csdn.net/qq_21125183/article/details/80708142&lt;br /&gt;
&lt;a href=&quot;https://www.jianshu.com/p/28fcd51d4edd&quot;&gt;开启Back Pressure使生产环境的Spark Streaming应用更稳定、有效&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;反压机制（BackPressure）被广泛应用到实时流处理系统中，流处理系统需要能优雅地处理反压（backpressure）问题。反压通常产生于这样的场景：短时负载高峰导致系统接收数据的速率远高于它处理数据的速率。许多日常问题都会导致反压，例如，垃圾回收停顿可能会导致流入的数据快速堆积，或者遇到大促或秒杀活动导致流量陡增。反压如果不能得到正确的处理，可能会导致资源耗尽甚至系统崩溃。反压机制就是指系统能够自己检测到被阻塞的Operator，然后系统自适应地降低源头或者上游的发送速率。目前主流的流处理系统 Apache Storm、JStorm、Spark Streaming、S4、Apache Flink、Twitter Heron都采用反压机制解决这个问题，不过他们的实现各自不同。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/bigdata-total/2018-11-15-实时流处理系统反压机制01.png?raw=true&quot; alt=&quot;实时流处理系统反压机制01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不同的组件可以不同的速度执行（并且每个组件中的处理速度随时间改变）。 例如，考虑一个工作流程，或由于数据倾斜或任务调度而导致数据被处理十分缓慢。 在这种情况下，如果上游阶段不减速，将导致缓冲区建立长队列，或导致系统丢弃元组。 如果元组在中途丢弃，那么效率可能会有损失，因为已经为这些元组产生的计算被浪费了。并且在一些流处理系统中比如Strom，会将这些丢失的元组重新发送，这样会导致数据的一致性问题，并且还会导致某些Operator状态叠加。进而整个程序输出结果不准确。第二由于系统接收数据的速率是随着时间改变的，短时负载高峰导致系统接收数据的速率远高于它处理数据的速率的情况，也会导致Tuple在中途丢失。所以实时流处理系统必须能够解决发送速率远大于系统能处理速率这个问题，大多数实时流处理系统采用反压（BackPressure）机制解决这个问题。下面我们就来介绍一下不同的实时流处理系统采用的反压机制：&lt;/p&gt;

&lt;h1 id=&quot;strom-反压机制&quot;&gt;Strom 反压机制&lt;/h1&gt;

&lt;h2 id=&quot;storm-10-以前的反压机制&quot;&gt;Storm 1.0 以前的反压机制&lt;/h2&gt;

&lt;p&gt;对于开启了acker机制的storm程序，可以通过设置conf.setMaxSpoutPending参数来实现反压效果，&lt;strong&gt;如果下游组件(bolt)处理速度跟不上导致spout发送的tuple没有及时确认的数超过了参数设定的值，spout会停止发送数据&lt;/strong&gt;，这种方式的缺点是很难调优conf.setMaxSpoutPending参数的设置以达到最好的反压效果，设小了会导致吞吐上不去，设大了会导致worker OOM；有震荡，数据流会处于一个颠簸状态，效果不如逐级反压；另外对于关闭acker机制的程序无效；&lt;/p&gt;

&lt;h2 id=&quot;storm-automatic-backpressure&quot;&gt;Storm Automatic Backpressure&lt;/h2&gt;

&lt;p&gt;新的storm自动反压机制(Automatic Back Pressure)通过监控bolt中的接收队列的情况，当超过高水位值时专门的线程会将反压信息写到 Zookeeper ，Zookeeper上的watch会通知该拓扑的所有Worker都进入反压状态，最后Spout降低tuple发送的速度。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/bigdata-total/2018-11-15-实时流处理系统反压机制02.png?raw=true&quot; alt=&quot;实时流处理系统反压机制02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每个Executor都有一个接受队列和发送队列用来接收Tuple和发送Spout或者Bolt生成的Tuple元组。每个Worker进程都有一个单的的接收线程监听接收端口。它从每个网络上进来的消息发送到Executor的接收队列中。Executor接收队列存放Worker或者Worker内部其他Executor发过来的消息。Executor工作线程从接收队列中拿出数据，然后调用execute方法，发送Tuple到Executor的发送队列。Executor的发送线程从发送队列中获取消息，按照消息目的地址选择发送到Worker的传输队列中或者其他Executor的接收队列中。最后Worker的发送线程从传输队列中读取消息，然后将Tuple元组发送到网络中。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当Worker进程中的Executor线程发现自己的接收队列满了时，也就是接收队列达到high watermark的阈值后，因此它会发送通知消息到背压线程。&lt;/li&gt;
  &lt;li&gt;背压线程将当前worker进程的信息注册到Zookeeper的Znode节点中。具体路径就是 /Backpressure/topo1/wk1下&lt;/li&gt;
  &lt;li&gt;Zookeepre的Znode Watcher监视/Backpreesure/topo1下的节点目录变化情况，如果发现目录增加了znode节点说明或者其他变化。这就说明该Topo1需要反压控制，然后它会通知Topo1所有的Worker进入反压状态。&lt;/li&gt;
  &lt;li&gt;最终Spout降低tuple发送的速度。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;jstorm-反压机制&quot;&gt;JStorm 反压机制&lt;/h1&gt;

&lt;p&gt;Jstorm做了两级的反压，第一级和Jstorm类似，通过执行队列来监测，但是不会通过ZK来协调，而是通过Topology Master来协调。在队列中会标记high water mark和low water mark，当执行队列超过high water mark时，就认为bolt来不及处理，则向TM发一条控制消息，上游开始减慢发送速率，直到下游低于low water mark时解除反压。&lt;/p&gt;

&lt;p&gt;此外，在Netty层也做了一级反压，由于每个Worker Task都有自己的发送和接收的缓冲区，可以对缓冲区设定限额、控制大小，如果spout数据量特别大，缓冲区填满会导致下游bolt的接收缓冲区填满，造成了反压。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/bigdata-total/2018-11-15-实时流处理系统反压机制03.png?raw=true&quot; alt=&quot;实时流处理系统反压机制03&quot; /&gt;&lt;/p&gt;

&lt;p&gt;限流机制：jstorm的限流机制， 当下游bolt发生阻塞时， 并且阻塞task的比例超过某个比例时（现在默认设置为0.1），触发反压&lt;/p&gt;

&lt;p&gt;限流方式：计算阻塞Task的地方执行线程执行时间，Spout每发送一个tuple等待相应时间，然后讲这个时间发送给Spout，  于是， spout每发送一个tuple，就会等待这个执行时间。&lt;/p&gt;

&lt;p&gt;Task阻塞判断方式：在jstorm 连续4次采样周期中采样，队列情况，当队列超过80%（可以设置）时，即可认为该task处在阻塞状态。&lt;/p&gt;

&lt;h1 id=&quot;sparkstreaming-反压机制&quot;&gt;SparkStreaming 反压机制&lt;/h1&gt;

&lt;h2 id=&quot;为什么引入反压机制backpressure&quot;&gt;为什么引入反压机制Backpressure&lt;/h2&gt;

&lt;p&gt;默认情况下，Spark Streaming通过Receiver以生产者生产数据的速率接收数据，计算过程中会出现batch processing time &amp;gt; batch interval的情况，其中batch processing time 为实际计算一个批次花费时间， batch interval为Streaming应用设置的批处理间隔。这意味着Spark Streaming的数据接收速率高于Spark从队列中移除数据的速率，也就是数据处理能力低，在设置间隔内不能完全处理当前接收速率接收的数据。如果这种情况持续过长的时间，会造成数据在内存中堆积，导致Receiver所在Executor内存溢出等问题（如果设置StorageLevel包含disk, 则内存存放不下的数据会溢写至disk, 加大延迟）。&lt;br /&gt;
Spark 1.5以前版本，用户如果要限制Receiver的数据接收速率，可以通过设置静态配制参数“spark.streaming.receiver.maxRate”的值来实现，此举虽然可以通过限制接收速率，来适配当前的处理能力，防止内存溢出，但也会引入其它问题。比如：producer数据生产高于maxRate，当前集群处理能力也高于maxRate，这就会造成资源利用率下降等问题。为了更好的协调数据接收速率与资源处理能力，Spark Streaming 从v1.5开始引入反压机制（back-pressure）,通过动态控制数据接收速率来适配集群数据处理能力。&lt;/p&gt;

&lt;h2 id=&quot;反压机制backpressure&quot;&gt;反压机制Backpressure&lt;/h2&gt;

&lt;p&gt;Spark Streaming Backpressure:  根据JobScheduler反馈作业的执行信息来动态调整Receiver数据接收率。通过属性“spark.streaming.backpressure.enabled”来控制是否启用backpressure机制，默认值false，即不启用。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sparkConf.set(&quot;spark.streaming.backpressure.enabled&quot;,”true”)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SparkStreaming 架构图如下所示:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/bigdata-total/2018-11-15-实时流处理系统反压机制04.png?raw=true&quot; alt=&quot;实时流处理系统反压机制04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SparkStreaming 反压过程执行如下图所示：&lt;/p&gt;

&lt;p&gt;在原架构的基础上加上一个新的组件RateController,这个组件负责监听“OnBatchCompleted”事件，然后从中抽取processingDelay 及schedulingDelay信息.  Estimator依据这些信息估算出最大处理速度（rate），最后由基于Receiver的Input Stream将rate通过ReceiverTracker与ReceiverSupervisorImpl转发给BlockGenerator（继承自RateLimiter）.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/bigdata-total/2018-11-15-实时流处理系统反压机制05.png?raw=true&quot; alt=&quot;实时流处理系统反压机制05&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;direct模式-backpressure此部分详细说明了direct模式接收转自-开启back-pressure使生产环境的spark-streaming应用更稳定有效&quot;&gt;direct模式-BackPressure(此部分详细说明了direct模式接收：转自-&lt;a href=&quot;https://www.jianshu.com/p/28fcd51d4edd&quot;&gt;开启Back Pressure使生产环境的Spark Streaming应用更稳定、有效&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;当Spark Streaming与Kafka使用Direct API集群时，我们可以很方便的去控制最大数据摄入量–通过一个被称作spark.streaming.kafka.maxRatePerPartition的参数。根据文档描述，他的含义是：Direct API读取每一个Kafka partition数据的最大速率（每秒读取的消息量）。&lt;br /&gt;
配置项spark.streaming.kafka.maxRatePerPartition，对防止流式应用在下边两种情况下出现流量过载时尤其重要：&lt;br /&gt;
1.Kafka Topic中有大量未处理的消息，并且我们设置是Kafka auto.offset.reset参数值为smallest，他可以防止第一个批次出现数据流量过载情况。&lt;br /&gt;
2.当Kafka 生产者突然飙升流量的时候，他可以防止批次处理出现数据流量过载情况。&lt;/p&gt;

&lt;p&gt;但是，配置Kafka每个partition每批次最大的摄入量是个静态值，也算是个缺点。随着时间的变化，在生产环境运行了一段时间的Spark Streaming应用，每批次每个Kafka partition摄入数据最大量的最优值也是变化的。有时候，是因为消息的大小会变，导致数据处理时间变化。有时候，是因为流计算所使用的多租户集群会变得非常繁忙，比如在白天时候，一些其他的数据应用（例如Impala/Hive/MR作业）竞争共享的系统资源时（CPU/内存/网络/磁盘IO）。&lt;br /&gt;
背压机制可以解决该问题。背压机制是呼声比较高的功能，他允许根据前一批次数据的处理情况，动态、自动的调整后续数据的摄入量，这样的反馈回路使得我们可以应对流式应用流量波动的问题。&lt;br /&gt;
Spark Streaming的背压机制是在Spark1.5版本引进的，我们可以添加如下代码启用改功能：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sparkConf.set(&quot;spark.streaming.backpressure.enabled&quot;,”true”)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;那应用启动后的第一个批次流量怎么控制呢？因为他没有前面批次的数据处理时间，所以没有参考的数据去评估这一批次最优的摄入量。在Spark官方文档中有个被称作spark.streaming.backpressure.initialRate的配置，看起来是控制开启背压机制时初始化的摄入量。其实不然，该参数只对receiver模式起作用，并不适用于direct模式。推荐的方法是使用spark.streaming.kafka.maxRatePerPartition控制背压机制起作用前的第一批次数据的最大摄入量。我通常建议设置spark.streaming.kafka.maxRatePerPartition的值为最优估计值的1.5到2倍，让背压机制的算法去调整后续的值。请注意，spark.streaming.kafka.maxRatePerPartition的值会一直控制最大的摄入量，所以背压机制的算法值不会超过他。&lt;br /&gt;
另一个需要注意的是，在第一个批次处理完成前，紧接着的批次都将使用spark.streaming.kafka.maxRatePerPartition的值作为摄入量。通过Spark UI可以看到，批次间隔为5s，当批次调度延迟31秒时候，前7个批次的摄入量是20条记录。直到第八个批次，背压机制起作用时，摄入量变为5条记录。&lt;/p&gt;

&lt;h1 id=&quot;heron-反压机制&quot;&gt;Heron 反压机制&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/bigdata-total/2018-11-15-实时流处理系统反压机制06.png?raw=true&quot; alt=&quot;实时流处理系统反压机制06&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当下游处理速度跟不上上游发送速度时，一旦StreamManager 发现一个或多个Heron Instance 速度变慢，立刻对本地spout进行降级，降低本地Spout发送速度, 停止从这些spout读取数据。并且受影响的StreamManager  会发送一个特殊的start backpressure message 给其他的StreamManager ，要求他们对spout进行本地降级。 当其他StreamManager  接收到这个特殊消息时，他们通过不读取当地Spout中的Tuple来进行降级。一旦出问题的Heron Instance 恢复速度后，本地的SM 会发送stop backpressure message 解除降级。&lt;/p&gt;

&lt;p&gt;很多Socket Channel与应用程序级别的Buffer相关联，该缓冲区由high watermark 和low watermark组成。 当缓冲区大小达到high watermark时触发反压，并保持有效，直到缓冲区大小低于low watermark。 此设计的基本原理是防止拓扑在进入和退出背压缓解模式之间快速振荡。&lt;/p&gt;

&lt;h1 id=&quot;flink-反压机制&quot;&gt;Flink 反压机制&lt;/h1&gt;

&lt;p&gt;Flink 没有使用任何复杂的机制来解决反压问题，因为根本不需要那样的方案！它利用自身作为纯数据流引擎的优势来优雅地响应反压问题。下面我们会深入分析 Flink 是如何在 Task 之间传输数据的，以及数据流如何实现自然降速的。
 Flink 在运行时主要由 operators 和 streams 两大组件构成。每个 operator 会消费中间态的流，并在流上进行转换，然后生成新的流。对于 Flink 的网络机制一种形象的类比是，Flink 使用了高效有界的分布式阻塞队列，就像 Java 通用的阻塞队列（BlockingQueue）一样。还记得经典的线程间通信案例：生产者消费者模型吗？使用 BlockingQueue 的话，一个较慢的接受者会降低发送者的发送速率，因为一旦队列满了（有界队列）发送者会被阻塞。Flink 解决反压的方案就是这种感觉。
 在 Flink 中，这些分布式阻塞队列就是这些逻辑流，而队列容量是通过缓冲池来（LocalBufferPool）实现的。每个被生产和被消费的流都会被分配一个缓冲池。缓冲池管理着一组缓冲(Buffer)，缓冲在被消费后可以被回收循环利用。这很好理解：你从池子中拿走一个缓冲，填上数据，在数据消费完之后，又把缓冲还给池子，之后你可以再次使用它。&lt;/p&gt;

&lt;h2 id=&quot;flink-网络传输中的内存管理&quot;&gt;Flink 网络传输中的内存管理&lt;/h2&gt;

&lt;p&gt;如下图所示展示了 Flink 在网络传输场景下的内存管理。网络上传输的数据会写到 Task 的 InputGate（IG） 中，经过 Task 的处理后，再由 Task 写到 ResultPartition（RS） 中。每个 Task 都包括了输入和输入，输入和输出的数据存在 Buffer 中（都是字节数据）。Buffer 是 MemorySegment 的包装类。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/bigdata-total/2018-11-15-实时流处理系统反压机制07.png?raw=true&quot; alt=&quot;实时流处理系统反压机制07&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;TaskManager（TM）在启动时，会先初始化NetworkEnvironment对象，TM 中所有与网络相关的东西都由该类来管理（如 Netty 连接），其中就包括NetworkBufferPool。根据配置，Flink 会在 NetworkBufferPool 中生成一定数量（默认2048个）的内存块 MemorySegment（关于 Flink 的内存管理，后续文章会详细谈到），内存块的总数量就代表了网络传输中所有可用的内存。NetworkEnvironment 和 NetworkBufferPool 是 Task 之间共享的，每个 TM 只会实例化一个。&lt;/li&gt;
  &lt;li&gt;Task 线程启动时，会向 NetworkEnvironment 注册，NetworkEnvironment 会为 Task 的 InputGate（IG）和 ResultPartition（RP） 分别创建一个 LocalBufferPool（缓冲池）并设置可申请的 MemorySegment（内存块）数量。IG 对应的缓冲池初始的内存块数量与 IG 中 InputChannel 数量一致，RP 对应的缓冲池初始的内存块数量与 RP 中的 ResultSubpartition 数量一致。不过，每当创建或销毁缓冲池时，NetworkBufferPool 会计算剩余空闲的内存块数量，并平均分配给已创建的缓冲池。注意，这个过程只是指定了缓冲池所能使用的内存块数量，并没有真正分配内存块，只有当需要时才分配。为什么要动态地为缓冲池扩容呢？因为内存越多，意味着系统可以更轻松地应对瞬时压力（如GC），不会频繁地进入反压状态，所以我们要利用起那部分闲置的内存块。&lt;/li&gt;
  &lt;li&gt;在 Task 线程执行过程中，当 Netty 接收端收到数据时，为了将 Netty 中的数据拷贝到 Task 中，InputChannel（实际是 RemoteInputChannel）会向其对应的缓冲池申请内存块（上图中的①）。如果缓冲池中也没有可用的内存块且已申请的数量还没到池子上限，则会向 NetworkBufferPool 申请内存块（上图中的②）并交给 InputChannel 填上数据（上图中的③和④）。如果缓冲池已申请的数量达到上限了呢？或者 NetworkBufferPool 也没有可用内存块了呢？这时候，Task 的 Netty Channel 会暂停读取，上游的发送端会立即响应停止发送，拓扑会进入反压状态。当 Task 线程写数据到 ResultPartition 时，也会向缓冲池请求内存块，如果没有可用内存块时，会阻塞在请求内存块的地方，达到暂停写入的目的。&lt;/li&gt;
  &lt;li&gt;当一个内存块被消费完成之后（在输入端是指内存块中的字节被反序列化成对象了，在输出端是指内存块中的字节写入到 Netty Channel 了），会调用 Buffer.recycle() 方法，会将内存块还给 LocalBufferPool （上图中的⑤）。如果LocalBufferPool中当前申请的数量超过了池子容量（由于上文提到的动态容量，由于新注册的 Task 导致该池子容量变小），则LocalBufferPool会将该内存块回收给 NetworkBufferPool（上图中的⑥）。如果没超过池子容量，则会继续留在池子中，减少反复申请的开销。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;flink-反压机制-1&quot;&gt;Flink 反压机制&lt;/h2&gt;

&lt;p&gt;下面这张图简单展示了两个 Task 之间的数据传输以及 Flink 如何感知到反压的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/bigdata-total/2018-11-15-实时流处理系统反压机制08.png?raw=true&quot; alt=&quot;实时流处理系统反压机制08&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;记录“A”进入了 Flink 并且被 Task 1 处理。（这里省略了 Netty 接收、反序列化等过程）&lt;/li&gt;
  &lt;li&gt;记录被序列化到 buffer 中。&lt;/li&gt;
  &lt;li&gt;该 buffer 被发送到 Task 2，然后 Task 2 从这个 buffer 中读出记录。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;不要忘了：记录能被 Flink 处理的前提是，必须有空闲可用的 Buffer。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;结合上面两张图看：Task 1 在输出端有一个相关联的 LocalBufferPool（称缓冲池1），Task 2 在输入端也有一个相关联的 LocalBufferPool（称缓冲池2）。如果缓冲池1中有空闲可用的 buffer 来序列化记录 “A”，我们就序列化并发送该 buffer。&lt;/p&gt;

&lt;p&gt;这里我们需要注意两个场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本地传输：如果 Task 1 和 Task 2 运行在同一个 worker 节点（TaskManager），该 buffer 可以直接交给下一个 Task。一旦 Task 2 消费了该 buffer，则该 buffer 会被缓冲池1回收。如果 Task 2 的速度比 1 慢，那么 buffer 回收的速度就会赶不上 Task 1 取 buffer 的速度，导致缓冲池1无可用的 buffer，Task 1 等待在可用的 buffer 上。最终形成 Task 1 的降速。&lt;/li&gt;
  &lt;li&gt;远程传输：如果 Task 1 和 Task 2 运行在不同的 worker 节点上，那么 buffer 会在发送到网络（TCP Channel）后被回收。在接收端，会从 LocalBufferPool 中申请 buffer，然后拷贝网络中的数据到 buffer 中。如果没有可用的 buffer，会停止从 TCP 连接中读取数据。在输出端，通过 Netty 的水位值机制来保证不往网络中写入太多数据（后面会说）。如果网络中的数据（Netty输出缓冲中的字节数）超过了高水位值，我们会等到其降到低水位值以下才继续写入数据。这保证了网络中不会有太多的数据。如果接收端停止消费网络中的数据（由于接收端缓冲池没有可用 buffer），网络中的缓冲数据就会堆积，那么发送端也会暂停发送。另外，这会使得发送端的缓冲池得不到回收，writer 阻塞在向 LocalBufferPool 请求 buffer，阻塞了 writer 往 ResultSubPartition 写数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这种固定大小缓冲池就像阻塞队列一样，保证了 Flink 有一套健壮的反压机制，使得 Task 生产数据的速度不会快于消费的速度。我们上面描述的这个方案可以从两个 Task 之间的数据传输自然地扩展到更复杂的 pipeline 中，保证反压机制可以扩散到整个 pipeline。&lt;/p&gt;

&lt;h2 id=&quot;反压实验&quot;&gt;反压实验&lt;/h2&gt;

&lt;p&gt;另外，官方博客中为了展示反压的效果，给出了一个简单的实验。下面这张图显示了：随着时间的改变，生产者（黄色线）和消费者（绿色线）每5秒的平均吞吐与最大吞吐（在单一JVM中每秒达到8百万条记录）的百分比。我们通过衡量task每5秒钟处理的记录数来衡量平均吞吐。该实验运行在单 JVM 中，不过使用了完整的 Flink 功能栈。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/bigdata-total/2018-11-15-实时流处理系统反压机制09.png?raw=true&quot; alt=&quot;实时流处理系统反压机制09&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先，我们运行生产task到它最大生产速度的60%（我们通过Thread.sleep()来模拟降速）。消费者以同样的速度处理数据。然后，我们将消费task的速度降至其最高速度的30%。你就会看到背压问题产生了，正如我们所见，生产者的速度也自然降至其最高速度的30%。接着，停止消费task的人为降速，之后生产者和消费者task都达到了其最大的吞吐。接下来，我们再次将消费者的速度降至30%，pipeline给出了立即响应：生产者的速度也被自动降至30%。最后，我们再次停止限速，两个task也再次恢复100%的速度。总而言之，我们可以看到：生产者和消费者在 pipeline 中的处理都在跟随彼此的吞吐而进行适当的调整，这就是我们希望看到的反压的效果。&lt;/p&gt;

&lt;h2 id=&quot;flink-反压监控&quot;&gt;Flink 反压监控&lt;/h2&gt;

&lt;p&gt;在 Storm/JStorm 中，只要监控到队列满了，就可以记录下拓扑进入反压了。但是 Flink 的反压太过于天然了，导致我们无法简单地通过监控队列来监控反压状态。Flink 在这里使用了一个 trick 来实现对反压的监控。如果一个 Task 因为反压而降速了，那么它会卡在向 LocalBufferPool 申请内存块上。那么这时候，该 Task 的 stack trace 就会长下面这样：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Native&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.[...].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LocalBufferPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalBufferPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;163&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.[...].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LocalBufferPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestBufferBlocking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalBufferPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;133&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;---&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCKING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么事情就简单了。通过不断地采样每个 task 的 stack trace 就可以实现反压监控。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/bigdata-total/2018-11-15-实时流处理系统反压机制10.png?raw=true&quot; alt=&quot;实时流处理系统反压机制10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flink 的实现中，只有当 Web 页面切换到某个 Job 的 Backpressure 页面，才会对这个 Job 触发反压检测，因为反压检测还是挺昂贵的。JobManager 会通过 Akka 给每个 TaskManager 发送TriggerStackTraceSample消息。默认情况下，TaskManager 会触发100次 stack trace 采样，每次间隔 50ms（也就是说一次反压检测至少要等待5秒钟）。并将这 100 次采样的结果返回给 JobManager，由 JobManager 来计算反压比率（反压出现的次数/采样的次数），最终展现在 UI 上。UI 刷新的默认周期是一分钟，目的是不对 TaskManager 造成太大的负担。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;Flink不需要一种特殊的机制来处理反压，因为Flink 中的数据传输相当于已经提供了应对反压的机制。因此，Flink 所能获得的最大吞吐量由其 pipeline 中最慢的组件决定。相对于 Storm/JStorm 的实现，Flink 的实现更为简洁优雅，源码中也看不见与反压相关的代码，无需 Zookeeper/TopologyMaster 的参与也降低了系统的负载，也利于对反压更迅速的响应。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文转自 &lt;a href=&quot;https://blog.csdn.net/qq_21125183/article/details/80708142&quot;&gt;实时流处理系统反压机制（BackPressure）综述&lt;/a&gt;&lt;br /&gt;
https://blog.csdn.net/qq_21125183/article/details/80708142&lt;br /&gt;
&lt;a href=&quot;https://www.jianshu.com/p/28fcd51d4edd&quot;&gt;开启Back Pressure使生产环境的Spark Streaming应用更稳定、有效&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;至此，本篇内容完成。&lt;/p&gt;</content><author><name>叶子  ( ˘ ³˘)♥</name></author><category term="Spark" /><category term="Flink" /><category term="Storm" /><summary type="html">本文主要关于实时流处理系统反压机制，最近看到反压问题看到此文章很好，在此分享并mark一下。 (￢_￢)ﾉ最近菜叶子没自己写见谅。 本文转自 实时流处理系统反压机制（BackPressure）综述 https://blog.csdn.net/qq_21125183/article/details/80708142 开启Back Pressure使生产环境的Spark Streaming应用更稳定、有效</summary></entry><entry><title type="html">Flink配置参数(官网翻译转载)</title><link href="http://localhost:4000/bigdata/2018/10/17/Flink%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/" rel="alternate" type="text/html" title="Flink配置参数(官网翻译转载)" /><published>2018-10-17T00:00:00+08:00</published><updated>2018-10-17T00:00:00+08:00</updated><id>http://localhost:4000/bigdata/2018/10/17/Flink%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0</id><content type="html" xml:base="http://localhost:4000/bigdata/2018/10/17/Flink%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/">&lt;blockquote&gt;
  &lt;p&gt;本文所用flink版本为V1.7-SNAPSHOT，官网翻译转载，转载地址：&lt;a href=&quot;https://flink.lantingmeeting.com/ops/config.html#legacy&quot;&gt;配置-https://flink.lantingmeeting.com/ops/config.html#legacy&lt;/a&gt;，官方文档原文&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-master/ops/config.html#configuration&quot;&gt;Configuration&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;对于单节点设置，Flink已准备好开箱即用，您无需更改默认配置即可开始使用。&lt;/strong&gt;&lt;br /&gt;
开箱即用的配置将使用您的默认Java安装.您可以手动设置环境变量&lt;code class=&quot;highlighter-rouge&quot;&gt;JAVA_HOME&lt;/code&gt;或配置项&lt;code class=&quot;highlighter-rouge&quot;&gt;env.java.home&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;conf/flink-conf.yaml&lt;/code&gt;，如果你想手动覆盖Java运行时使用。&lt;br /&gt;
此页面列出了设置性能良好（分布式）安装通常所需的最常用选项。此外，此处还列出了所有可用配置参数的完整列表。&lt;br /&gt;
所有配置都已完成&lt;code class=&quot;highlighter-rouge&quot;&gt;conf/flink-conf.yaml&lt;/code&gt;，预计将是具有格式的&lt;a href=&quot;http://www.yaml.org/spec/1.2/spec.html&quot;&gt;YAML键值对&lt;/a&gt;的扁平集合&lt;code class=&quot;highlighter-rouge&quot;&gt;key: value&lt;/code&gt;。&lt;br /&gt;
系统和运行脚本在启动时解析配置。对配置文件的更改需要重新启动Flink JobManager和TaskManagers。&lt;br /&gt;
TaskManagers的配置文件可能不同，Flink不承担集群中的统一机器。&lt;/p&gt;

&lt;h1 id=&quot;常见选项&quot;&gt;常见选项&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;jobmanager.heap.size&lt;/td&gt;
      &lt;td&gt;“1024m”&lt;/td&gt;
      &lt;td&gt;JobManager的JVM堆大小.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.heap.size&lt;/td&gt;
      &lt;td&gt;“1024m”&lt;/td&gt;
      &lt;td&gt;TaskManagers的JVM堆大小，它是系统的并行工作者.在YARN设置中，此值自动配置为TaskManager的YARN容器的大小，减去一定的容差值.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;parallelism.default&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.numberOfTaskSlots&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;单个TaskManager可以运行的并行算子或用户函数实例的数量.如果此值大于1，则单个TaskManager将获取函数或 算子的多个实例.这样，TaskManager可以使用多个CPU内核，但同时，可用内存在不同的算子或函数实例之间划分.此值通常与TaskManager的计算机具有的物理CPU核心数成比例（例如，等于核心数，或核心数的一半）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state.backend&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;状态后台用于存储和检查点状态.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state.checkpoints.dir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;用于在Flink支持的文件系统中存储检查点的数据文件和元数据的默认目录.必须可以从所有参与的进程/节点（即所有TaskManagers和JobManagers）访问存储路径.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state.savepoints.dir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;保存点的默认目录.由将后台写入文件系统的状态后台（MemoryStateBackend，FsStateBackend，RocksDBStateBackend）使用.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability&lt;/td&gt;
      &lt;td&gt;“no / not”&lt;/td&gt;
      &lt;td&gt;定义用于群集执行的高可用性模式.要启用高可用性，请将此模式设置为“ZOOKEEPER”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.storageDir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;文件系统路径（URI）Flink在高可用性设置中持久保存元数据.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.internal.enabled&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;打开SSL以进行内部网络通信.可选地，特定组件可以通过它们自己的设置（rpc，数据传输，REST等）覆盖它.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.rest.enabled&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;通过REST端点打开SSL以进行外部通信.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;完整参考&quot;&gt;完整参考&lt;/h1&gt;
&lt;h2 id=&quot;hdfs&quot;&gt;HDFS&lt;/h2&gt;
&lt;p&gt;注意:&lt;strong&gt;不推荐使用这些Keys，建议使用环境变量配置Hadoop路径&lt;code class=&quot;highlighter-rouge&quot;&gt;HADOOP_CONF_DIR&lt;/code&gt;&lt;/strong&gt;。&lt;br /&gt;
这些参数配置Flink使用的默认HDFS。未指定HDFS配置的设置必须指定HDFS文件的完整路径（&lt;code class=&quot;highlighter-rouge&quot;&gt;hdfs://address:port/path/to/files&lt;/code&gt;）文件也将使用默认HDFS参数（块大小，复制因子）编写。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fs.hdfs.hadoopconf&lt;/code&gt;：Hadoop文件系统（HDFS）配置&lt;strong&gt;目录&lt;/strong&gt;的绝对路径（可选值）。指定此值允许程序使用短URI引用HDFS文件（&lt;code class=&quot;highlighter-rouge&quot;&gt;hdfs:///path/to/files&lt;/code&gt;不包括文件URI中NameNode的地址和端口）。如果没有此选项，则可以访问HDFS文件，但需要完全限定的URI &lt;code class=&quot;highlighter-rouge&quot;&gt;hdfs://address:port/path/to/files&lt;/code&gt;。此选项还会导致文件编写者获取HDFS的块大小和复制因子的默认值。Flink将在指定目录中查找“core-site.xml”和“hdfs-site.xml”文件。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fs.hdfs.hdfsdefault&lt;/code&gt;：Hadoop自己的配置文件“hdfs-default.xml”的绝对路径（DEFAULT：null）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fs.hdfs.hdfssite&lt;/code&gt;：Hadoop自己的配置文件“hdfs-site.xml”的绝对路径（DEFAULT：null）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;核心&quot;&gt;核心&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;classloader.parent-first-patterns.additional&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;一个（以分号分隔的）模式列表，指定应始终首先通过父ClassLoader解析哪些类.模式是一个简单的前缀，它根据完全限定的类名进行检查.这些模式附加到“classloader.parent-first-patterns.default”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;classloader.parent-first-patterns.default&lt;/td&gt;
      &lt;td&gt;“java .; scala .; org.apache.flink .; com.esotericsoftware.kryo; org.apache.hadoop .; javax.annotation .; org.slf4j; org.apache.log4j; org.apache.logging; org. apache.commons.logging; ch.qos.logback“&lt;/td&gt;
      &lt;td&gt;一个（以分号分隔的）模式列表，指定应始终首先通过父ClassLoader解析哪些类.模式是一个简单的前缀，它根据完全限定的类名进行检查.通常不应修改此设置.要添加其他模式，我们建议使用“classloader.parent-first-patterns.additional”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;classloader.resolve-order&lt;/td&gt;
      &lt;td&gt;“child-first”&lt;/td&gt;
      &lt;td&gt;从用户代码加载类时定义类解析策略，这意味着是首先检查用户代码jar（“child-first”）还是应用程序类路径（“parent-first”）.默认设置指示首先从用户代码jar加载类，这意味着用户代码jar可以包含和加载不同于Flink使用的（依赖）依赖项.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;io.tmp.dirs&lt;/td&gt;
      &lt;td&gt;YARN上的’LOCAL_DIRS’.Mesos上的’_FLINK_TMP_DIR’.独立的System.getProperty（“java.io.tmpdir”）.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mode&lt;/td&gt;
      &lt;td&gt;“new”&lt;/td&gt;
      &lt;td&gt;切换到选择执行模式.可能的值为“new”和“legacy”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;parallelism.default&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;jobmanager&quot;&gt;JobManager&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;jobmanager.archive.fs.dir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jobmanager.execution.attempts-history-size&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;历史记录中保存的最大执行尝试次数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jobmanager.execution.failover-strategy&lt;/td&gt;
      &lt;td&gt;“full”&lt;/td&gt;
      &lt;td&gt;此选项指定作业计算如何从任务失败中恢复.可接受的值是：’full’：重新启动所有任务.’individual’：仅重新启动失败的任务.仅当所有任务都是独立组件时才应使用.’region’：重新启动可能受任务失败影响的所有任务.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jobmanager.heap.size&lt;/td&gt;
      &lt;td&gt;“1024m”&lt;/td&gt;
      &lt;td&gt;JobManager的JVM堆大小.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jobmanager.resourcemanager.&lt;br /&gt;reconnect-interval&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;此选项指定在与资源管理器的连接丢失时触发资源管理器重新连接的时间间隔.此选项仅供内部使用.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jobmanager.rpc.address&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;config参数定义要连接的网络地址以与JobManager进行通信.此值仅在具有静态名称或地址的单个JobManager存在的设置中解释（简单的独立设置或具有动态服务名称解析的容器设置）.当使用Leader选举服务（如ZooKeeper）从潜在的多个Slave JobManagers中选择和发现JobManagerLeader时，它不会在许多高可用性设置中使用.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jobmanager.rpc.port&lt;/td&gt;
      &lt;td&gt;6123&lt;/td&gt;
      &lt;td&gt;config参数定义要连接的网络端口以与JobManager进行通信.与jobmanager.rpc.address一样，此值仅在设置中解释，其中存在具有静态名称/地址和端口的单个JobManager（简单的独立设置或具有动态服务名称解析的容器设置）.当使用Leader选举服务（如ZooKeeper）从潜在的多个Slave JobManagers中选择和发现JobManagerLeader时，此配置选项不会用于许多高可用性设置.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jobstore.cache-size&lt;/td&gt;
      &lt;td&gt;52428800&lt;/td&gt;
      &lt;td&gt;作业存储缓存大小（以字节为单位），用于将已完成的作业保存在内存中.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jobstore.expiration-time&lt;/td&gt;
      &lt;td&gt;3600&lt;/td&gt;
      &lt;td&gt;完成作业到期并从作业库中清除的时间（以秒为单位）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slot.idle.timeout&lt;/td&gt;
      &lt;td&gt;50000&lt;/td&gt;
      &lt;td&gt;Slot Pool中空闲槽的超时时间（以ms为单位）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slot.request.timeout&lt;/td&gt;
      &lt;td&gt;300000&lt;/td&gt;
      &lt;td&gt;从Slot Pool请求插槽的超时（以ms为单位）.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;taskmanager&quot;&gt;TaskManager&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;task.cancellation.interval&lt;/td&gt;
      &lt;td&gt;30000&lt;/td&gt;
      &lt;td&gt;两次连续任务取消尝试之间的时间间隔（以ms为单位）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;task.cancellation.timeout&lt;/td&gt;
      &lt;td&gt;180000&lt;/td&gt;
      &lt;td&gt;超时（以ms为单位），在此之后任务取消超时并导致致命的TaskManager错误.值为0将禁用看门狗.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;task.cancellation.timers.timeout&lt;/td&gt;
      &lt;td&gt;7500&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;task.checkpoint.alignment.max-size&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;检查点对齐可以缓冲的最大字节数.如果检查点对齐缓冲超过配置的数据量，则中止检查点（跳过）.值-1表示没有限制.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.data.port&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;TaskManager的端口用于数据交换 算子操作.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.data.ssl.enabled&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;为taskmanager数据传输启用SSL支持.仅当内部SSL的全局标志（security.ssl.internal.enabled）设置为true时，此选项才适用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.debug.memory.log&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;指示是否启动线程的标志，该线程重复记录JVM的内存使用情况.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.debug.memory.log-interval&lt;/td&gt;
      &lt;td&gt;5000&lt;/td&gt;
      &lt;td&gt;日志线程记录当前内存使用情况的时间间隔（以ms为单位）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.exit-on-fatal-akka-error&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;是否应启动TaskManager的隔离监视器.如果隔离监视器检测到它已隔离另一个actor系统或者它已被另一个actor系统隔离，则会关闭该actor系统.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.heap.size&lt;/td&gt;
      &lt;td&gt;“1024m”&lt;/td&gt;
      &lt;td&gt;TaskManagers的JVM堆大小，它是系统的并行工作者.在YARN设置中，此值自动配置为TaskManager的YARN容器的大小，减去一定的容差值.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.host&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;TaskManager绑定到的网络接口的主机名.默认情况下，TaskManager搜索可以连接到JobManager和其他TaskManagers的网络接口.如果该策略由于某种原因失败，则此选项可用于定义主机名.由于不同的TaskManagers需要此选项的不同值，因此通常在其他非共享的特定于TaskManager的配置文件中指定.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.jvm-exit-on-oom&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;是否在任务线程抛出OutOfMemoryError时终止TaskManager.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.memory.fraction&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;TaskManager为排序，哈希表和中间结果的缓存预留的相对内存量（在减去网络缓冲区使用的内存量之后）.例如，值“0.8”表示TaskManager为内部数据缓冲区保存80％的内存，为TaskManager的堆留下20％的可用内存，用于由用户定义的函数创建的对象.仅当未设置taskmanager.memory.size时，才会评估此参数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.memory.off-heap&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;内存分配方法（JVM堆或堆外），用于TaskManager的托管内存以及网络缓冲区.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.memory.preallocate&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;在TaskManager启动时是否应预先分配TaskManager托管内存.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.memory.segment-size&lt;/td&gt;
      &lt;td&gt;“32KB”&lt;/td&gt;
      &lt;td&gt;网络堆栈和内存管理器使用的内存缓冲区的大小.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.memory.size&lt;/td&gt;
      &lt;td&gt;“0”&lt;/td&gt;
      &lt;td&gt;TaskManager的内存管理器分配的内存量.如果未设置，将分配相对分数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.detailed-metrics&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;布尔标志，用于启用/禁用有关入站/出站网络队列长度的更详细指标.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.memory.&lt;br /&gt;buffers-per-channel&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;每个传出/传入通道（子分区/输入通道）使用的最大网络缓冲区数.在基于信用的流量控制模式下，这表示每个输入通道中有多少信用.它应配置至少2以获得良好的性能.1个缓冲区用于接收子分区中的飞行中数据，1个缓冲区用于并行序列化.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.memory.&lt;br /&gt;floating-buffers-per-gate&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;每个输出/输入门（结果分区/输入门）使用的额外网络缓冲区数.在基于信用的流量控制模式中，这表示在所有输入通道之间共享多少浮动信用.浮动缓冲区基于积压（子分区中的实时输出缓冲区）反馈来分布，并且可以帮助减轻由子分区之间的不平衡数据分布引起的背压.如果节点之间的往返时间较长和/或群集中的机器数量较多，则应增加此值.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.memory.&lt;br /&gt;fraction&lt;/td&gt;
      &lt;td&gt;0.1&lt;/td&gt;
      &lt;td&gt;用于网络缓冲区的JVM内存的分数.这决定了TaskManager可以同时拥有多少流数据交换通道以及通道缓冲的程度.如果作业被拒绝或者您收到系统没有足够缓冲区的警告，请增加此值或下面的最小/最大值.另请注意，“taskmanager.network.memory.min”和“taskmanager.network.memory.max”可能会覆盖此分数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.memory.max&lt;/td&gt;
      &lt;td&gt;“1GB”&lt;/td&gt;
      &lt;td&gt;网络缓冲区的最大内存大小.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.memory.min&lt;/td&gt;
      &lt;td&gt;“64MB”&lt;/td&gt;
      &lt;td&gt;网络缓冲区的最小内存大小.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.request-backoff.initial&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;输入通道的分区请求的最小退避.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.request-backoff.max&lt;/td&gt;
      &lt;td&gt;10000&lt;/td&gt;
      &lt;td&gt;输入通道的分区请求的最大退避.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.numberOfTaskSlots&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;单个TaskManager可以运行的并行算子或用户函数实例的数量.如果此值大于1，则单个TaskManager将获取函数或 算子的多个实例.这样，TaskManager可以使用多个CPU内核，但同时，可用内存在不同的算子或函数实例之间划分.此值通常与TaskManager的计算机具有的物理CPU核心数成比例（例如，等于核心数，或核心数的一半）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.registration.initial-backoff&lt;/td&gt;
      &lt;td&gt;“500ms”&lt;/td&gt;
      &lt;td&gt;两次连续注册尝试之间的初始注册退避.每次新注册尝试的退避加倍，直到达到最大注册退避.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.registration.max-backoff&lt;/td&gt;
      &lt;td&gt;“30s”&lt;/td&gt;
      &lt;td&gt;两次连续注册尝试之间的最大注册退避.最大注册退避需要时间单位指定符（ms / s / min / h / d）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.registration.refused-backoff&lt;/td&gt;
      &lt;td&gt;“10s”&lt;/td&gt;
      &lt;td&gt;注册后的退避已被作业管理员拒绝，然后重试连接.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.registration.timeout&lt;/td&gt;
      &lt;td&gt;“5m”&lt;/td&gt;
      &lt;td&gt;定义TaskManager注册的超时.如果在未成功注册的情况下超过持续时间，则TaskManager将终止.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.rpc.port&lt;/td&gt;
      &lt;td&gt;“0”&lt;/td&gt;
      &lt;td&gt;TaskManager的IPC端口.接受端口列表（“50100,50101”），范围（“50100-50200”）或两者的组合.建议在同一台计算机上运行多个TaskManagers时设置一系列端口以避免冲突.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;分布式协调通过akka&quot;&gt;分布式协调（通过Akka）&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.ask.timeout&lt;/td&gt;
      &lt;td&gt;“10s”&lt;/td&gt;
      &lt;td&gt;超时用于所有期货并阻止Akka通话.如果Flink由于超时而失败，那么您应该尝试增加此值.超时可能是由于机器速度慢或网络拥挤造成的.超时值需要时间单位指定符（ms / s / min / h / d）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.client-socket-worker-pool.pool-size-factor&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;池大小因子用于使用以下公式确定线程池大小：ceil（可用处理器*因子）.然后，结果大小由pool-size-min和pool-size-max值限制.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.client-socket-worker-pool.pool-size-max&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;将基于因子的数量限制为的最大线程数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.client-socket-worker-pool.pool-size-min&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;将基于因子的数量限制为的最小线程数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.client.timeout&lt;/td&gt;
      &lt;td&gt;“60s”&lt;/td&gt;
      &lt;td&gt;客户端的所有阻塞调用超时.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.fork-join-executor.parallelism-factor&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;并行因子用于使用以下公式确定线程池大小：ceil（可用处理器*因子）.然后，得到的大小受parallelism-min和parallelism-max值的限制.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.fork-join-executor.parallelism-max&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;将基于因子的并行数量限制为的最大线程数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.fork-join-executor.parallelism-min&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;将基于因子的并行数量限制为的最小线程数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.framesize&lt;/td&gt;
      &lt;td&gt;“10485760b”&lt;/td&gt;
      &lt;td&gt;在JobManager和TaskManager之间发送的消息的最大大小.如果Flink由于消息超出此限制而失败，那么您应该增加它.邮件大小需要大小单位说明符.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.jvm-exit-on-fatal-error&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;退出JVM致命的Akka错误.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.log.lifecycle.events&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;打开Akka远程记录事件.在调试时将此值设置为“true”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.lookup.timeout&lt;/td&gt;
      &lt;td&gt;“10s”&lt;/td&gt;
      &lt;td&gt;用于查找JobManager的超时.超时值必须包含时间单位说明符（ms / s / min / h / d）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.retry-gate-closed-for&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;断开远程连接后，应关闭门的ms数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.server-socket-worker-pool.pool-size-factor&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;池大小因子用于使用以下公式确定线程池大小：ceil（可用处理器*因子）.然后，结果大小由pool-size-min和pool-size-max值限制.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.server-socket-worker-pool.pool-size-max&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;将基于因子的数量限制为的最大线程数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.server-socket-worker-pool.pool-size-min&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;将基于因子的数量限制为的最小线程数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.ssl.enabled&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;为Akka的远程通信打开SSL.仅当全局ssl标志security.ssl.enabled设置为true时，这才适用.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.startup-timeout&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;超时之后，远程组件的启动被视为失败.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.tcp.timeout&lt;/td&gt;
      &lt;td&gt;“20s”&lt;/td&gt;
      &lt;td&gt;所有出站连接超时.如果由于网络速度较慢而导致连接到TaskManager时遇到问题，则应增加此值.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.throughput&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;在将线程返回到池之前批处理的消息数.较低的值表示公平的调度，而较高的值可以以不公平为代价来提高性能.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.transport.heartbeat.interval&lt;/td&gt;
      &lt;td&gt;“1000s”&lt;/td&gt;
      &lt;td&gt;Akka传输故障检测器的心跳间隔.由于Flink使用TCP，因此不需要检测器.因此，通过将间隔设置为非常高的值来禁用检测器.如果您需要传输故障检测器，请将间隔设置为某个合理的值.间隔值需要时间单位指定符（ms / s / min / h / d）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.transport.heartbeat.pause&lt;/td&gt;
      &lt;td&gt;“6000s”&lt;/td&gt;
      &lt;td&gt;Akka的传输故障检测器可接受的心跳暂停.由于Flink使用TCP，因此不需要检测器.因此，通过将暂停设置为非常高的值来禁用检测器.如果您需要传输故障检测器，请将暂停设置为某个合理的值.暂停值需要时间单位指定符（ms / s / min / h / d）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.transport.threshold&lt;/td&gt;
      &lt;td&gt;300.0&lt;/td&gt;
      &lt;td&gt;传输故障检测器的阈值.由于Flink使用TCP，因此检测器不是必需的，因此阈值被设置为高值.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.watch.heartbeat.interval&lt;/td&gt;
      &lt;td&gt;“10s”&lt;/td&gt;
      &lt;td&gt;Akka的DeathWatch机制检测死亡TaskManagers的心跳间隔.如果由于心跳消息丢失或延迟而导致TaskManagers被错误地标记为死亡，那么您应该减小此值或增加akka.watch.heartbeat.pause.可在&lt;a href=&quot;http://doc.akka.io/docs/akka/snapshot/scala/remoting.html#failure-detector&quot;&gt;此处&lt;/a&gt;找到Akka的DeathWatch的详尽描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.watch.heartbeat.pause&lt;/td&gt;
      &lt;td&gt;“60s”&lt;/td&gt;
      &lt;td&gt;Akka的DeathWatch机制可接受的心跳暂停.较低的值不允许心律不齐.如果由于心跳消息丢失或延迟而导致TaskManagers被错误地标记为死亡，那么您应该增加此值或Reduceakka.watch.heartbeat.interval.较高的值会增加检测死的TaskManager的时间.可在&lt;a href=&quot;http://doc.akka.io/docs/akka/snapshot/scala/remoting.html#failure-detector&quot;&gt;此处&lt;/a&gt;找到Akka的DeathWatch的详尽描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;akka.watch.threshold&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;DeathWatch故障检测器的阈值.较低的值容易出现误报，而较高的值会增加检测死的TaskManager的时间.可在&lt;a href=&quot;http://doc.akka.io/docs/akka/snapshot/scala/remoting.html#failure-detector&quot;&gt;此处&lt;/a&gt;找到Akka的DeathWatch的详尽描述&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;rest&quot;&gt;REST&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;rest.address&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;客户端应该用于连接到服务器的地址.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rest.await-leader-timeout&lt;/td&gt;
      &lt;td&gt;30000&lt;/td&gt;
      &lt;td&gt;客户端等待Leader地址的时间（以ms为单位），例如Dispatcher或WebMonitorEndpoint&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rest.bind-address&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;服务器绑定自身的地址.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rest.client.max-content-length&lt;/td&gt;
      &lt;td&gt;104857600&lt;/td&gt;
      &lt;td&gt;客户端将处理的最大内容长度（以字节为单位）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rest.connection-timeout&lt;/td&gt;
      &lt;td&gt;15000&lt;/td&gt;
      &lt;td&gt;客户端建立TCP连接的最长时间（以ms为单位）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rest.port&lt;/td&gt;
      &lt;td&gt;8081&lt;/td&gt;
      &lt;td&gt;服务器侦听的端口/客户端连接到的端口.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rest.retry.delay&lt;/td&gt;
      &lt;td&gt;3000&lt;/td&gt;
      &lt;td&gt;客户端在重试之间等待的时间（以ms为单位）（另请参阅“rest.retry.max-attempts”）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rest.retry.max-attempts&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;如果可重试 算子操作失败，客户端将尝试重试的次数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rest.server.max-content-length&lt;/td&gt;
      &lt;td&gt;104857600&lt;/td&gt;
      &lt;td&gt;服务器将处理的最大内容长度（以字节为单位）.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;blob服务器&quot;&gt;Blob服务器&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;blob.fetch.backlog&lt;/td&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;config参数定义JobManager上BLOB提取的积压.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blob.fetch.num-concurrent&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;config参数定义JobManager服务的最大并发BLOB提取数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blob.fetch.retries&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;config参数定义失败的BLOB提取的退出次数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blob.offload.minsize&lt;/td&gt;
      &lt;td&gt;1048576&lt;/td&gt;
      &lt;td&gt;要卸载到BlobServer的消息的最小大小.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blob.server.port&lt;/td&gt;
      &lt;td&gt;“0”&lt;/td&gt;
      &lt;td&gt;config参数定义blob服务的服务器端口.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blob.service.cleanup.interval&lt;/td&gt;
      &lt;td&gt;3600&lt;/td&gt;
      &lt;td&gt;TaskManager中blob缓存的清理间隔（以秒为单位）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blob.service.ssl.enabled&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;用于覆盖blob服务传输的ssl支持的标志.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blob.storage.directory&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;config参数，用于定义blob服务器使用的存储目录.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;心跳管理器&quot;&gt;心跳管理器&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;heartbeat.interval&lt;/td&gt;
      &lt;td&gt;10000&lt;/td&gt;
      &lt;td&gt;从发送方请求心跳的时间间隔.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;heartbeat.timeout&lt;/td&gt;
      &lt;td&gt;50000&lt;/td&gt;
      &lt;td&gt;为发送方和接收方双方请求和接收心跳的超时.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;ssl设置&quot;&gt;SSL设置&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.algorithms&lt;/td&gt;
      &lt;td&gt;“TLS_RSA_WITH_AES_128_CBC_SHA”&lt;/td&gt;
      &lt;td&gt;要支持的标准SSL算法的逗号分隔列表.&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites&quot;&gt;在这里&lt;/a&gt;阅读更多&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.internal.enabled&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;打开SSL以进行内部网络通信.可选地，特定组件可以通过它们自己的设置（rpc，数据传输，REST等）覆盖它.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.internal.key-password&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;解密Keys库中Flink内部端点（rpc，数据传输，blob服务器）Keys的密钥.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.internal.keystore&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;带有SSLKeys和证书的JavaKeys库文件，用于Flink的内部端点（rpc，数据传输，blob服务器）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.internal.keystore-password&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;为Flink的内部端点（rpc，数据传输，blob服务器）解密Flink的Keys库文件的密钥.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.internal.truststore&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;包含公共CA证书的信任库文件，用于验证Flink内部端点（rpc，数据传输，blob服务器）的对等方.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.internal.truststore-password&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;用于解密Flink内部端点（rpc，数据传输，blob服务器）的信任库的密码.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.key-password&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;解密Keys库中的服务器Keys的密钥.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.keystore&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;flink端点用于其SSLKeys和证书的JavaKeys库文件.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.keystore-password&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;解密Keys库文件的密钥.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.protocol&lt;/td&gt;
      &lt;td&gt;“TLSv1.2”&lt;/td&gt;
      &lt;td&gt;ssl传输支持的SSL协议版本.请注意，它不支持以逗号分隔的列表.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.rest.enabled&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;通过REST端点打开SSL以进行外部通信.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.rest.key-password&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;解密Flink外部REST端点的Keys库中的Keys的密钥.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.rest.keystore&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;带有SSLKeys和证书的JavaKeys库文件，用于Flink的外部REST端点.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.rest.keystore-password&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;为Flink的外部REST端点解密Flink的Keys库文件的密钥.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.rest.truststore&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;包含公共CA证书的信任库文件，用于验证Flink的外部REST端点的对等方.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.rest.truststore-password&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;用于解密Flink外部REST端点的信任库的密码.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.truststore&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;信任库文件，包含flink端点用于验证对等方证书的公共CA证书.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.truststore-password&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;解密信任库的秘诀.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.ssl.verify-hostname&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;标记以在ssl握手期间启用对等方的主机名验证.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;网络通讯通过netty&quot;&gt;网络通讯（通过Netty）&lt;/h2&gt;

&lt;p&gt;这些参数允许高级调整.在大型群集上运行并发高吞吐量作业时，默认值就足够了.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.netty.client.&lt;br /&gt;connectTimeoutSec&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
      &lt;td&gt;Netty客户端连接超时.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.netty.client.&lt;br /&gt;numThreads&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;Netty客户端线程的数量.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.netty.num-arenas&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;Netty竞技场的数量.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.netty.&lt;br /&gt;sendReceiveBufferSize&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Netty发送和接收缓冲区大小.这默认为系统缓冲区大小（cat / proc / sys / net / ipv4 / tcp_ [rw] mem），在现代Linux中为4 MiB.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.netty.server.&lt;br /&gt;backlog&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;netty服务器连接积压.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.netty.server.&lt;br /&gt;numThreads&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;Netty服务器线程数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.network.netty.&lt;br /&gt;transport&lt;/td&gt;
      &lt;td&gt;“nio”&lt;/td&gt;
      &lt;td&gt;Netty传输类型，“nio”或“epoll”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;web前端&quot;&gt;Web前端&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;web.access-control-allow-origin&lt;/td&gt;
      &lt;td&gt;“*”&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.address&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.backpressure.cleanup-interval&lt;/td&gt;
      &lt;td&gt;600000&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.backpressure.delay-between-samples&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.backpressure.num-samples&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.backpressure.refresh-interval&lt;/td&gt;
      &lt;td&gt;60000&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.checkpoints.history&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.history&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.log.path&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.refresh-interval&lt;/td&gt;
      &lt;td&gt;3000&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.ssl.enabled&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.submit.enable&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.timeout&lt;/td&gt;
      &lt;td&gt;10000&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.tmpdir&lt;/td&gt;
      &lt;td&gt;System.getProperty（ “java.io.tmpdir”）&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web.upload.dir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;文件系统&quot;&gt;文件系统&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;fs.default-scheme&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;默认文件系统方案，用于未明确声明方案的路径.可能包含权限，例如，在HDFS NameNode的情况下为host：port.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fs.output.always-create-directory&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;以大于1的并行度运行的文件编写器为输出文件路径创建目录，并将不同的结果文件（每个并行编写器任务一个）放入该目录中.如果此选项设置为“true”，则并行度为1的编写器也将创建一个目录并将单个结果文件放入其中.如果该选项设置为“false”，则编写器将直接在输出路径上直接创建文件，而不创建包含目录.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fs.overwrite-files&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;指定默认情况下文件输出编写器是否应覆盖现有文件.设置为“true”以默认覆盖，否则设置为“false”.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;编译优化&quot;&gt;编译/优化&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;compiler.delimited-informat.max-line-samples&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;编译器为分隔输入采用的最大行样本数.样本用于估计记录数.可以使用输入格式的参数覆盖特定输入的此值.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;compiler.delimited-informat.max-sample-len&lt;/td&gt;
      &lt;td&gt;2097152&lt;/td&gt;
      &lt;td&gt;编译器用于分隔输入的行样本的最大长度.如果单个样本的长度超过此值（可能是因为解析器配置错误），则取样将中止.可以使用输入格式的参数覆盖特定输入的此值.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;compiler.delimited-informat.min-line-samples&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;编译器为分隔输入采用的最小行样本数.样本用于估计记录数.可以使用输入格式的参数覆盖特定输入的此值&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;运行时算法&quot;&gt;运行时算法&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.runtime.hashjoin-bloom-filters&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;用于在混合散列连接实现中激活/停用bloom过滤器的标志.如果散列连接需要溢出到磁盘（数据集大于保存的内存部分），这些布隆过滤器可以大大Reduce溢出记录的数量，但需要花费一些CPU周期.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.runtime.max-fan&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
      &lt;td&gt;外部合并的最大扇入连接和扇出用于溢出哈希表.限制每个 算子的文件句柄数，但如果设置得太小，可能会导致中间合并/分区.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.runtime.sort-spilling-threshold&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
      &lt;td&gt;当这部分内存预算已满时，排序 算子操作开始溢出.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;resource-manager&quot;&gt;Resource Manager&lt;/h2&gt;

&lt;p&gt;本节中的配置键独立于使用的资源管理框架（YARN，Mesos，Standalone，…）&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;containerized.heap-cutoff-min&lt;/td&gt;
      &lt;td&gt;600&lt;/td&gt;
      &lt;td&gt;作为安全边际，要在容器中删除的最小堆内存量.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;containerized.heap-cutoff-ratio&lt;/td&gt;
      &lt;td&gt;0.25&lt;/td&gt;
      &lt;td&gt;要从容器中删除的堆空间百分比（YARN / Mesos），以补偿其他JVM内存使用情况.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;local.number-resourcemanager&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;resourcemanager.job.timeout&lt;/td&gt;
      &lt;td&gt;“5m”&lt;/td&gt;
      &lt;td&gt;没有TaskManager作为Leader的工作超时.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;resourcemanager.rpc.port&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;定义要连接的网络端口以与资源管理器进行通信.默认情况下，JobManager的端口，因为使用了相同的ActorSystem.无法使用此配置键定义端口范围.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;resourcemanager.taskmanager-timeout&lt;/td&gt;
      &lt;td&gt;30000&lt;/td&gt;
      &lt;td&gt;释放空闲TaskManager的超时.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;yarn&quot;&gt;YARN&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;yarn.application-attempts&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;ApplicationMaster重启次数.请注意，整个Flink群集将重新启动，YARN客户端将断开连接.此外，JobManager地址将更改，您需要手动设置JM主机：port.建议将此选项保存为1.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yarn.application-master.port&lt;/td&gt;
      &lt;td&gt;“0”&lt;/td&gt;
      &lt;td&gt;使用此配置选项，用户可以为Application Master（和JobManager）RPC端口指定端口，一系列端口或端口列表.默认情况下，我们建议使用默认值（0）让 算子操作系统选择适当的端口.特别是当多个AM在同一物理主机上运行时，固定端口分配会阻止AM启动.例如，在具有限制性防火墙的环境中在YARN上运行Flink时，此选项允许指定一系列允许的端口.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yarn.appmaster.rpc.address&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;应用程序主RPC系统正在侦听的主机名或地址.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yarn.appmaster.rpc.port&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;应用程序主RPC系统正在侦听的端口.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yarn.containers.vcores&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;每个YARN容器的虚拟核心数（vcores）.默认情况下，vcores的数量设置为每个TaskManager的插槽数（如果已设置），或者设置为1，否则设置为1.为了使用此参数，您的群集必须启用CPU调度.您可以通过设置来完成此 算子操作&lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yarn.heartbeat-delay&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;使用ResourceManager的心跳之间的时间，以秒为单位.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yarn.maximum-failed-containers&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;系统在发生故障时将重新分配的最大容器数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yarn.per-job-cluster.include-user-jar&lt;/td&gt;
      &lt;td&gt;“ORDER”&lt;/td&gt;
      &lt;td&gt;定义用户jar是否包含在每个作业集群的系统类路径中以及它们在路径中的位置.它们可以位于开头（“FIRST”），末尾（“LAST”），或者根据其名称（“ORDER”）定位.将此参数设置为“DISABLED”会导致jar包含在用户类路径中.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yarn.properties-file.location&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;将Flink作业提交给YARN时，JobManager的主机和可用处理槽的数量将写入属性文件，以便Flink客户端能够选择这些详细信息.此配置参数允许更改该文件的默认位置（例如，对于在用户之间共享Flink安装的环境）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yarn.tags&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;要应用于Flink YARN应用程序的以逗号分隔的标记列表.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;mesos&quot;&gt;Mesos&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.failover-timeout&lt;/td&gt;
      &lt;td&gt;604800&lt;/td&gt;
      &lt;td&gt;Mesos调度程序的故障转移超时（以秒为单位），之后将自动关闭正在运行的任务.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.initial-tasks&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;最初的工人在主人开始时提出来.除非Flink处于&lt;a href=&quot;https://flink.lantingmeeting.com/ops/config.html#legacy&quot;&gt;传统模式，&lt;/a&gt;否则将忽略此选项.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.master&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;Mesos主URL.该值应采用以下形式之一：主持人：portZK：//主机1：端口1，主机2：端口2，… /路径ZK：//用户名：密码@主机1：端口1，主机2：端口2，… /路径文件：///路径/到/文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.maximum-failed-tasks&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;群集失败前失败的最大工作数.可以设置为-1以禁用此函数.除非Flink处于&lt;a href=&quot;https://flink.lantingmeeting.com/ops/config.html#legacy&quot;&gt;传统模式，&lt;/a&gt;否则将忽略此选项.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.&lt;br /&gt;artifactserver.port&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;config参数定义要使用的Mesos工件服务器端口.将端口设置为0将允许 算子操作系统选择可用端口.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.&lt;br /&gt;artifactserver.ssl.enabled&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;为Flink工件服务器启用SSL.请注意，security.ssl.enabled也需要设置为true加密才能启用加密.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.&lt;br /&gt;framework.name&lt;/td&gt;
      &lt;td&gt;“Flink”&lt;/td&gt;
      &lt;td&gt;Mesos框架名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.&lt;br /&gt;framework.principal&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;Mesos框架主体&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.&lt;br /&gt;framework.role&lt;/td&gt;
      &lt;td&gt;“*”&lt;/td&gt;
      &lt;td&gt;Mesos框架角色定义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.&lt;br /&gt;framework.secret&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;Mesos框架密钥&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.&lt;br /&gt;framework.user&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;Mesos框架用户&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.port-assignments&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;以逗号分隔的配置键列表，表示可配置端口.所有端口Keys将动态获取通过Mesos分配的端口.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;mesos-taskmanager&quot;&gt;Mesos TaskManager&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.constraints.hard.hostattribute&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;基于代理属性在Mesos上放置任务的约束.采用逗号分隔的键：值对列表，对应于目标介质代理公开的属性.示例：az：eu-west-1a，系列：t2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.&lt;br /&gt;bootstrap-cmd&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;在TaskManager启动之前执行的命令.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.&lt;br /&gt;container.docker.force-pull-image&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;指示docker containerizer强制拉动镜像，而不是重用缓存版本.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.&lt;br /&gt;container.docker.parameters&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;使用docker容器时，要传递给docker run命令的自定义参数.逗号分隔的“key = value”对列表.“值”可能包含“=”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.&lt;br /&gt;container.image.name&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;用于容器的映像名称.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.&lt;br /&gt;container.type&lt;/td&gt;
      &lt;td&gt;“mesos”&lt;/td&gt;
      &lt;td&gt;使用的集装箱类型：“mesos”或“docker”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.&lt;br /&gt;container.volumes&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;逗号分隔的[host_path：] container_path [：RO | RW]列表.这允许将额外的卷安装到容器中.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.cpus&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;要分配给Mesos工作者的CPU.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.gpus&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;要分配给Mesos工作者的GPU.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.hostname&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;用于定义TaskManager主机名的可选值.模式_TASK_由Mesos任务的实际ID替换.这可用于配置TaskManager以使用Mesos DNS（例如_TASK_.flink-service.mesos）进行名称查找.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.mem&lt;/td&gt;
      &lt;td&gt;1024&lt;/td&gt;
      &lt;td&gt;要以MB为单位分配给Mesos worker的内存.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.&lt;br /&gt;taskmanager-cmd&lt;/td&gt;
      &lt;td&gt;“$FLINK_HOME/bin/mesos-taskmanager.sh”&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesos.resourcemanager.tasks.uris&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;以逗号分隔的自定义工件URI列表，这些URI将下载到Mesos工作者的沙箱中.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.numberOfTaskSlots&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;单个TaskManager可以运行的并行算子或用户函数实例的数量.如果此值大于1，则单个TaskManager将获取函数或 算子的多个实例.这样，TaskManager可以使用多个CPU内核，但同时，可用内存在不同的算子或函数实例之间划分.此值通常与TaskManager的计算机具有的物理CPU核心数成比例（例如，等于核心数，或核心数的一半）.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;高可用性ha&quot;&gt;高可用性（HA）&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability&lt;/td&gt;
      &lt;td&gt;“NONE”&lt;/td&gt;
      &lt;td&gt;定义用于群集执行的高可用性模式.要启用高可用性，请将此模式设置为“ZOOKEEPER”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.cluster-id&lt;/td&gt;
      &lt;td&gt;“/default”&lt;/td&gt;
      &lt;td&gt;Flink集群的ID，用于将多个Flink集群彼此分开.需要为独立群集设置，但在YARN和Mesos中自动推断.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.job.delay&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;故障转移后JobManager之前的时间恢复当前作业.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.jobmanager.port&lt;/td&gt;
      &lt;td&gt;“0”&lt;/td&gt;
      &lt;td&gt;JobManager在高可用性模式下使用的可选端口（范围）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.storageDir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;文件系统路径（URI）Flink在高可用性设置中持久保存元数据.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;基于zookeeper的ha模式&quot;&gt;基于ZooKeeper的HA模式&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.client.acl&lt;/td&gt;
      &lt;td&gt;“open”&lt;/td&gt;
      &lt;td&gt;定义要在ZK节点上配置的ACL（open | creator）.如果ZooKeeper服务器配置将“authProvider”属性映射为使用SASLAuthenticationProvider并且群集配置为以安全模式（Kerberos）运行，则可以将配置值设置为“creator”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.client.&lt;br /&gt;connection-timeout&lt;/td&gt;
      &lt;td&gt;15000&lt;/td&gt;
      &lt;td&gt;定义ZooKeeper的连接超时（以ms为单位）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.client.max-retry-attempts&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;定义客户端放弃之前的连接重试次数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.client.retry-wait&lt;/td&gt;
      &lt;td&gt;5000&lt;/td&gt;
      &lt;td&gt;定义以ms为单位的连续重试之间的暂停.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.client.session-timeout&lt;/td&gt;
      &lt;td&gt;60000&lt;/td&gt;
      &lt;td&gt;以ms为单位定义ZooKeeper会话的会话超时.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.path.&lt;br /&gt;checkpoint-counter&lt;/td&gt;
      &lt;td&gt;“/checkpoint-counter”&lt;/td&gt;
      &lt;td&gt;ZooKeeper根路径（ZNode）用于检查点计数器.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.path.&lt;br /&gt;checkpoints&lt;/td&gt;
      &lt;td&gt;“/checkpoints”&lt;/td&gt;
      &lt;td&gt;已完成检查点的ZooKeeper根路径（ZNode）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.path.jobgraphs&lt;/td&gt;
      &lt;td&gt;“/jobgraphs”&lt;/td&gt;
      &lt;td&gt;作业图的ZooKeeper根路径（ZNode）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.path.latch&lt;/td&gt;
      &lt;td&gt;“/leaderlatch”&lt;/td&gt;
      &lt;td&gt;定义用于选择Leader的Leader锁存器的znode.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.path.leader&lt;/td&gt;
      &lt;td&gt;“/leader”&lt;/td&gt;
      &lt;td&gt;定义Leader的znode，其中包含Leader的URL和当前Leader会话ID.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.path.&lt;br /&gt;mesos-workers&lt;/td&gt;
      &lt;td&gt;“/mesos-workers”&lt;/td&gt;
      &lt;td&gt;ZooKeeper根路径，用于保存Mesos工作者信息.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.path.root&lt;/td&gt;
      &lt;td&gt;“/flink”&lt;/td&gt;
      &lt;td&gt;Flink在ZooKeeper中存储其条目的根路径.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.path.&lt;br /&gt;running-registry&lt;/td&gt;
      &lt;td&gt;“/running_job_registry/”&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;high-availability.zookeeper.quorum&lt;/td&gt;
      &lt;td&gt;（none）&lt;/td&gt;
      &lt;td&gt;使用ZooKeeper在高可用性模式下运行Flink时要使用的ZooKeeper quorum.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;zookeeper安全&quot;&gt;ZooKeeper安全&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;zookeeper.sasl.disable&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zookeeper.sasl.login-context-name&lt;/td&gt;
      &lt;td&gt;“Client”&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zookeeper.sasl.service-name&lt;/td&gt;
      &lt;td&gt;“zookeeper”&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;基于kerberos的安全性&quot;&gt;基于Kerberos的安全性&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;security.kerberos.login.contexts&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;以逗号分隔的登录上下文列表，用于提供Kerberos凭据（例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;Client，KafkaClient&lt;/code&gt;使用凭证进行ZooKeeper身份验证和Kafka身份验证）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.kerberos.login.keytab&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;包含用户凭据的KerberosKeys表文件的绝对路径.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.kerberos.login.principal&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;与keytab关联的Kerberos主体名称.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;security.kerberos.login.use-ticket-cache&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;指示是否从Kerberos票证缓存中读取.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;环境&quot;&gt;环境&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;env.hadoop.conf.dir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;hadoop配置目录的路径.需要读取HDFS和/或YARN配置.您也可以通过环境变量进行设置.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;env.java.opts&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;env.java.opts.jobmanager&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;env.java.opts.taskmanager&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;env.log.dir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;定义保存Flink日志的目录.它必须是一条绝对的道路.（默认为Flink主页下的日志目录）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;env.log.max&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;要保存的最大旧日志文件数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;env.ssh.opts&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;启动或停止JobManager，TaskManager和Zookeeper服务时，其他命令行选项传递给SSH客户端（start-cluster.sh，stop-cluster.sh，start-zookeeper-quorum.sh，stop-zookeeper-quorum.sh）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;env.yarn.conf.dir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;YARN配置目录的路径.它需要在YARN上运行flink.您也可以通过环境变量进行设置.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;检查点&quot;&gt;检查点&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;state.backend&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;状态后台用于存储和检查点状态.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state.backend.async&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;选择状态后台是否应在可能和可配置的情况下使用异步SNAPSHOT方法.某些状态后台可能不支持异步SNAPSHOT，或者仅支持异步SNAPSHOT，并忽略此选项.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state.backend.fs.memory-threshold&lt;/td&gt;
      &lt;td&gt;1024&lt;/td&gt;
      &lt;td&gt;状态数据文件的最小大小.小于该值的所有状态块都内联存储在根检查点元数据文件中.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state.backend.incremental&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;如果可能，选择状态后台是否应创建增量检查点.对于增量检查点，仅存储来自先前检查点的差异，而不是完整的检查点状态.某些状态后台可能不支持增量检查点并忽略此选项.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state.backend.local-recovery&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state.checkpoints.dir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;用于在Flink支持的文件系统中存储检查点的数据文件和元数据的默认目录.必须可以从所有参与的进程/节点（即所有TaskManagers和JobManagers）访问存储路径.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state.checkpoints.num-retained&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;要保存的已完成检查点的最大数量.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state.savepoints.dir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;保存点的默认目录.由将后台写入文件系统的状态后台（MemoryStateBackend，FsStateBackend，RocksDBStateBackend）使用.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;taskmanager.state.local.root-dirs&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;可查询状态&quot;&gt;可查询状态&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;query.client.network-threads&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;网络数（Netty的事件循环）可查询状态客户端的线程.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;query.proxy.network-threads&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;网络数（Netty的事件循环）可查询状态代理的线程.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;query.proxy.ports&lt;/td&gt;
      &lt;td&gt;“9069”&lt;/td&gt;
      &lt;td&gt;可查询状态代理的端口范围.指定范围可以是单个端口：“9123”，一系列端口：“50100-50200”，或范围和端口列表：“50100-50200,50300-50400,51234”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;query.proxy.query-threads&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;可查询状态代理的查询线程数.如果设置为0，则使用插槽数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;query.server.network-threads&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;网络数（Netty的事件循环）可查询状态服务器的线程.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;query.server.ports&lt;/td&gt;
      &lt;td&gt;“9067”&lt;/td&gt;
      &lt;td&gt;可查询状态服务器的端口范围.指定范围可以是单个端口：“9123”，一系列端口：“50100-50200”，或范围和端口列表：“50100-50200,50300-50400,51234”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;query.server.query-threads&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;可查询状态服务器的查询线程数.如果设置为0，则使用插槽数.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;度量&quot;&gt;度量&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.latency.granularity&lt;/td&gt;
      &lt;td&gt;“operator”&lt;/td&gt;
      &lt;td&gt;定义延迟指标的粒度.可接受的值是：单一 - 跟踪延迟，无需区分源和子任务.operator - 跟踪延迟，同时区分源，但不区分子任务.子任务 - 在区分源和子任务时跟踪延迟.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.latency.history-size&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
      &lt;td&gt;定义每个算子维护的测量延迟数.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.latency.interval&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;定义从源发出延迟跟踪标记的间隔.如果设置为0或负值，则禁用延迟跟踪.启用此函数会显着影响群集的性能.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.reporter.&lt;name&gt; .&lt;parameter&gt;&lt;/parameter&gt;&lt;/name&gt;&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;为名为&lt;name&gt;的报告器配置参数&lt;parameter&gt;.&lt;/parameter&gt;&lt;/name&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.reporter.&lt;name&gt;.class&lt;/name&gt;&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;报告类用于为报告命名&lt;name&gt;.&lt;/name&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.reporter.&lt;name&gt;.interval&lt;/name&gt;&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;报告间隔用于报告名为&lt;name&gt;.&lt;/name&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.reporters&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.scope.delimiter&lt;/td&gt;
      &lt;td&gt;“”&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.scope.jm&lt;/td&gt;
      &lt;td&gt;“&lt;host&gt; .jobmanager”&lt;/host&gt;&lt;/td&gt;
      &lt;td&gt;定义应用于作用于JobManager的所有度量标准的范围格式字符串.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.scope.jm.job&lt;/td&gt;
      &lt;td&gt;“&lt;host&gt; .jobmanager.&lt;job_name&gt;”&lt;/job_name&gt;&lt;/host&gt;&lt;/td&gt;
      &lt;td&gt;定义范围格式字符串，该字符串应用于作用于JobManager上作业的所有度量标准.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.scope.operator&lt;/td&gt;
      &lt;td&gt;“&lt;host&gt; .taskmanager.&lt;tm_id&gt; &lt;job_name&gt; &lt;operator_name&gt; &lt;subtask_index&gt;”&lt;/subtask_index&gt;&lt;/operator_name&gt;&lt;/job_name&gt;&lt;/tm_id&gt;&lt;/host&gt;&lt;/td&gt;
      &lt;td&gt;定义应用于作用于 算子的所有度量标准的范围格式字符串.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.scope.task&lt;/td&gt;
      &lt;td&gt;“&lt;host&gt; .taskmanager.&lt;tm_id&gt; &lt;job_name&gt; &lt;task_name&gt; &lt;subtask_index&gt;”&lt;/subtask_index&gt;&lt;/task_name&gt;&lt;/job_name&gt;&lt;/tm_id&gt;&lt;/host&gt;&lt;/td&gt;
      &lt;td&gt;定义应用于作用于任务的所有度量标准的范围格式字符串.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.scope.tm&lt;/td&gt;
      &lt;td&gt;“&lt;host&gt; .taskmanager.&lt;tm_id&gt;”&lt;/tm_id&gt;&lt;/host&gt;&lt;/td&gt;
      &lt;td&gt;定义应用于作用于TaskManager的所有度量标准的范围格式字符串.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.scope.tm.job&lt;/td&gt;
      &lt;td&gt;“&lt;host&gt; .taskmanager.&lt;tm_id&gt; &lt;job_name&gt;”&lt;/job_name&gt;&lt;/tm_id&gt;&lt;/host&gt;&lt;/td&gt;
      &lt;td&gt;定义范围格式字符串，该字符串应用于作用于TaskManager上作业的所有度量标准.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.system-resource&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics.system-resource-probing-interval&lt;/td&gt;
      &lt;td&gt;5000&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;历史服务器&quot;&gt;历史服务器&lt;/h2&gt;

&lt;p&gt;如果要通过HistoryServer的Web前端显示它们，则必须进行配置&lt;code class=&quot;highlighter-rouge&quot;&gt;jobmanager.archive.fs.dir&lt;/code&gt;以存档已终止的作业并将其添加到受监视目录列表中&lt;code class=&quot;highlighter-rouge&quot;&gt;historyserver.archive.fs.dir&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jobmanager.archive.fs.dir&lt;/code&gt;：将有关已终止作业的信息上载到的目录.您必须将此目录添加到历史服务器的受监视目录列表中&lt;code class=&quot;highlighter-rouge&quot;&gt;historyserver.archive.fs.dir&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;键&lt;/th&gt;
      &lt;th&gt;默认&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;historyserver.archive.fs.dir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;以逗号分隔的目录列表，用于从中获取已归档的作业.历史服务器将监视这些目录以获取已存档的作业.您可以将JobManager配置为通过&lt;code class=&quot;highlighter-rouge&quot;&gt;jobmanager.archive.fs.dir&lt;/code&gt;将作业存档到目录.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;historyserver.archive.fs.refresh-interval&lt;/td&gt;
      &lt;td&gt;10000&lt;/td&gt;
      &lt;td&gt;刷新已归档作业目录的时间间隔（以ms为单位）.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;historyserver.web.address&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;HistoryServer的Web界面的地址.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;historyserver.web.port&lt;/td&gt;
      &lt;td&gt;8082&lt;/td&gt;
      &lt;td&gt;HistoryServers的Web界面的端口.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;historyserver.web.refresh-interval&lt;/td&gt;
      &lt;td&gt;10000&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;historyserver.web.ssl.enabled&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;启用对HistoryServer Web前端的HTTP访问.仅当全局SSL标志security.ssl.enabled设置为true时，此选项才适用.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;historyserver.web.tmpdir&lt;/td&gt;
      &lt;td&gt;(none)&lt;/td&gt;
      &lt;td&gt;此配置参数允许定义历史服务器Web界面使用的Flink Web目录.Web界面将其静态文件复制到目录中.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;留存&quot;&gt;留存&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mode&lt;/code&gt;：Flink的执行模式.可能的值是&lt;code class=&quot;highlighter-rouge&quot;&gt;legacy&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;.要启动旧组件，您必须指定&lt;code class=&quot;highlighter-rouge&quot;&gt;legacy&lt;/code&gt;（DEFAULT：）&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;h2 id=&quot;配置网络缓冲区&quot;&gt;配置网络缓冲区&lt;/h2&gt;
&lt;p&gt;如果您看到异常&lt;code class=&quot;highlighter-rouge&quot;&gt;java.io.IOException: Insufficient number of network buffers&lt;/code&gt;，则需要调整用于网络缓冲区的内存量，以便程序在您的TaskManager上运行。&lt;br /&gt;
网络缓冲区是通信层的关键资源.它们用于在通过网络传输之前缓冲记录，并在将传入数据解析为记录并将其传递给应用程序之前缓冲传入数据.足够数量的网络缓冲区对于实现良好的吞吐量至关重要。&lt;br /&gt;
从Flink 1.3开始，你可以遵循“越多越好”的成语而不会对延迟造成任何惩罚（我们通过限制每个通道使用的实际缓冲区数量来防止每个传出和传入通道中的过度缓冲，即&lt;em&gt;缓冲膨胀&lt;/em&gt;） 。&lt;br /&gt;
通常，将TaskManager配置为具有足够的缓冲区，以使您希望同时打开的每个逻辑网络连接都具有专用缓冲区。对于网络上的每个点对点数据交换存在逻辑网络连接，这通常发生在重新分区或广播步骤（混洗阶段）。在那些中，TaskManager中的每个并行任务必须能够与所有其他并行任务进行通信。&lt;br /&gt;
&lt;strong&gt;注意：&lt;/strong&gt;从Flink 1.5开始，网络缓冲区将始终在堆外分配，即在JVM堆之外，而不管其值是多少&lt;code class=&quot;highlighter-rouge&quot;&gt;taskmanager.memory.off-heap&lt;/code&gt;。这样，我们可以将这些缓冲区直接传递给底层网络堆栈层。&lt;/p&gt;

&lt;h3 id=&quot;设置内存分数&quot;&gt;设置内存分数&lt;/h3&gt;
&lt;p&gt;以前，手动设置网络缓冲区的数量，这成为一个非常容易出错的任务（见下文）。从Flink 1.3开始，可以使用以下配置参数定义用于网络缓冲区的一小部分内存：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskmanager.network.memory.fraction&lt;/code&gt;：用于网络缓冲区的JVM内存的分数（DEFAULT：0.1），&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskmanager.network.memory.min&lt;/code&gt;：网络缓冲区的最小内存大小（默认值：64MB），&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskmanager.network.memory.max&lt;/code&gt;：网络缓冲区的最大内存大小（默认值：1GB），&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskmanager.memory.segment-size&lt;/code&gt;：内存管理器和网络堆栈使用的内存缓冲区大小（以字节为单位）（默认值：32KB）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;直接设置网络缓冲区的数量&quot;&gt;直接设置网络缓冲区的数量&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注意：不建议使用&lt;/strong&gt;这种配置网络缓冲区使用的内存量的方法。请考虑使用上述方法定义要使用的内存部分。&lt;br /&gt;
缓冲器的上一个TaskManager所要求数量为 &lt;em&gt;总度的平行度&lt;/em&gt;（数的目标）* &lt;em&gt;节点内并行性&lt;/em&gt;（源在一个TaskManager数）× &lt;em&gt;N&lt;/em&gt; 与 &lt;em&gt;N&lt;/em&gt; 是限定多少repartitioning-恒定/您希望同时处于活动状态的广播步骤。由于&lt;em&gt;节点内并行&lt;/em&gt;性通常是核心数量，并且超过4个重新分区或广播频道很少并行活动，因此它经常归结为&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#slots-per-TM^2 * #TMs * 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;哪里&lt;code class=&quot;highlighter-rouge&quot;&gt;#slots per TM&lt;/code&gt;是&lt;a href=&quot;https://flink.lantingmeeting.com/ops/config.html#configuring-taskmanager-processing-slots&quot;&gt;每个TaskManager插槽数量&lt;/a&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;#TMs&lt;/code&gt;是TaskManager的总数。&lt;br /&gt;
例如，为了支持20个8插槽机器的集群，您应该使用大约5000个网络缓冲区来获得最佳吞吐量。&lt;br /&gt;
默认情况下，每个网络缓冲区的大小为32 KiBytes.在上面的示例中，系统因此将为网络缓冲区分配大约300 MiBytes。&lt;br /&gt;
可以使用以下参数配置网络缓冲区的数量和大小：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskmanager.network.numberOfBuffers&lt;/code&gt;，&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskmanager.memory.segment-size&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;配置临时i--o目录&quot;&gt;配置临时I / O目录&lt;/h2&gt;
&lt;p&gt;虽然Flink的目标是尽可能多地处理主内存中的数据，但是需要处理的内存比内存更多的数据并不少见。Flink的运行时用于将临时数据写入磁盘以处理这些情况。&lt;br /&gt;
该&lt;code class=&quot;highlighter-rouge&quot;&gt;taskmanager.tmp.dirs&lt;/code&gt;参数指定Flink写入临时文件的目录列表.目录的路径需要用’：’（冒号字符）分隔.Flink将同时向（从）每个配置的目录写入（或读取）一个临时文件.这样，临时I / O可以均匀地分布在多个独立的I / O设备（如硬盘）上，以提高性能.要利用快速I / O设备（例如，SSD，RAID，NAS），可以多次指定目录。&lt;br /&gt;
如果&lt;code class=&quot;highlighter-rouge&quot;&gt;taskmanager.tmp.dirs&lt;/code&gt;未显式指定参数，Flink会将临时数据写入 算子操作系统的临时目录，例如Linux系统中的&lt;em&gt;/ tmp&lt;/em&gt;。&lt;/p&gt;

&lt;h2 id=&quot;配置taskmanager处理槽&quot;&gt;配置TaskManager处理槽&lt;/h2&gt;
&lt;p&gt;Flink通过将程序拆分为子任务并将这些子任务调度到处理槽来并行执行程序。&lt;br /&gt;
每个Flink TaskManager都在集群中提供处理插槽.插槽数通常与&lt;strong&gt;每个&lt;/strong&gt; TaskManager 的可用CPU核心数成比例.作为一般建议，可用的CPU核心数量是一个很好的默认值&lt;code class=&quot;highlighter-rouge&quot;&gt;taskmanager.numberOfTaskSlots&lt;/code&gt;。&lt;br /&gt;
启动Flink应用程序时，用户可以提供用于该作业的默认插槽数.因此调用命令行值&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;（用于并行）.此外，可以为整个应用程序和各个算子&lt;a href=&quot;https://flink.lantingmeeting.com/dev/parallel.html&quot;&gt;设置编程API中的插槽数&lt;/a&gt;。&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-17-flink配置-slots_parallelism.png?raw=true&quot; alt=&quot;2018-10-17-flink配置-slots_parallelism&quot; /&gt;&lt;/p&gt;</content><author><name>叶子  ( ˘ ³˘)♥</name></author><category term="Flink" /><summary type="html">本文所用flink版本为V1.7-SNAPSHOT，官网翻译转载，转载地址：配置-https://flink.lantingmeeting.com/ops/config.html#legacy，官方文档原文Configuration。 对于单节点设置，Flink已准备好开箱即用，您无需更改默认配置即可开始使用。 开箱即用的配置将使用您的默认Java安装.您可以手动设置环境变量JAVA_HOME或配置项env.java.home中conf/flink-conf.yaml，如果你想手动覆盖Java运行时使用。 此页面列出了设置性能良好（分布式）安装通常所需的最常用选项。此外，此处还列出了所有可用配置参数的完整列表。 所有配置都已完成conf/flink-conf.yaml，预计将是具有格式的YAML键值对的扁平集合key: value。 系统和运行脚本在启动时解析配置。对配置文件的更改需要重新启动Flink JobManager和TaskManagers。 TaskManagers的配置文件可能不同，Flink不承担集群中的统一机器。 常见选项 键 默认 描述 jobmanager.heap.size “1024m” JobManager的JVM堆大小. taskmanager.heap.size “1024m” TaskManagers的JVM堆大小，它是系统的并行工作者.在YARN设置中，此值自动配置为TaskManager的YARN容器的大小，减去一定的容差值. parallelism.default 1   taskmanager.numberOfTaskSlots 1 单个TaskManager可以运行的并行算子或用户函数实例的数量.如果此值大于1，则单个TaskManager将获取函数或 算子的多个实例.这样，TaskManager可以使用多个CPU内核，但同时，可用内存在不同的算子或函数实例之间划分.此值通常与TaskManager的计算机具有的物理CPU核心数成比例（例如，等于核心数，或核心数的一半）. state.backend (none) 状态后台用于存储和检查点状态. state.checkpoints.dir (none) 用于在Flink支持的文件系统中存储检查点的数据文件和元数据的默认目录.必须可以从所有参与的进程/节点（即所有TaskManagers和JobManagers）访问存储路径. state.savepoints.dir (none) 保存点的默认目录.由将后台写入文件系统的状态后台（MemoryStateBackend，FsStateBackend，RocksDBStateBackend）使用. high-availability “no / not” 定义用于群集执行的高可用性模式.要启用高可用性，请将此模式设置为“ZOOKEEPER”. high-availability.storageDir (none) 文件系统路径（URI）Flink在高可用性设置中持久保存元数据. security.ssl.internal.enabled false 打开SSL以进行内部网络通信.可选地，特定组件可以通过它们自己的设置（rpc，数据传输，REST等）覆盖它. security.ssl.rest.enabled false 通过REST端点打开SSL以进行外部通信. 完整参考 HDFS 注意:不推荐使用这些Keys，建议使用环境变量配置Hadoop路径HADOOP_CONF_DIR。 这些参数配置Flink使用的默认HDFS。未指定HDFS配置的设置必须指定HDFS文件的完整路径（hdfs://address:port/path/to/files）文件也将使用默认HDFS参数（块大小，复制因子）编写。 fs.hdfs.hadoopconf：Hadoop文件系统（HDFS）配置目录的绝对路径（可选值）。指定此值允许程序使用短URI引用HDFS文件（hdfs:///path/to/files不包括文件URI中NameNode的地址和端口）。如果没有此选项，则可以访问HDFS文件，但需要完全限定的URI hdfs://address:port/path/to/files。此选项还会导致文件编写者获取HDFS的块大小和复制因子的默认值。Flink将在指定目录中查找“core-site.xml”和“hdfs-site.xml”文件。 fs.hdfs.hdfsdefault：Hadoop自己的配置文件“hdfs-default.xml”的绝对路径（DEFAULT：null）。 fs.hdfs.hdfssite：Hadoop自己的配置文件“hdfs-site.xml”的绝对路径（DEFAULT：null）。 核心 键 默认 描述 classloader.parent-first-patterns.additional (none) 一个（以分号分隔的）模式列表，指定应始终首先通过父ClassLoader解析哪些类.模式是一个简单的前缀，它根据完全限定的类名进行检查.这些模式附加到“classloader.parent-first-patterns.default”. classloader.parent-first-patterns.default “java .; scala .; org.apache.flink .; com.esotericsoftware.kryo; org.apache.hadoop .; javax.annotation .; org.slf4j; org.apache.log4j; org.apache.logging; org. apache.commons.logging; ch.qos.logback“ 一个（以分号分隔的）模式列表，指定应始终首先通过父ClassLoader解析哪些类.模式是一个简单的前缀，它根据完全限定的类名进行检查.通常不应修改此设置.要添加其他模式，我们建议使用“classloader.parent-first-patterns.additional”. classloader.resolve-order “child-first” 从用户代码加载类时定义类解析策略，这意味着是首先检查用户代码jar（“child-first”）还是应用程序类路径（“parent-first”）.默认设置指示首先从用户代码jar加载类，这意味着用户代码jar可以包含和加载不同于Flink使用的（依赖）依赖项. io.tmp.dirs YARN上的’LOCAL_DIRS’.Mesos上的’_FLINK_TMP_DIR’.独立的System.getProperty（“java.io.tmpdir”）.   mode “new” 切换到选择执行模式.可能的值为“new”和“legacy”. parallelism.default 1   JobManager 键 默认 描述 jobmanager.archive.fs.dir (none)   jobmanager.execution.attempts-history-size 16 历史记录中保存的最大执行尝试次数. jobmanager.execution.failover-strategy “full” 此选项指定作业计算如何从任务失败中恢复.可接受的值是：’full’：重新启动所有任务.’individual’：仅重新启动失败的任务.仅当所有任务都是独立组件时才应使用.’region’：重新启动可能受任务失败影响的所有任务. jobmanager.heap.size “1024m” JobManager的JVM堆大小. jobmanager.resourcemanager.reconnect-interval 2000 此选项指定在与资源管理器的连接丢失时触发资源管理器重新连接的时间间隔.此选项仅供内部使用. jobmanager.rpc.address (none) config参数定义要连接的网络地址以与JobManager进行通信.此值仅在具有静态名称或地址的单个JobManager存在的设置中解释（简单的独立设置或具有动态服务名称解析的容器设置）.当使用Leader选举服务（如ZooKeeper）从潜在的多个Slave JobManagers中选择和发现JobManagerLeader时，它不会在许多高可用性设置中使用. jobmanager.rpc.port 6123 config参数定义要连接的网络端口以与JobManager进行通信.与jobmanager.rpc.address一样，此值仅在设置中解释，其中存在具有静态名称/地址和端口的单个JobManager（简单的独立设置或具有动态服务名称解析的容器设置）.当使用Leader选举服务（如ZooKeeper）从潜在的多个Slave JobManagers中选择和发现JobManagerLeader时，此配置选项不会用于许多高可用性设置. jobstore.cache-size 52428800 作业存储缓存大小（以字节为单位），用于将已完成的作业保存在内存中. jobstore.expiration-time 3600 完成作业到期并从作业库中清除的时间（以秒为单位）. slot.idle.timeout 50000 Slot Pool中空闲槽的超时时间（以ms为单位）. slot.request.timeout 300000 从Slot Pool请求插槽的超时（以ms为单位）. TaskManager 键 默认 描述 task.cancellation.interval 30000 两次连续任务取消尝试之间的时间间隔（以ms为单位）. task.cancellation.timeout 180000 超时（以ms为单位），在此之后任务取消超时并导致致命的TaskManager错误.值为0将禁用看门狗. task.cancellation.timers.timeout 7500   task.checkpoint.alignment.max-size -1 检查点对齐可以缓冲的最大字节数.如果检查点对齐缓冲超过配置的数据量，则中止检查点（跳过）.值-1表示没有限制. taskmanager.data.port 0 TaskManager的端口用于数据交换 算子操作. taskmanager.data.ssl.enabled true 为taskmanager数据传输启用SSL支持.仅当内部SSL的全局标志（security.ssl.internal.enabled）设置为true时，此选项才适用 taskmanager.debug.memory.log false 指示是否启动线程的标志，该线程重复记录JVM的内存使用情况. taskmanager.debug.memory.log-interval 5000 日志线程记录当前内存使用情况的时间间隔（以ms为单位）. taskmanager.exit-on-fatal-akka-error false 是否应启动TaskManager的隔离监视器.如果隔离监视器检测到它已隔离另一个actor系统或者它已被另一个actor系统隔离，则会关闭该actor系统. taskmanager.heap.size “1024m” TaskManagers的JVM堆大小，它是系统的并行工作者.在YARN设置中，此值自动配置为TaskManager的YARN容器的大小，减去一定的容差值. taskmanager.host (none) TaskManager绑定到的网络接口的主机名.默认情况下，TaskManager搜索可以连接到JobManager和其他TaskManagers的网络接口.如果该策略由于某种原因失败，则此选项可用于定义主机名.由于不同的TaskManagers需要此选项的不同值，因此通常在其他非共享的特定于TaskManager的配置文件中指定. taskmanager.jvm-exit-on-oom false 是否在任务线程抛出OutOfMemoryError时终止TaskManager. taskmanager.memory.fraction 0.7 TaskManager为排序，哈希表和中间结果的缓存预留的相对内存量（在减去网络缓冲区使用的内存量之后）.例如，值“0.8”表示TaskManager为内部数据缓冲区保存80％的内存，为TaskManager的堆留下20％的可用内存，用于由用户定义的函数创建的对象.仅当未设置taskmanager.memory.size时，才会评估此参数. taskmanager.memory.off-heap false 内存分配方法（JVM堆或堆外），用于TaskManager的托管内存以及网络缓冲区. taskmanager.memory.preallocate false 在TaskManager启动时是否应预先分配TaskManager托管内存. taskmanager.memory.segment-size “32KB” 网络堆栈和内存管理器使用的内存缓冲区的大小. taskmanager.memory.size “0” TaskManager的内存管理器分配的内存量.如果未设置，将分配相对分数. taskmanager.network.detailed-metrics false 布尔标志，用于启用/禁用有关入站/出站网络队列长度的更详细指标. taskmanager.network.memory.buffers-per-channel 2 每个传出/传入通道（子分区/输入通道）使用的最大网络缓冲区数.在基于信用的流量控制模式下，这表示每个输入通道中有多少信用.它应配置至少2以获得良好的性能.1个缓冲区用于接收子分区中的飞行中数据，1个缓冲区用于并行序列化. taskmanager.network.memory.floating-buffers-per-gate 8 每个输出/输入门（结果分区/输入门）使用的额外网络缓冲区数.在基于信用的流量控制模式中，这表示在所有输入通道之间共享多少浮动信用.浮动缓冲区基于积压（子分区中的实时输出缓冲区）反馈来分布，并且可以帮助减轻由子分区之间的不平衡数据分布引起的背压.如果节点之间的往返时间较长和/或群集中的机器数量较多，则应增加此值. taskmanager.network.memory.fraction 0.1 用于网络缓冲区的JVM内存的分数.这决定了TaskManager可以同时拥有多少流数据交换通道以及通道缓冲的程度.如果作业被拒绝或者您收到系统没有足够缓冲区的警告，请增加此值或下面的最小/最大值.另请注意，“taskmanager.network.memory.min”和“taskmanager.network.memory.max”可能会覆盖此分数. taskmanager.network.memory.max “1GB” 网络缓冲区的最大内存大小. taskmanager.network.memory.min “64MB” 网络缓冲区的最小内存大小. taskmanager.network.request-backoff.initial 100 输入通道的分区请求的最小退避. taskmanager.network.request-backoff.max 10000 输入通道的分区请求的最大退避. taskmanager.numberOfTaskSlots 1 单个TaskManager可以运行的并行算子或用户函数实例的数量.如果此值大于1，则单个TaskManager将获取函数或 算子的多个实例.这样，TaskManager可以使用多个CPU内核，但同时，可用内存在不同的算子或函数实例之间划分.此值通常与TaskManager的计算机具有的物理CPU核心数成比例（例如，等于核心数，或核心数的一半）. taskmanager.registration.initial-backoff “500ms” 两次连续注册尝试之间的初始注册退避.每次新注册尝试的退避加倍，直到达到最大注册退避. taskmanager.registration.max-backoff “30s” 两次连续注册尝试之间的最大注册退避.最大注册退避需要时间单位指定符（ms / s / min / h / d）. taskmanager.registration.refused-backoff “10s” 注册后的退避已被作业管理员拒绝，然后重试连接. taskmanager.registration.timeout “5m” 定义TaskManager注册的超时.如果在未成功注册的情况下超过持续时间，则TaskManager将终止. taskmanager.rpc.port “0” TaskManager的IPC端口.接受端口列表（“50100,50101”），范围（“50100-50200”）或两者的组合.建议在同一台计算机上运行多个TaskManagers时设置一系列端口以避免冲突. 分布式协调（通过Akka） 键 默认 描述 akka.ask.timeout “10s” 超时用于所有期货并阻止Akka通话.如果Flink由于超时而失败，那么您应该尝试增加此值.超时可能是由于机器速度慢或网络拥挤造成的.超时值需要时间单位指定符（ms / s / min / h / d）. akka.client-socket-worker-pool.pool-size-factor 1.0 池大小因子用于使用以下公式确定线程池大小：ceil（可用处理器*因子）.然后，结果大小由pool-size-min和pool-size-max值限制. akka.client-socket-worker-pool.pool-size-max 2 将基于因子的数量限制为的最大线程数. akka.client-socket-worker-pool.pool-size-min 1 将基于因子的数量限制为的最小线程数. akka.client.timeout “60s” 客户端的所有阻塞调用超时. akka.fork-join-executor.parallelism-factor 2.0 并行因子用于使用以下公式确定线程池大小：ceil（可用处理器*因子）.然后，得到的大小受parallelism-min和parallelism-max值的限制. akka.fork-join-executor.parallelism-max 64 将基于因子的并行数量限制为的最大线程数. akka.fork-join-executor.parallelism-min 8 将基于因子的并行数量限制为的最小线程数. akka.framesize “10485760b” 在JobManager和TaskManager之间发送的消息的最大大小.如果Flink由于消息超出此限制而失败，那么您应该增加它.邮件大小需要大小单位说明符. akka.jvm-exit-on-fatal-error true 退出JVM致命的Akka错误. akka.log.lifecycle.events false 打开Akka远程记录事件.在调试时将此值设置为“true”. akka.lookup.timeout “10s” 用于查找JobManager的超时.超时值必须包含时间单位说明符（ms / s / min / h / d）. akka.retry-gate-closed-for 50 断开远程连接后，应关闭门的ms数. akka.server-socket-worker-pool.pool-size-factor 1.0 池大小因子用于使用以下公式确定线程池大小：ceil（可用处理器*因子）.然后，结果大小由pool-size-min和pool-size-max值限制. akka.server-socket-worker-pool.pool-size-max 2 将基于因子的数量限制为的最大线程数. akka.server-socket-worker-pool.pool-size-min 1 将基于因子的数量限制为的最小线程数. akka.ssl.enabled true 为Akka的远程通信打开SSL.仅当全局ssl标志security.ssl.enabled设置为true时，这才适用. akka.startup-timeout (none) 超时之后，远程组件的启动被视为失败. akka.tcp.timeout “20s” 所有出站连接超时.如果由于网络速度较慢而导致连接到TaskManager时遇到问题，则应增加此值. akka.throughput 15 在将线程返回到池之前批处理的消息数.较低的值表示公平的调度，而较高的值可以以不公平为代价来提高性能. akka.transport.heartbeat.interval “1000s” Akka传输故障检测器的心跳间隔.由于Flink使用TCP，因此不需要检测器.因此，通过将间隔设置为非常高的值来禁用检测器.如果您需要传输故障检测器，请将间隔设置为某个合理的值.间隔值需要时间单位指定符（ms / s / min / h / d）. akka.transport.heartbeat.pause “6000s” Akka的传输故障检测器可接受的心跳暂停.由于Flink使用TCP，因此不需要检测器.因此，通过将暂停设置为非常高的值来禁用检测器.如果您需要传输故障检测器，请将暂停设置为某个合理的值.暂停值需要时间单位指定符（ms / s / min / h / d）. akka.transport.threshold 300.0 传输故障检测器的阈值.由于Flink使用TCP，因此检测器不是必需的，因此阈值被设置为高值. akka.watch.heartbeat.interval “10s” Akka的DeathWatch机制检测死亡TaskManagers的心跳间隔.如果由于心跳消息丢失或延迟而导致TaskManagers被错误地标记为死亡，那么您应该减小此值或增加akka.watch.heartbeat.pause.可在此处找到Akka的DeathWatch的详尽描述 akka.watch.heartbeat.pause “60s” Akka的DeathWatch机制可接受的心跳暂停.较低的值不允许心律不齐.如果由于心跳消息丢失或延迟而导致TaskManagers被错误地标记为死亡，那么您应该增加此值或Reduceakka.watch.heartbeat.interval.较高的值会增加检测死的TaskManager的时间.可在此处找到Akka的DeathWatch的详尽描述 akka.watch.threshold 12 DeathWatch故障检测器的阈值.较低的值容易出现误报，而较高的值会增加检测死的TaskManager的时间.可在此处找到Akka的DeathWatch的详尽描述 REST 键 默认 描述 rest.address (none) 客户端应该用于连接到服务器的地址. rest.await-leader-timeout 30000 客户端等待Leader地址的时间（以ms为单位），例如Dispatcher或WebMonitorEndpoint rest.bind-address (none) 服务器绑定自身的地址. rest.client.max-content-length 104857600 客户端将处理的最大内容长度（以字节为单位）. rest.connection-timeout 15000 客户端建立TCP连接的最长时间（以ms为单位）. rest.port 8081 服务器侦听的端口/客户端连接到的端口. rest.retry.delay 3000 客户端在重试之间等待的时间（以ms为单位）（另请参阅“rest.retry.max-attempts”）. rest.retry.max-attempts 20 如果可重试 算子操作失败，客户端将尝试重试的次数. rest.server.max-content-length 104857600 服务器将处理的最大内容长度（以字节为单位）. Blob服务器 键 默认 描述 blob.fetch.backlog 1000 config参数定义JobManager上BLOB提取的积压. blob.fetch.num-concurrent 50 config参数定义JobManager服务的最大并发BLOB提取数. blob.fetch.retries 5 config参数定义失败的BLOB提取的退出次数. blob.offload.minsize 1048576 要卸载到BlobServer的消息的最小大小. blob.server.port “0” config参数定义blob服务的服务器端口. blob.service.cleanup.interval 3600 TaskManager中blob缓存的清理间隔（以秒为单位）. blob.service.ssl.enabled true 用于覆盖blob服务传输的ssl支持的标志. blob.storage.directory (none) config参数，用于定义blob服务器使用的存储目录. 心跳管理器 键 默认 描述 heartbeat.interval 10000 从发送方请求心跳的时间间隔. heartbeat.timeout 50000 为发送方和接收方双方请求和接收心跳的超时. SSL设置 键 默认 描述 security.ssl.algorithms “TLS_RSA_WITH_AES_128_CBC_SHA” 要支持的标准SSL算法的逗号分隔列表.在这里阅读更多 security.ssl.internal.enabled false 打开SSL以进行内部网络通信.可选地，特定组件可以通过它们自己的设置（rpc，数据传输，REST等）覆盖它. security.ssl.internal.key-password (none) 解密Keys库中Flink内部端点（rpc，数据传输，blob服务器）Keys的密钥. security.ssl.internal.keystore (none) 带有SSLKeys和证书的JavaKeys库文件，用于Flink的内部端点（rpc，数据传输，blob服务器）. security.ssl.internal.keystore-password (none) 为Flink的内部端点（rpc，数据传输，blob服务器）解密Flink的Keys库文件的密钥. security.ssl.internal.truststore (none) 包含公共CA证书的信任库文件，用于验证Flink内部端点（rpc，数据传输，blob服务器）的对等方. security.ssl.internal.truststore-password (none) 用于解密Flink内部端点（rpc，数据传输，blob服务器）的信任库的密码. security.ssl.key-password (none) 解密Keys库中的服务器Keys的密钥. security.ssl.keystore (none) flink端点用于其SSLKeys和证书的JavaKeys库文件. security.ssl.keystore-password (none) 解密Keys库文件的密钥. security.ssl.protocol “TLSv1.2” ssl传输支持的SSL协议版本.请注意，它不支持以逗号分隔的列表. security.ssl.rest.enabled false 通过REST端点打开SSL以进行外部通信. security.ssl.rest.key-password (none) 解密Flink外部REST端点的Keys库中的Keys的密钥. security.ssl.rest.keystore (none) 带有SSLKeys和证书的JavaKeys库文件，用于Flink的外部REST端点. security.ssl.rest.keystore-password (none) 为Flink的外部REST端点解密Flink的Keys库文件的密钥. security.ssl.rest.truststore (none) 包含公共CA证书的信任库文件，用于验证Flink的外部REST端点的对等方. security.ssl.rest.truststore-password (none) 用于解密Flink外部REST端点的信任库的密码. security.ssl.truststore (none) 信任库文件，包含flink端点用于验证对等方证书的公共CA证书. security.ssl.truststore-password (none) 解密信任库的秘诀. security.ssl.verify-hostname true 标记以在ssl握手期间启用对等方的主机名验证. 网络通讯（通过Netty） 这些参数允许高级调整.在大型群集上运行并发高吞吐量作业时，默认值就足够了. 键 默认 描述 taskmanager.network.netty.client.connectTimeoutSec 120 Netty客户端连接超时. taskmanager.network.netty.client.numThreads -1 Netty客户端线程的数量. taskmanager.network.netty.num-arenas -1 Netty竞技场的数量. taskmanager.network.netty.sendReceiveBufferSize 0 Netty发送和接收缓冲区大小.这默认为系统缓冲区大小（cat / proc / sys / net / ipv4 / tcp_ [rw] mem），在现代Linux中为4 MiB. taskmanager.network.netty.server.backlog 0 netty服务器连接积压. taskmanager.network.netty.server.numThreads -1 Netty服务器线程数. taskmanager.network.netty.transport “nio” Netty传输类型，“nio”或“epoll” Web前端 键 默认 描述 web.access-control-allow-origin “*”   web.address (none)   web.backpressure.cleanup-interval 600000   web.backpressure.delay-between-samples 50   web.backpressure.num-samples 100   web.backpressure.refresh-interval 60000   web.checkpoints.history 10   web.history 5   web.log.path (none)   web.refresh-interval 3000   web.ssl.enabled true   web.submit.enable true   web.timeout 10000   web.tmpdir System.getProperty（ “java.io.tmpdir”）   web.upload.dir (none)   文件系统 键 默认 描述 fs.default-scheme (none) 默认文件系统方案，用于未明确声明方案的路径.可能包含权限，例如，在HDFS NameNode的情况下为host：port. fs.output.always-create-directory false 以大于1的并行度运行的文件编写器为输出文件路径创建目录，并将不同的结果文件（每个并行编写器任务一个）放入该目录中.如果此选项设置为“true”，则并行度为1的编写器也将创建一个目录并将单个结果文件放入其中.如果该选项设置为“false”，则编写器将直接在输出路径上直接创建文件，而不创建包含目录. fs.overwrite-files false 指定默认情况下文件输出编写器是否应覆盖现有文件.设置为“true”以默认覆盖，否则设置为“false”. 编译/优化 键 默认 描述 compiler.delimited-informat.max-line-samples 10 编译器为分隔输入采用的最大行样本数.样本用于估计记录数.可以使用输入格式的参数覆盖特定输入的此值. compiler.delimited-informat.max-sample-len 2097152 编译器用于分隔输入的行样本的最大长度.如果单个样本的长度超过此值（可能是因为解析器配置错误），则取样将中止.可以使用输入格式的参数覆盖特定输入的此值. compiler.delimited-informat.min-line-samples 2 编译器为分隔输入采用的最小行样本数.样本用于估计记录数.可以使用输入格式的参数覆盖特定输入的此值 运行时算法 键 默认 描述 taskmanager.runtime.hashjoin-bloom-filters false 用于在混合散列连接实现中激活/停用bloom过滤器的标志.如果散列连接需要溢出到磁盘（数据集大于保存的内存部分），这些布隆过滤器可以大大Reduce溢出记录的数量，但需要花费一些CPU周期. taskmanager.runtime.max-fan 128 外部合并的最大扇入连接和扇出用于溢出哈希表.限制每个 算子的文件句柄数，但如果设置得太小，可能会导致中间合并/分区. taskmanager.runtime.sort-spilling-threshold 0.8 当这部分内存预算已满时，排序 算子操作开始溢出. Resource Manager 本节中的配置键独立于使用的资源管理框架（YARN，Mesos，Standalone，…） 键 默认 描述 containerized.heap-cutoff-min 600 作为安全边际，要在容器中删除的最小堆内存量. containerized.heap-cutoff-ratio 0.25 要从容器中删除的堆空间百分比（YARN / Mesos），以补偿其他JVM内存使用情况. local.number-resourcemanager 1   resourcemanager.job.timeout “5m” 没有TaskManager作为Leader的工作超时. resourcemanager.rpc.port 0 定义要连接的网络端口以与资源管理器进行通信.默认情况下，JobManager的端口，因为使用了相同的ActorSystem.无法使用此配置键定义端口范围. resourcemanager.taskmanager-timeout 30000 释放空闲TaskManager的超时. YARN 键 默认 描述 yarn.application-attempts (none) ApplicationMaster重启次数.请注意，整个Flink群集将重新启动，YARN客户端将断开连接.此外，JobManager地址将更改，您需要手动设置JM主机：port.建议将此选项保存为1. yarn.application-master.port “0” 使用此配置选项，用户可以为Application Master（和JobManager）RPC端口指定端口，一系列端口或端口列表.默认情况下，我们建议使用默认值（0）让 算子操作系统选择适当的端口.特别是当多个AM在同一物理主机上运行时，固定端口分配会阻止AM启动.例如，在具有限制性防火墙的环境中在YARN上运行Flink时，此选项允许指定一系列允许的端口. yarn.appmaster.rpc.address (none) 应用程序主RPC系统正在侦听的主机名或地址. yarn.appmaster.rpc.port -1 应用程序主RPC系统正在侦听的端口. yarn.containers.vcores -1 每个YARN容器的虚拟核心数（vcores）.默认情况下，vcores的数量设置为每个TaskManager的插槽数（如果已设置），或者设置为1，否则设置为1.为了使用此参数，您的群集必须启用CPU调度.您可以通过设置来完成此 算子操作org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler. yarn.heartbeat-delay 5 使用ResourceManager的心跳之间的时间，以秒为单位. yarn.maximum-failed-containers (none) 系统在发生故障时将重新分配的最大容器数. yarn.per-job-cluster.include-user-jar “ORDER” 定义用户jar是否包含在每个作业集群的系统类路径中以及它们在路径中的位置.它们可以位于开头（“FIRST”），末尾（“LAST”），或者根据其名称（“ORDER”）定位.将此参数设置为“DISABLED”会导致jar包含在用户类路径中. yarn.properties-file.location (none) 将Flink作业提交给YARN时，JobManager的主机和可用处理槽的数量将写入属性文件，以便Flink客户端能够选择这些详细信息.此配置参数允许更改该文件的默认位置（例如，对于在用户之间共享Flink安装的环境）. yarn.tags (none) 要应用于Flink YARN应用程序的以逗号分隔的标记列表. Mesos 键 默认 描述 mesos.failover-timeout 604800 Mesos调度程序的故障转移超时（以秒为单位），之后将自动关闭正在运行的任务. mesos.initial-tasks 0 最初的工人在主人开始时提出来.除非Flink处于传统模式，否则将忽略此选项. mesos.master (none) Mesos主URL.该值应采用以下形式之一：主持人：portZK：//主机1：端口1，主机2：端口2，… /路径ZK：//用户名：密码@主机1：端口1，主机2：端口2，… /路径文件：///路径/到/文件 mesos.maximum-failed-tasks -1 群集失败前失败的最大工作数.可以设置为-1以禁用此函数.除非Flink处于传统模式，否则将忽略此选项. mesos.resourcemanager.artifactserver.port 0 config参数定义要使用的Mesos工件服务器端口.将端口设置为0将允许 算子操作系统选择可用端口. mesos.resourcemanager.artifactserver.ssl.enabled true 为Flink工件服务器启用SSL.请注意，security.ssl.enabled也需要设置为true加密才能启用加密. mesos.resourcemanager.framework.name “Flink” Mesos框架名称 mesos.resourcemanager.framework.principal (none) Mesos框架主体 mesos.resourcemanager.framework.role “*” Mesos框架角色定义 mesos.resourcemanager.framework.secret (none) Mesos框架密钥 mesos.resourcemanager.framework.user (none) Mesos框架用户 mesos.resourcemanager.tasks.port-assignments (none) 以逗号分隔的配置键列表，表示可配置端口.所有端口Keys将动态获取通过Mesos分配的端口. Mesos TaskManager 键 默认 描述 mesos.constraints.hard.hostattribute (none) 基于代理属性在Mesos上放置任务的约束.采用逗号分隔的键：值对列表，对应于目标介质代理公开的属性.示例：az：eu-west-1a，系列：t2 mesos.resourcemanager.tasks.bootstrap-cmd (none) 在TaskManager启动之前执行的命令. mesos.resourcemanager.tasks.container.docker.force-pull-image false 指示docker containerizer强制拉动镜像，而不是重用缓存版本. mesos.resourcemanager.tasks.container.docker.parameters (none) 使用docker容器时，要传递给docker run命令的自定义参数.逗号分隔的“key = value”对列表.“值”可能包含“=”. mesos.resourcemanager.tasks.container.image.name (none) 用于容器的映像名称. mesos.resourcemanager.tasks.container.type “mesos” 使用的集装箱类型：“mesos”或“docker”. mesos.resourcemanager.tasks.container.volumes (none) 逗号分隔的[host_path：] container_path [：RO | RW]列表.这允许将额外的卷安装到容器中. mesos.resourcemanager.tasks.cpus 0.0 要分配给Mesos工作者的CPU. mesos.resourcemanager.tasks.gpus 0 要分配给Mesos工作者的GPU. mesos.resourcemanager.tasks.hostname (none) 用于定义TaskManager主机名的可选值.模式_TASK_由Mesos任务的实际ID替换.这可用于配置TaskManager以使用Mesos DNS（例如_TASK_.flink-service.mesos）进行名称查找. mesos.resourcemanager.tasks.mem 1024 要以MB为单位分配给Mesos worker的内存. mesos.resourcemanager.tasks.taskmanager-cmd “$FLINK_HOME/bin/mesos-taskmanager.sh”   mesos.resourcemanager.tasks.uris (none) 以逗号分隔的自定义工件URI列表，这些URI将下载到Mesos工作者的沙箱中. taskmanager.numberOfTaskSlots 1 单个TaskManager可以运行的并行算子或用户函数实例的数量.如果此值大于1，则单个TaskManager将获取函数或 算子的多个实例.这样，TaskManager可以使用多个CPU内核，但同时，可用内存在不同的算子或函数实例之间划分.此值通常与TaskManager的计算机具有的物理CPU核心数成比例（例如，等于核心数，或核心数的一半）. 高可用性（HA） 键 默认 描述 high-availability “NONE” 定义用于群集执行的高可用性模式.要启用高可用性，请将此模式设置为“ZOOKEEPER”. high-availability.cluster-id “/default” Flink集群的ID，用于将多个Flink集群彼此分开.需要为独立群集设置，但在YARN和Mesos中自动推断. high-availability.job.delay (none) 故障转移后JobManager之前的时间恢复当前作业. high-availability.jobmanager.port “0” JobManager在高可用性模式下使用的可选端口（范围）. high-availability.storageDir (none) 文件系统路径（URI）Flink在高可用性设置中持久保存元数据. 基于ZooKeeper的HA模式 键 默认 描述 high-availability.zookeeper.client.acl “open” 定义要在ZK节点上配置的ACL（open | creator）.如果ZooKeeper服务器配置将“authProvider”属性映射为使用SASLAuthenticationProvider并且群集配置为以安全模式（Kerberos）运行，则可以将配置值设置为“creator”. high-availability.zookeeper.client.connection-timeout 15000 定义ZooKeeper的连接超时（以ms为单位）. high-availability.zookeeper.client.max-retry-attempts 3 定义客户端放弃之前的连接重试次数. high-availability.zookeeper.client.retry-wait 5000 定义以ms为单位的连续重试之间的暂停. high-availability.zookeeper.client.session-timeout 60000 以ms为单位定义ZooKeeper会话的会话超时. high-availability.zookeeper.path.checkpoint-counter “/checkpoint-counter” ZooKeeper根路径（ZNode）用于检查点计数器. high-availability.zookeeper.path.checkpoints “/checkpoints” 已完成检查点的ZooKeeper根路径（ZNode）. high-availability.zookeeper.path.jobgraphs “/jobgraphs” 作业图的ZooKeeper根路径（ZNode） high-availability.zookeeper.path.latch “/leaderlatch” 定义用于选择Leader的Leader锁存器的znode. high-availability.zookeeper.path.leader “/leader” 定义Leader的znode，其中包含Leader的URL和当前Leader会话ID. high-availability.zookeeper.path.mesos-workers “/mesos-workers” ZooKeeper根路径，用于保存Mesos工作者信息. high-availability.zookeeper.path.root “/flink” Flink在ZooKeeper中存储其条目的根路径. high-availability.zookeeper.path.running-registry “/running_job_registry/”   high-availability.zookeeper.quorum （none） 使用ZooKeeper在高可用性模式下运行Flink时要使用的ZooKeeper quorum. ZooKeeper安全 键 默认 描述 zookeeper.sasl.disable false   zookeeper.sasl.login-context-name “Client”   zookeeper.sasl.service-name “zookeeper”   基于Kerberos的安全性 键 默认 描述 security.kerberos.login.contexts (none) 以逗号分隔的登录上下文列表，用于提供Kerberos凭据（例如，Client，KafkaClient使用凭证进行ZooKeeper身份验证和Kafka身份验证） security.kerberos.login.keytab (none) 包含用户凭据的KerberosKeys表文件的绝对路径. security.kerberos.login.principal (none) 与keytab关联的Kerberos主体名称. security.kerberos.login.use-ticket-cache true 指示是否从Kerberos票证缓存中读取. 环境 键 默认 描述 env.hadoop.conf.dir (none) hadoop配置目录的路径.需要读取HDFS和/或YARN配置.您也可以通过环境变量进行设置. env.java.opts (none)   env.java.opts.jobmanager (none)   env.java.opts.taskmanager (none)   env.log.dir (none) 定义保存Flink日志的目录.它必须是一条绝对的道路.（默认为Flink主页下的日志目录） env.log.max 5 要保存的最大旧日志文件数. env.ssh.opts (none) 启动或停止JobManager，TaskManager和Zookeeper服务时，其他命令行选项传递给SSH客户端（start-cluster.sh，stop-cluster.sh，start-zookeeper-quorum.sh，stop-zookeeper-quorum.sh）. env.yarn.conf.dir (none) YARN配置目录的路径.它需要在YARN上运行flink.您也可以通过环境变量进行设置. 检查点 键 默认 描述 state.backend (none) 状态后台用于存储和检查点状态. state.backend.async true 选择状态后台是否应在可能和可配置的情况下使用异步SNAPSHOT方法.某些状态后台可能不支持异步SNAPSHOT，或者仅支持异步SNAPSHOT，并忽略此选项. state.backend.fs.memory-threshold 1024 状态数据文件的最小大小.小于该值的所有状态块都内联存储在根检查点元数据文件中. state.backend.incremental false 如果可能，选择状态后台是否应创建增量检查点.对于增量检查点，仅存储来自先前检查点的差异，而不是完整的检查点状态.某些状态后台可能不支持增量检查点并忽略此选项. state.backend.local-recovery false   state.checkpoints.dir (none) 用于在Flink支持的文件系统中存储检查点的数据文件和元数据的默认目录.必须可以从所有参与的进程/节点（即所有TaskManagers和JobManagers）访问存储路径. state.checkpoints.num-retained 1 要保存的已完成检查点的最大数量. state.savepoints.dir (none) 保存点的默认目录.由将后台写入文件系统的状态后台（MemoryStateBackend，FsStateBackend，RocksDBStateBackend）使用. taskmanager.state.local.root-dirs (none)   可查询状态 键 默认 描述 query.client.network-threads 0 网络数（Netty的事件循环）可查询状态客户端的线程. query.proxy.network-threads 0 网络数（Netty的事件循环）可查询状态代理的线程. query.proxy.ports “9069” 可查询状态代理的端口范围.指定范围可以是单个端口：“9123”，一系列端口：“50100-50200”，或范围和端口列表：“50100-50200,50300-50400,51234”. query.proxy.query-threads 0 可查询状态代理的查询线程数.如果设置为0，则使用插槽数. query.server.network-threads 0 网络数（Netty的事件循环）可查询状态服务器的线程. query.server.ports “9067” 可查询状态服务器的端口范围.指定范围可以是单个端口：“9123”，一系列端口：“50100-50200”，或范围和端口列表：“50100-50200,50300-50400,51234”. query.server.query-threads 0 可查询状态服务器的查询线程数.如果设置为0，则使用插槽数. 度量 键 默认 描述 metrics.latency.granularity “operator” 定义延迟指标的粒度.可接受的值是：单一 - 跟踪延迟，无需区分源和子任务.operator - 跟踪延迟，同时区分源，但不区分子任务.子任务 - 在区分源和子任务时跟踪延迟. metrics.latency.history-size 128 定义每个算子维护的测量延迟数. metrics.latency.interval 0 定义从源发出延迟跟踪标记的间隔.如果设置为0或负值，则禁用延迟跟踪.启用此函数会显着影响群集的性能. metrics.reporter. . (none) 为名为的报告器配置参数. metrics.reporter..class (none) 报告类用于为报告命名. metrics.reporter..interval (none) 报告间隔用于报告名为. metrics.reporters (none)   metrics.scope.delimiter “”   metrics.scope.jm “ .jobmanager” 定义应用于作用于JobManager的所有度量标准的范围格式字符串. metrics.scope.jm.job “ .jobmanager.” 定义范围格式字符串，该字符串应用于作用于JobManager上作业的所有度量标准. metrics.scope.operator “ .taskmanager. ” 定义应用于作用于 算子的所有度量标准的范围格式字符串. metrics.scope.task “ .taskmanager. ” 定义应用于作用于任务的所有度量标准的范围格式字符串. metrics.scope.tm “ .taskmanager.” 定义应用于作用于TaskManager的所有度量标准的范围格式字符串. metrics.scope.tm.job “ .taskmanager. ” 定义范围格式字符串，该字符串应用于作用于TaskManager上作业的所有度量标准. metrics.system-resource false   metrics.system-resource-probing-interval 5000   历史服务器 如果要通过HistoryServer的Web前端显示它们，则必须进行配置jobmanager.archive.fs.dir以存档已终止的作业并将其添加到受监视目录列表中historyserver.archive.fs.dir. jobmanager.archive.fs.dir：将有关已终止作业的信息上载到的目录.您必须将此目录添加到历史服务器的受监视目录列表中historyserver.archive.fs.dir. 键 默认 描述 historyserver.archive.fs.dir (none) 以逗号分隔的目录列表，用于从中获取已归档的作业.历史服务器将监视这些目录以获取已存档的作业.您可以将JobManager配置为通过jobmanager.archive.fs.dir将作业存档到目录. historyserver.archive.fs.refresh-interval 10000 刷新已归档作业目录的时间间隔（以ms为单位）. historyserver.web.address (none) HistoryServer的Web界面的地址. historyserver.web.port 8082 HistoryServers的Web界面的端口. historyserver.web.refresh-interval 10000   historyserver.web.ssl.enabled false 启用对HistoryServer Web前端的HTTP访问.仅当全局SSL标志security.ssl.enabled设置为true时，此选项才适用. historyserver.web.tmpdir (none) 此配置参数允许定义历史服务器Web界面使用的Flink Web目录.Web界面将其静态文件复制到目录中. 留存 mode：Flink的执行模式.可能的值是legacy和new.要启动旧组件，您必须指定legacy（DEFAULT：）new。 背景 配置网络缓冲区 如果您看到异常java.io.IOException: Insufficient number of network buffers，则需要调整用于网络缓冲区的内存量，以便程序在您的TaskManager上运行。 网络缓冲区是通信层的关键资源.它们用于在通过网络传输之前缓冲记录，并在将传入数据解析为记录并将其传递给应用程序之前缓冲传入数据.足够数量的网络缓冲区对于实现良好的吞吐量至关重要。 从Flink 1.3开始，你可以遵循“越多越好”的成语而不会对延迟造成任何惩罚（我们通过限制每个通道使用的实际缓冲区数量来防止每个传出和传入通道中的过度缓冲，即缓冲膨胀） 。 通常，将TaskManager配置为具有足够的缓冲区，以使您希望同时打开的每个逻辑网络连接都具有专用缓冲区。对于网络上的每个点对点数据交换存在逻辑网络连接，这通常发生在重新分区或广播步骤（混洗阶段）。在那些中，TaskManager中的每个并行任务必须能够与所有其他并行任务进行通信。 注意：从Flink 1.5开始，网络缓冲区将始终在堆外分配，即在JVM堆之外，而不管其值是多少taskmanager.memory.off-heap。这样，我们可以将这些缓冲区直接传递给底层网络堆栈层。</summary></entry><entry><title type="html">Flink基础运行时环境</title><link href="http://localhost:4000/bigdata/2018/10/09/Flink%E5%9F%BA%E7%A1%80%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83/" rel="alternate" type="text/html" title="Flink基础运行时环境" /><published>2018-10-09T00:00:00+08:00</published><updated>2018-10-09T00:00:00+08:00</updated><id>http://localhost:4000/bigdata/2018/10/09/Flink%E5%9F%BA%E7%A1%80%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83</id><content type="html" xml:base="http://localhost:4000/bigdata/2018/10/09/Flink%E5%9F%BA%E7%A1%80%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83/">&lt;blockquote&gt;
  &lt;p&gt;本文所用flink版本为1.6，官方文档链接&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/concepts/runtime.html&quot;&gt;Apache Flink 1.6&lt;/a&gt;，本文所参考的文档均在正文中每个部分直接详细指出了，就不再汇总了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;flink运行时环境&quot;&gt;Flink运行时环境&lt;/h1&gt;
&lt;h2 id=&quot;tasks和operator-chains&quot;&gt;Tasks和Operator Chains&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;基础说明&lt;br /&gt;
在实际的分布式计算环境中，Flink会将多个运算子任务（ operator subtasks）链接一起（chains）形成分布式计算任务（tasks）。每个任务（task）在一个线程中执行。&lt;br /&gt;
优点：将运算符（operators）链接成计算任务（tasks）中，形成Operator Chains对于系统性能的提升有很大的帮助：
    &lt;ul&gt;
      &lt;li&gt;降低了线程间的切换&lt;/li&gt;
      &lt;li&gt;减少了数据在与缓冲区的开销&lt;/li&gt;
      &lt;li&gt;减少消息的序列化/反序列化&lt;/li&gt;
      &lt;li&gt;在降低延时的同时减少了系统的总体吞吐量&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;我们可以对这种chain操作进行配置，具体内容请参考&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/dev/stream/operators/#task-chaining-and-resource-groups&quot;&gt;chaining docs&lt;/a&gt;。&lt;br /&gt;
如下图是官网所示的数据流图包含五个子任务，也就是说其中有五个并行线程：&lt;br /&gt;
&lt;img src=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/fig/tasks_chains.svg&quot; alt=&quot;Tasks and Operator Chains&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;形成Operator Chains的条件：&lt;br /&gt;
上述描述了Tasks和Operator Chains的概念，下面以经典的WordCount为例，看下Operator Chains的形成。此部分结合&lt;a href=&quot;http://wuchong.me/blog/2016/05/09/flink-internals-understanding-execution-resources/&quot;&gt;Flink 原理与实现：理解 Flink 中的计算资源&lt;/a&gt;整理。&lt;br /&gt;
下面这幅图，展示了Source并行度为1，FlatMap、KeyAggregation、Sink并行度均为2，最终以5个并行的线程来执行的优化过程。&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-09-FlinkOperatorChains形成.png?raw=true&quot; alt=&quot;flinkOperatorChains形成&quot; /&gt;&lt;br /&gt;
上图中将KeyAggregation和Sink两个operator进行了合并，因为这两个合并后并不会改变整体的拓扑结构。但是，并不是任意两个 operator 就能 chain 一起的。还是需要一定的条件：
    &lt;ul&gt;
      &lt;li&gt;没有禁用Chain&lt;/li&gt;
      &lt;li&gt;上下游算子并行度一致&lt;/li&gt;
      &lt;li&gt;下游算子的入度为1（也就是说下游节点没有来自其他节点的输入）&lt;/li&gt;
      &lt;li&gt;上下游算子都在同一个slot group中（文章后续会解释slot group）&lt;/li&gt;
      &lt;li&gt;上下游算子之间没有shuffle（两个算子间数据分区方式是forward）&lt;/li&gt;
      &lt;li&gt;下游的chain策略为ALWAYS（可以与上下游链接，map、flatmap、filter等默认是ALWAYS）&lt;/li&gt;
      &lt;li&gt;上游的chain策略为ALWAYS或HEAD（只能与下游链接，不能与上游链接，Source默认是HEAD）&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Operator chain的行为可以通过编程API中进行指定。可以通过在DataStream的operator后面（如someStream.map(..))调用startNewChain()来指示从该operator开始一个新的chain（与前面截断，不会被chain到前面）。或者调用disableChaining()来指示该operator不参与chaining（不会与前后的operator chain一起）。在底层，这两个方法都是通过调整operator的 chain 策略（HEAD、NEVER）来实现的。另外，也可以通过调用StreamExecutionEnvironment.disableOperatorChaining()来全局禁用chaining。参考官网API&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/dev/stream/operators/#task-chaining-and-resource-groups&quot;&gt;Task chaining and resource groups&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;原理与实现（转）&lt;br /&gt;
转载自&lt;a href=&quot;https://yq.aliyun.com/articles/64819#&quot;&gt;Flink 原理与实现：理解 Flink 中的计算资源&lt;/a&gt;，此文应该是基于flink1.3，可以参考。&lt;br /&gt;
那么 Flink 是如何将多个 operators chain在一起的呢？chain在一起的operators是如何作为一个整体被执行的呢？它们之间的数据流又是如何避免了序列化/反序列化以及网络传输的呢？下图展示了operators chain的内部实现：&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-09-FlinkChains原理.png?raw=true&quot; alt=&quot;2018-10-09-FlinkChains原理&quot; /&gt;&lt;br /&gt;
如上图所示，Flink内部是通过OperatorChain这个类来将多个operator链在一起形成一个新的operator。OperatorChain形成的框框就像一个黑盒，Flink 无需知道黑盒中有多少个ChainOperator、数据在chain内部是怎么流动的，只需要将input数据交给 HeadOperator 就可以了，这就使得OperatorChain在行为上与普通的operator无差别，上面的OperaotrChain就可以看做是一个入度为1，出度为2的operator。所以在实现中，对外可见的只有HeadOperator，以及与外部连通的实线输出，这些输出对应了JobGraph中的JobEdge，在底层通过RecordWriterOutput来实现。另外，框中的虚线是operator chain内部的数据流，这个流内的数据不会经过序列化/反序列化、网络传输，而是直接将消息对象传递给下游的 ChainOperator 处理，这是性能提升的关键点，在底层是通过 ChainingOutput 实现的，源码如下方所示：&lt;br /&gt;
注：HeadOperator和ChainOperator并不是具体的数据结构，前者指代chain中的第一个operator，后者指代chain中其余的operator，它们实际上都是StreamOperator。
    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChainingOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StreamRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 注册的下游operator
&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OneInputStreamOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChainingOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OneInputStreamOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 发送消息方法的实现，直接将消息对象传递给operator处理，不经过序列化/反序列化、网络传输
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StreamRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setKeyContextElement1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// 下游operator直接处理消息对象
&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExceptionInChainedOperatorException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;作业管理器任务管理器与客户端-job-managers-task-managers-clients&quot;&gt;作业管理器，任务管理器与客户端-Job Managers, Task Managers, Clients&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Flink运行时环境由两种类型进程组成：
    &lt;ul&gt;
      &lt;li&gt;JobManagers-作业管理器（也称为master）&lt;br /&gt;
用于协调程序的分布式执行。它的主要功能是调度任务（tasks），协调checkpoint，故障恢复等。&lt;br /&gt;
每个Flink环境中只有一个JobManagers。高可用设计中会包含多个JobManagers，其中一个是leader，其他standby。&lt;/li&gt;
      &lt;li&gt;TaskManagers-任务管理器（也称为worker）&lt;br /&gt;
用于执行数据流图（dataflow）的任务（tasks）（更准确地说，是计算子任务（subtasks）），并对数据流进行缓冲、交换。&lt;br /&gt;
每个Flink环境中至少包含一个TaskManagers。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JobManagers和TaskManagers可以以多种方式启动：
    &lt;ul&gt;
      &lt;li&gt;直接在机器上作为独立群集(&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/ops/deployment/cluster_setup.html&quot;&gt;standalone cluster&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;容器中启动&lt;/li&gt;
      &lt;li&gt;YARN或Mesos等资源框架来管理&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;启动之后，TaskManagers会连接到JobManagers来宣布自己可用报告自身的状态，便于JobManagers来分配工作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于客户端（Client）&lt;br /&gt;
 Client其实并不是运行时及程序执行时的一个组成部分，而是被用来准备和发送的数据流(dataflow)给JobManager的。在发送完数据流图之后，客户端可以选择断开与JobManager的连接，或继续保持连接以接收程序运行的进度报告。Client程序可以以 Java/Scala 程序的形式执行，也可以以命令行的形式（./bin/flink run …）执行。&lt;/p&gt;

    &lt;p&gt;官网运行时架构图如下：&lt;br /&gt;
 &lt;img src=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/fig/processes.svg&quot; alt=&quot;runtime架构图&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;小结(转)&lt;br /&gt;
本部分内容转载自&lt;a href=&quot;http://wuchong.me/blog/2016/05/03/flink-internals-overview/#Job-例子&quot;&gt;Flink 原理与实现：架构和拓扑概览&lt;/a&gt;，此文章应该是基于flink1.3，可以参考。&lt;br /&gt;
当Flink集群启动后，首先会启动一个JobManger和一个或多个的TaskManager。由Client提交任务给JobManager，JobManager再调度任务到各个TaskManager去执行，然后TaskManager将心跳和统计信息汇报给JobManager。TaskManager 之间以流的形式进行数据的传输。上述三者均为独立的JVM 进程。
    &lt;ul&gt;
      &lt;li&gt;Client为提交Job的客户端，可以是运行在任何机器上（与JobManager环境连通即可）。提交Job后，Client可以结束进程（Streaming的任务），也可以不结束并等待结果返回。&lt;/li&gt;
      &lt;li&gt;JobManager主要负责调度Job并协调Task做checkpoint，职责上很像Storm的Nimbus。从Client处接收到Job和JAR包等资源后，会生成优化后的执行计划，并以Task的单元调度到各个TaskManager去执行。&lt;/li&gt;
      &lt;li&gt;TaskManager在启动的时候就设置好了槽位数（Slot），每个slot能启动一个Task，Task为线程。从JobManager处接收需要部署的Task，部署启动后，与自己的上游建立 Netty 连接，接收数据并处理。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;可以看到Flink的任务调度是多线程模型，并且不同Job/Task混合在一个TaskManager进程中。虽然这种方式可以有效提高CPU利用率，但是个人不太喜欢这种设计，因为不仅缺乏资源隔离机制，同时也不方便调试。类似Storm的进程模型，一个JVM中只跑该Job的Tasks实际应用中更为合理。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;其它&lt;br /&gt;
Flink运行时角色间的通信使用akka，数据的传输使用netty。对比spark，从Spark1.3.1版本开始，为了解决大数据块（如shuffle）的传输问题，Spark引入了Netty通信框架，到了1.6.0版本，Netty完全取代了Akka，承担Spark内部所有的RPC通信以及数据流传输。&lt;br /&gt;
参考&lt;a href=&quot;https://blog.csdn.net/yanghua_kobe/article/details/51156218?utm_source=itdadao&amp;amp;utm_medium=referral&quot;&gt;Akka在Flink中的使用剖析&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;任务槽与资源-task-slots-and-resources&quot;&gt;任务槽与资源-Task Slots and Resources&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;TaskManager和Slot的关系&lt;br /&gt;
每个worker（即TaskManager）都是一个独立的JVM进程，可以运行一个或多个子任务（subtask）在其不同的线程中。为了控制worker（TaskManager）接收任务（tasks）的数量，在worker 中引入了任务槽（task slots）的概念（每个worker中至少包含一个任务槽）。&lt;br /&gt;
每个任务槽（task slots）代表任务管理器（TaskManager）中一个特定的资源池子集，槽把TaskManager的资源进行平分。例如，如果任务管理器有3个槽，它会为每个槽分配1/3的内存。将资源池槽化可以让子任务（subtask）获取指定容量的内存资源，而避免同其他作业（job）中的子任务（subtask）竞争。注意，这里没有对CPU进行隔离；目前任务槽仅仅用于隔离任务（tasks）的内存。&lt;br /&gt;
通过调整任务槽（task slots）的数量，用户可以设定子任务（subtasks）如何相互隔离。如果任务管理器（TaskManager）中只有一个槽，那么每个任务组（task group）都运行在一个独立的JVM中（which can be started in a separate container, for example）。若任务管理器（TaskManager ）有多个槽就意味着会有更多的子任务共享同一个JVM。在同一个JVM中的任务会共享 TCP连接（通过多路复用（multiplexing）的方式）和心跳信息，可以减少数据的网络传输，同时他们也会共享数据集和数据结构，一定程度上可以降低每个task的开销。&lt;br /&gt;
如上文所述的 WordCount 例子，5个Task可能会在TaskManager的slots中如下图分布，2个TaskManager，每个有3个slot：&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-09-FlinkSlot分布例子.png?raw=true&quot; alt=&quot;2018-10-09-FlinkSlot分布例子&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;槽和并行度的关系-任务调度&lt;br /&gt;
官网&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/internals/job_scheduling.html#scheduling&quot;&gt;Scheduling&lt;/a&gt;。&lt;br /&gt;
Flink通过任务槽（Task Slot）定义执行资源，每个TaskManager都有一或多个任务槽，每个任务槽都可以运行一个并行任务流(one pipeline of parallel tasks)，一个流(pipeline)包括多个连续的任务，例如一个MapFunction的第n个并行实例与一个ReduceFunction的第n个并行实例的连续任务可以组成一个pipeline。注意，Flink通常会并行的执行连续的任务，对于Streaming程序来说，任何情况都如此执行；而对于batch 程序，多数情况也如此执行。&lt;br /&gt;
下图举例说明。由一个data source、一个MapFunction和一个ReduceFunction组成的程序，data source和MapFunction的并发度都为4，而ReduceFunction的并发度为3。一个数据流由Source-Map-Reduce的顺序组成，在具有2个TaskManager，每个TaskManager都有3个Task Slot的集群上运行，则程序执行情况如图所述。&lt;br /&gt;
&lt;img src=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/fig/slots.svg&quot; alt=&quot;Scheduling&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;slot共享机制-SlotSharingGroup与CoLocationGroup&lt;br /&gt;
参考官网和&lt;a href=&quot;http://wuchong.me/blog/2016/05/09/flink-internals-understanding-execution-resources/&quot;&gt;Flink 原理与实现：理解 Flink 中的计算资源&lt;/a&gt;。&lt;br /&gt;
默认情况下，Flink允许subtasks共享slot，即Flink会允许同一个作业（job）中来自不同的task的多个子任务（subtasks）共享一个槽，即前提是他们来自同一个job，哪怕不同task也可以。这种情况下，有可能会出现某个槽中包含一个完整的作业流水的场景(原文：The result is that one slot may hold an entire pipeline of the job.)。开启这样的slot共享机制主要有两点好处：&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Flink集群需要确保job中任务槽的数量和程序最高并发量完全一致，因此不需要去计算一个程序中一共会起多少个task。&lt;/li&gt;
      &lt;li&gt;可以提高资源利用率。如果没有任务槽共享机制，非密集型（non-intensive）的source/map()子任务就会和（intensive）密集型的window子任务一样阻塞大量资源。如果有任务槽共享机制，会提高程序的基础并发量，比如说从2提高到6，就可以让密集型子任务（heavy subtasks）公平的完全分散到任务管理器（TaskManager）中，从而可以显著提高槽的资源利用率充分利用资源。&lt;br /&gt;
如下图，我们将WordCount的并行度从之前的2个增加到6个（Source并行度仍为1），并开启slot共享（所有operator都在default共享组），就可以得到下图所示的slot分布图。首先，我们不用去计算这个job会其多少个task，总之该任务最终会占用6个slots（最高并行度为6）。其次，我们可以看到密集型操作keyAggregation/sink被平均地分配到各个TaskManager。&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-09-slot共享示例.png?raw=true&quot; alt=&quot;2018-10-09-slot共享示例&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;a. 关于是如何实现共享slot呢？槽分配的策略？&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;SlotSharingGroup是Flink中用来实现slot共享的类，它尽可能地让subtasks共享一个slot。&lt;/li&gt;
      &lt;li&gt;CoLocationGroup类用来强制将subtasks放到同一个slot中。CoLocationGroup主要用于迭代流中，用来保证迭代头与迭代尾的第i个subtask能被调度到同一个TaskManager上。这里我们不会详细讨论CoLocationGroup的实现细节。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;b. 怎么判断operator（算子）属于哪个slot共享组呢？（怎么确定一个算子的SlotSharingGroup？）&lt;br /&gt;
默认情况下，所有的operator（算子）都属于默认的共享组default，也就是说默认情况下所有的operator都是可以共享一个slot的。而当所有input operators具有相同的slot共享组时，该operator会继承这个共享组。最后，为了防止不合理的共享，用户也能通过API来强制指定operator的共享组，比如：someStream.filter(…).slotSharingGroup(“group1”);就强制指定了filter的slot共享组为group1。（总结：根据input的group和自身是否设置group共同确定）适当的设置可以减少每个slot运行的线程数，从而整体上减少机器的负载。&lt;/p&gt;

    &lt;p&gt;c.原理与实现（转）&lt;br /&gt;
那么多个tasks（或者说operators）是如何共享slot的呢？本部分转自&lt;a href=&quot;http://wuchong.me/blog/2016/05/09/flink-internals-understanding-execution-resources/&quot;&gt;Flink 原理与实现：理解 Flink 中的计算资源&lt;/a&gt;。&lt;br /&gt;
来看一下用来定义计算资源的slot的类。抽象类Slot定义了该槽位属于哪个TaskManager（instance）的第几个槽位（slotNumber），属于哪个Job（jobID）等信息。最简单的情况下，一个slot只持有一个task，也就是SimpleSlot的实现。复杂点的情况，一个slot能共享给多个task使用，也就是SharedSlot的实现。SharedSlot能包含其他的SharedSlot，也能包含SimpleSlot。所以一个SharedSlot能定义出一棵slots树。&lt;br /&gt;
接下来我们来看看 Flink 为subtask分配slot的过程。关于Flink调度，有两个非常重要的原则我们必须知道：A.同一个operator的各个subtask是不能呆在同一个SharedSlot中的，例如FlatMap[1]和FlatMap[2]是不能在同一个SharedSlot中的。B.Flink是按照拓扑顺序从Source一个个调度到Sink的。例如WordCount（Source并行度为1，其他并行度为2），那么调度的顺序依次是：Source -&amp;gt; FlatMap[1] -&amp;gt; FlatMap[2] -&amp;gt; KeyAgg-&amp;gt;Sink[1] -&amp;gt; KeyAgg-&amp;gt;Sink[2]。假设现在有2个TaskManager，每个只有1个slot（为简化问题），那么分配slot的过程如图所示：&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-10-slot共享机制实现例子图.png?raw=true&quot; alt=&quot;2018-10-10-slot共享机制实现例子图&quot; /&gt;&lt;br /&gt;
注：图中 SharedSlot 与 SimpleSlot 后带的括号中的数字代表槽位号（slotNumber）。&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;为Source分配slot。首先，我们从TaskManager1中分配出一个SharedSlot。并从SharedSlot中为Source分配出一个SimpleSlot。如上图中的①和②。&lt;/li&gt;
      &lt;li&gt;为FlatMap[1]分配slot。目前已经有一个SharedSlot，则从该SharedSlot中分配出一个SimpleSlot用来部署FlatMap[1]。如上图中的③。&lt;/li&gt;
      &lt;li&gt;为FlatMap[2]分配slot。由于TaskManager1的SharedSlot中已经有同operator的FlatMap[1]了，我们只能分配到其他SharedSlot中去。从TaskManager2中分配出一个SharedSlot，并从该SharedSlot中为FlatMap[2]分配出一个SimpleSlot。如上图的④和⑤。&lt;/li&gt;
      &lt;li&gt;为Key-&amp;gt;Sink[1]分配slot。目前两个SharedSlot都符合条件，从TaskManager1的SharedSlot中分配出一个SimpleSlot用来部署Key-&amp;gt;Sink[1]。如上图中的⑥。&lt;/li&gt;
      &lt;li&gt;为Key-&amp;gt;Sink[2]分配slot。TaskManager1的SharedSlot中已经有同operator的Key-&amp;gt;Sink[1]了，则只能选择另一个SharedSlot中分配出一个SimpleSlot用来部署Key-&amp;gt;Sink[2]。如上图中的⑦。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;最后Source、FlatMap[1]、Key-&amp;gt;Sink[1]这些subtask都会部署到TaskManager1的唯一一个slot中，并启动对应的线程。FlatMap[2]、Key-&amp;gt;Sink[2]这些subtask都会被部署到TaskManager2的唯一一个slot中，并启动对应的线程。从而实现了slot共享。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Flink API中包含一个资源组机制，可以避免不合理的任务槽共享。&lt;br /&gt;
依照以往的经验来说，默认的任务槽数量应设置为CPU core的数量。如果使用超线程技术，每个槽中甚至可以调度处理超过2个硬件线程。&lt;br /&gt;
总结：一个应用需要多少个slot？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;不设置SlotSharingGroup的情况下：应用的最大并行度。&lt;/li&gt;
  &lt;li&gt;设置了SlotSharingGroup：所有SlotSharingGroup中最大并行度之和。如下图：source时为default，然后在map算子处设置gourp为test，那么这个需要的槽数是10+20=30。&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/flink/2018-10-10-slot和并行度关系.png?raw=true&quot; alt=&quot;2018-10-10-slot和并行度关系&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;state-backends&quot;&gt;State Backends&lt;/h2&gt;
&lt;p&gt;通过键值对索引的数据结构保存在指定的后端存储(State Backends)中。有的后端存储将数据保存在内存中的哈希表中，而有的存储会使用RocksDB来保存键值对。除了定义保存状态的数据结构之外，后端存储还实现了获取键值对的特定时间点快照的功能，该功能可以将快照保存为检查点的一部分。&lt;br /&gt;
&lt;img src=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/fig/checkpoints.svg&quot; alt=&quot;State Backends官网图片&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;保存点-savepoints&quot;&gt;保存点-Savepoints&lt;/h2&gt;
&lt;p&gt;使用Data Stream API的程序可以从指定的保存点恢复。保存点可以更新程序和Flink集群，并且不丢失任何状态的功能。也就是相对于checkpoint来比较，checkpoint是针对于内部的，savepoint是针对于外部的。SparkStreaming中，如果使用了checkpoint，流处理程序有更新的话，进行程序替换需要清理调checkpoint才能生效，而在flink中，可以在流处理程序更新后，手动添加savepoint，那么新程序能从savepoint的地方开始读取数据，能与老程序并行存在或者直接替换。&lt;br /&gt;
保存点可以看作是一种手动触发的检查点，该检查点可以获取程序的快照并将其写入后端存储（State Backend）中。所以说保存点的功能依赖于一般的检查点机制。程序执行时会定期在worker节点生成快照和检查点（checkpoint）。由于Flink的恢复机制只需要使用最新一个有效的检查点（checkpoint），在新的检查点（checkpoint）生成后就可以安全移除其余旧的检查点（checkpoint）了。&lt;br /&gt;
保存点（savepoint）和定期检查点（checkpoint）在大部分情况下都很相似，区别只在于保存点是由用户触发的，并且在新的检查点生成后不会自动过期失效。保存点可以通过命令行生成，也可以在调用&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/monitoring/rest_api.html#cancel-job-with-savepoint&quot;&gt;REST API&lt;/a&gt;取消作业时产生。&lt;br /&gt;
关于Savepoints的详细说明，可见官网&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/ops/state/savepoints.html#savepoints&quot;&gt;Savepoints&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;Flink中计算资源的相关，最核心的是 Task Slot，每个slot能运行一个或多个task。为了更高效地运行，Flink提出了Chaining，尽可能地将operators chain在一起作为一个task来处理。为了资源更充分的利用，Flink又提出了SlotSharingGroup，尽可能地让多个task共享一个slot。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;至此，本篇内容完成。&lt;/p&gt;</content><author><name>叶子  ( ˘ ³˘)♥</name></author><category term="Flink" /><summary type="html">本文所用flink版本为1.6，官方文档链接Apache Flink 1.6，本文所参考的文档均在正文中每个部分直接详细指出了，就不再汇总了。</summary></entry><entry><title type="html">Flink基础概念</title><link href="http://localhost:4000/bigdata/2018/09/05/Flink%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/" rel="alternate" type="text/html" title="Flink基础概念" /><published>2018-09-05T00:00:00+08:00</published><updated>2018-09-05T00:00:00+08:00</updated><id>http://localhost:4000/bigdata/2018/09/05/Flink%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5</id><content type="html" xml:base="http://localhost:4000/bigdata/2018/09/05/Flink%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/">&lt;blockquote&gt;
  &lt;p&gt;项目说要做创新活动，所以需要把原来的流处理从Spark替换成Flink。嗯，学习Flink！本文所用flink版本为1.6。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;flink基础概念&quot;&gt;Flink基础概念&lt;/h1&gt;
&lt;h2 id=&quot;程序和数据流-programs-and-dataflows&quot;&gt;程序和数据流-Programs and Dataflows&lt;/h2&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/concepts/programming-model.html#programs-and-dataflows&quot;&gt;Programs and Dataflows&lt;/a&gt;。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Flink基本构建块：
    &lt;ul&gt;
      &lt;li&gt;Streams-中间结果&lt;/li&gt;
      &lt;li&gt;Transformations-以一个或多个stream作为输入的某种operation,输出一个或多个result stream。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;运行的程序-映射成-Streaming Dataflows&lt;br /&gt;
Dataflow：由一组stream和transformation Operators组成。由一个或多个Source开始，一个或多个Sink结束。Dataflow类似与DAG。&lt;br /&gt;
当编写好的一个Flink程序运行的时候，会被映射成Streaming Dataflow。程序中写的transformation和dataflow中的operator关系一般1:1，也可能1:n。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;并行数据流-parallel-dataflows&quot;&gt;并行数据流-Parallel Dataflows&lt;/h2&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/concepts/programming-model.html#parallel-dataflows&quot;&gt;Parallel Dataflows&lt;/a&gt;。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;程序在Flink内部的执行具有并行、分布式的特性：
    &lt;ul&gt;
      &lt;li&gt;stream-被分割成stream partition：一个Stream可以被分成多个Stream分区（Stream Partitions）。&lt;/li&gt;
      &lt;li&gt;operator-被分割成operator subtask：一个Operator可以被分成多个Operator Subtask，每一个Operator Subtask是在不同的线程中独立执行的。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;一个Operator的并行度=Operator Subtask的个数&lt;br /&gt;
 一个Stream的并行度=生成它的Operator的并行度（The parallelism of a stream is always that of its producing operator.）&lt;br /&gt;
 一个程序中，不同的operator可能具有不同的并行度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;数据传输形式&lt;br /&gt;
Stream在operator之间传输数据的形式可以是one-to-one(forwarding)的模式也可以是redistributing的模式。&lt;br /&gt;
官网示例图：&lt;br /&gt;
&lt;img src=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/fig/parallel_dataflow.svg&quot; alt=&quot;数据流&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;One-to-one模式：One-to-one streams保持着分区以及元素的顺序。比如从Source[1]到map()[1]，它保持了Source的分区特性（Partitioning）和分区内元素处理的有序性，也就是说map()[1]的Subtask看到数据流中记录的顺序，与Source[1]中看到的记录顺序是一致的。&lt;/li&gt;
      &lt;li&gt;Redistribution模式：Redistributing streams 的分区会发生改变，改变了输入数据流的分区。比如从map()[1]、map()[2]到keyBy()/window()/apply()[1]、keyBy()/window()/apply()[2]，每个上游的operator subtask向下游的多个不同的subtasks发送数据，这与选择的transformation有关（比如说keyBy() （基于hash码重分区），broadcast()或者rebalance()（随机redistribution））。在一个redistribution的交换中，只有每一对的发送、接收subtask间的elements顺序才会被维持（比如说，subtask[1] of map() and subtask[2] of keyBy/window）。So in this example, the ordering within each key is preserved, but the parallelism does introduce non-determinism regarding the order in which the aggregated results for different keys arrive at the sink。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;并且在本例中，Source Operator对应2个Subtask，所以并行度为2，而Sink Operator的Subtask只有1个，故而并行度为1。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;窗口-windows&quot;&gt;窗口-Windows&lt;/h2&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/concepts/programming-model.html#windows&quot;&gt;Windows&lt;/a&gt;。&lt;br /&gt;
窗口可以是时间驱动的（比如，每30秒）也可以是数据驱动的（比如，每100个元素）。通常我们将窗口划分为：tumbing windows(不重叠)，sliding windows（有重叠）和session windows(有空隙的活动)。&lt;/p&gt;
&lt;h2 id=&quot;时间-time&quot;&gt;时间-Time&lt;/h2&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/concepts/programming-model.html#time&quot;&gt;Time&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Event Time：事件的创建时间，通常通过事件中的一个时间戳来描述。&lt;/li&gt;
  &lt;li&gt;Ingestion time：事件进入Flink 数据流的source的时间。&lt;/li&gt;
  &lt;li&gt;Processing Time：Processing Time表示某个Operator对事件进行处理时的本地系统时间（是在TaskManager节点上）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;有状态的数据操作-stateful-operations&quot;&gt;有状态的数据操作-Stateful Operations&lt;/h2&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/concepts/programming-model.html#stateful-operations&quot;&gt;Stateful Operations&lt;/a&gt;。&lt;br /&gt;
在流处理中，有些操作仅仅在某一时间针对单一事件（如事件转换map），有些操作需要记住多个事件的信息并进行处理（window operators），则后面这些操作称为有状态的操作。&lt;br /&gt;
有状态的操作，其状态被维护的地方，可以将其看作是一个内嵌的key/value存储器。这些状态信息会跟数据流一起分区并且分布存储，并且可以通过有状态的数据操作来访问。因此这些key/value的状态信息仅在keyed streams（通过keyBy() 函数处理过）中才能访问到，并且只能根据当前事件的key来访问其值。数据流按照key排列能保证所有的状态更新都是本地操作，保证一致性且无事务问题。同时这种排列方式使Flink能够透明的再分发状态信息和调整数据流分区。&lt;br /&gt;
关于Flink有状态的流的工作，可以详细参考文章：&lt;a href=&quot;https://www.jianshu.com/p/e9a330399b30&quot;&gt;Flink 有状态的流的工作-Working with state&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;容错的checkpoint-checkpoints-for-fault-tolerance&quot;&gt;容错的Checkpoint-Checkpoints for Fault Tolerance&lt;/h2&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/concepts/programming-model.html#checkpoints-for-fault-tolerance&quot;&gt;Checkpoints for Fault Tolerance&lt;/a&gt;。&lt;br /&gt;
Flink 通过流回放（stream replay）和设置检查点（checkpointing）的方式实现容错。&lt;br /&gt;
一个checkpoint关联了输入流中的某个记录和相应状态operators。数据流（a streaming dataflow）可以从checkpoint中进行恢复，通过恢复Operators的状态以及从该checkpoint重放事件，其保证一致性（exactly-once 的处理语义）。 &lt;br /&gt;
Checkpoint的间隔关系到执行时的容错性和恢复时间，也决定了需要被重放的事件数。&lt;/p&gt;

&lt;h2 id=&quot;流上的批处理-batch-on-streaming&quot;&gt;流上的批处理-Batch on Streaming&lt;/h2&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/concepts/programming-model.html#batch-on-streaming&quot;&gt;Batch on Streaming&lt;/a&gt;。&lt;br /&gt;
Flink把批处理作为特殊的流处理程序来执行，将其看作有界的流（有限数量的元素）。&lt;br /&gt;
DataSet在内部被当作一个流数据，因此上面的适用于流处理的这些概念在批处理中同样适用，除了一些小的不同：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;容错机制不同：批处理的容错机制不使用checkpoints，恢复机制是通过完整的流重放来实现。这是因为inputs是有界的，它将开销更多地引入到恢复操作上，但另一方面也使得运行时的常规流程代价更低，因为它规避了检查点机制。&lt;/li&gt;
  &lt;li&gt;有状态的Operations数据结构不同：DataSet API的有状态操作API使用简单的内存和堆外内存（in-memory/out-of-core）的数据结构，而不是key/value的索引。&lt;/li&gt;
  &lt;li&gt;DataSet API中引入一种独特的同步的迭代操作（superstep-based），这个仅应用于有界数据流。详见&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.6/dev/batch/iterations.html#iterations&quot;&gt;Iterations&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;至此，本篇内容完成。&lt;/p&gt;</content><author><name>叶子  ( ˘ ³˘)♥</name></author><category term="Flink" /><summary type="html">项目说要做创新活动，所以需要把原来的流处理从Spark替换成Flink。嗯，学习Flink！本文所用flink版本为1.6。</summary></entry><entry><title type="html">Spark(Streaming)写入数据到文件-关键为根据数据内容输出到不同自定义名称文件(saveAsHadoopFile以及自定义MultipleOutputFormat)</title><link href="http://localhost:4000/bigdata/2018/07/02/Spark-Streaming-%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%88%B0%E6%96%87%E4%BB%B6-%E5%85%B3%E9%94%AE%E4%B8%BASpark%E6%A0%B9%E6%8D%AE%E6%95%B0%E6%8D%AE%E5%86%85%E5%AE%B9%E8%BE%93%E5%87%BA%E5%88%B0%E4%B8%8D%E5%90%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%8D%E7%A7%B0%E6%96%87%E4%BB%B6-saveAsHadoopFile%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89MultipleOutputFormat/" rel="alternate" type="text/html" title="Spark(Streaming)写入数据到文件-关键为根据数据内容输出到不同自定义名称文件(saveAsHadoopFile以及自定义MultipleOutputFormat)" /><published>2018-07-02T00:00:00+08:00</published><updated>2018-07-02T00:00:00+08:00</updated><id>http://localhost:4000/bigdata/2018/07/02/Spark(Streaming)%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%88%B0%E6%96%87%E4%BB%B6-%E5%85%B3%E9%94%AE%E4%B8%BASpark%E6%A0%B9%E6%8D%AE%E6%95%B0%E6%8D%AE%E5%86%85%E5%AE%B9%E8%BE%93%E5%87%BA%E5%88%B0%E4%B8%8D%E5%90%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%8D%E7%A7%B0%E6%96%87%E4%BB%B6(saveAsHadoopFile%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89MultipleOutputFormat)</id><content type="html" xml:base="http://localhost:4000/bigdata/2018/07/02/Spark-Streaming-%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%88%B0%E6%96%87%E4%BB%B6-%E5%85%B3%E9%94%AE%E4%B8%BASpark%E6%A0%B9%E6%8D%AE%E6%95%B0%E6%8D%AE%E5%86%85%E5%AE%B9%E8%BE%93%E5%87%BA%E5%88%B0%E4%B8%8D%E5%90%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%8D%E7%A7%B0%E6%96%87%E4%BB%B6-saveAsHadoopFile%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89MultipleOutputFormat/">&lt;blockquote&gt;
  &lt;p&gt;之前的Spark实时流处理的数据处理程序，要求把数据从kafka接收之后，分2路分别写入kafka和hdfs，写入kafka的部分之前已经有过总结，现在回过头来把之前的写入HDFS的地方重新总结一下，整个过程从头到尾有一个写入方式的优化，不过时间有点长啦，尽量描述完整( ˘ ³˘)♥。&lt;br /&gt;
&lt;strong&gt;注意: 本文中使用的版本是spark2.2.1和2.6.0-cdh5.11.0&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;在工作中，需要将从kafka收到的数据做一些处理，然后分2路存储到kafka和HDFS中，再供下游进行使用。&lt;br /&gt;
所以，在通过Spark Streaming写入HDFS的时候根据业务需要，最后变革了好多次，才形成了最后的版本。&lt;/p&gt;

&lt;h1 id=&quot;最基础直接方式-直接使用saveastextfile&quot;&gt;最基础直接方式-直接使用saveAsTextFile&lt;/h1&gt;
&lt;p&gt;对于将数据直接存入HDFS或本地文件等，spark提供了现成的算子：&lt;strong&gt;saveAsTextFile&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveAsTextFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveAsTextFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CompressionCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;saveAsTextFile用于将RDD以文本文件的格式存储到文件系统中&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;不过，直接使用saveAsTextFile有很多需要注意的问题。首先，&lt;strong&gt;saveAsTextFile要求保存的目录之前是没有的，否则会报错。&lt;/strong&gt;所以，最好程序中保存前先判断一下目录是否存在。&lt;strong&gt;下面的代码的例子先没有判断目录是否存在，需要自己调整&lt;/strong&gt;。&lt;br /&gt;
下面我们说一下直接使用saveAsTextFile可能遇到的问题：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;文件内容会被覆盖掉&lt;br /&gt;
对于初学spark的时候，第一次使用saveAsTextFile，可能会遇到文件内容会被覆盖掉的问题。&lt;br /&gt;
在第一次使用的时候，可能会想要这么写的：
    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     &lt;span class=&quot;n&quot;&gt;saveDstream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreachRDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//EmptyRDD是没有分区的，所以调用partitions.isEmpty是true，所以这样可以避免写空文件
&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;logInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; No Data in this batchInterval --------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveAsTextFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hdfs://cdh5hdfs/savepath&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;competeTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Processed data write to hdfs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;而一旦实际测试之后，你会发现savepath目录里的文件每次都会被覆盖掉，只保存着最后一次saveAsTextFIle的内容。&lt;br /&gt;
这是因为foreachRDD中使用saveAsTextFile默认保存的文件名就是part-0000_ … part-0000n，每一个rdd都是这样，所以在Spark Streaming程序中，后面的批次数据过来在同一路径下后面的文件可能会覆盖前面的，因此会出现文件内容会被覆盖掉。所以来说，为了避免这个问题，可以在保存的时候在文件夹后面加上时间戳来解决。&lt;/p&gt;
    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     &lt;span class=&quot;n&quot;&gt;saveDstream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreachRDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//EmptyRDD是没有分区的，所以调用partitions.isEmpty是true，所以这样可以避免写空文件
&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;logInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; No Data in this batchInterval --------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveAsTextFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hdfs://cdh5hdfs/savepath/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;competeTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Processed data write to hdfs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;即：rdd.saveAsTextFile(“hdfs://cdh5hdfs/savepath/”+date+”/”+start_time)，这样写之后，保存的路径会根据当前时间来生成，假设运行到此段程序的时间是“2018-06-30 18:30:20”，那么文件存储的目录就会是“hdfs://cdh5hdfs/savepath/2018-06-30/1530354620”，如下显示：&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dcos@d8pccdsj3[~]$hadoop fs -ls /savepath/2018-06-30/1530354620
Found 8 items
-rw-r--r--   3 test cgroup          0 2018-06-30 18:30 /savepath/2018-06-30/1530354620/_SUCCESS
-rw-r--r--   3 test cgroup 2201736217 2018-06-30 18:30 /savepath/2018-06-30/1530354620/part-00000
-rw-r--r--   3 test cgroup 2201037065 2018-06-30 18:30 /savepath/2018-06-30/1530354620/part-00001
-rw-r--r--   3 test cgroup 2202157942 2018-06-30 18:30 /savepath/2018-06-30/1530354620/part-00002
-rw-r--r--   3 test cgroup 2202523100 2018-06-30 18:30 /savepath/2018-06-30/1530354620/part-00003
-rw-r--r--   3 test cgroup 2202310836 2018-06-30 18:30 /savepath/2018-06-30/1530354620/part-00004
-rw-r--r--   3 test cgroup 2202639458 2018-06-30 18:30 /savepath/2018-06-30/1530354620/part-00005
-rw-r--r--   3 test cgroup 2201906597 2018-06-30 18:30 /savepath/2018-06-30/1530354620/part-00006
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;这样暂且解决了文件内容会被覆盖掉的问题。不过，这种情况下，我们会发现以日期命名的文件夹2018-06-30下，会根据每个批次生成一个时间戳命名的目录，并且目录下文件名称名称为part-0000n，所以说只是解决了这个还不够，此种方式还有其他需要注意的问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;保存文件过多&lt;br /&gt;
使用saveAsTextFile经过以上操作之后，不会再出现文件覆盖的问题。但是，当实际运行后会发现，在sparkStreming程序中使用这种方式，会根据每个批次生成一个时间戳命名的目录，目录太多；并且在目录下会有很多很多文件，名称为part-00000 … part-0000n,这样如果文件太小并且过多，就会浪费hdfs的block空间，需要尽可能把文件大小调整到和block大小差不多为好。&lt;br /&gt;
之所以产生了这么多文件，这是因为在spark运行的时候，spark一般会按照执行task的多少生成多少个文件，spark把数据分成了很多个partation，每个partation对应一个task，一个partation的数据由task来执行保存动作，这样的话，在调用saveAsTextFile的时候，会把每个partation的数据保存为一个part-0000n文件。&lt;br /&gt;
所以，为了把文件保存为一个或较少文件，可以使用coalesce或repartition算子。如果生成一个文件，可以在RDD上调用coalesce(1,true).saveAsTextFile()，意味着做完计算之后将数据汇集到一个分区，然后再执行保存的动作，显然，一个分区，Spark自然只起一个task来执行保存的动作，也就只有一个文件产生了。又或者，可以调用repartition(1)，它其实是coalesce的一个包装，默认第二个参数为true。即：
    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coalesce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveAsTextFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hdfs://cdh5hdfs/savepath/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//或
//rdd.repartition(1).saveAsTextFile(&quot;hdfs://cdh5hdfs/savepath/&quot;+date+&quot;/&quot;+start_time)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;不过这样写，在数据过多的时候有很大的隐患：一般情况下，Spark面对的是大量的数据，并且是并行执行的，在数据过多的时候，如果强行要求最后只有一个分区，必然导致大量的磁盘IO和网络IO产生，并且最终操作的节点的内存也会承受很大考验，可能会出现单节点内存不足的问题或者效率及其低下。因此，有人提出，可以采用HDFS磁盘合并操作，即HDFS的getmerge操作。&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//hadoop fs -getmerge 源路径 目的路径 
hadoop fs -getmerge /hdfs/output   /hdfs2/output.txt
//或者cat &amp;gt;操作
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;不能自定义名称，目录层级太多&lt;br /&gt;
经过以上操作之后，就能把数据写到hdfs中，并且文件数量不会过多了。但是经过以上测试，我们会发现有个问题，为了防止文件内容被覆盖我们使用了时间戳，这样的话相当于生成的是一个不同的目录，在sparkStreming程序中使用这种方式，会根据每个批次生成一个时间戳命名的目录，目录太多；并且在那个目录里面，仍然是part-0000n命名的文件，不能自定义名称。因此，我们就思考能不能从文件名称入手，自定义文件名称而不是目录名称呢？&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;直接使用hdfs-api-append方法测试非生产&quot;&gt;直接使用HDFS API-append方法（测试，非生产）&lt;/h1&gt;
&lt;p&gt;为了实现自定义文件名称、减少目录层级、追加写文件的需要，有文章提示说可以直接调用HDFS的api-append。但是实际上，有资料表明，hadoop的版本1.0.4以后，API中已经有了追加写入的功能，但不建议在生产环境中使用，不过我们也可以测试下。&lt;br /&gt;
如果需要使用此方法，需要修改配置文件，开启此功能，把dfs.support.appen的参数设置为true，不然客户端写入的时候会报错：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Exception in thread &quot;main&quot; org.apache.hadoop.ipc.RemoteException: java.io.IOException: Append to hdfs not supported. Please refer to dfs.support.append configuration parameter.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;修改namenode节点上的hdfs-site.xml：&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;  
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;dfs.support.append&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;  
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者，可以直接在程序里面代码设置：&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setBoolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dfs.support.append&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//后续直接使用其创建fs如：
//var fs=FileSystem.get(uri, conf)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;并且需要注意的是，如果使用append追加写入文件，如果文件不存在，需求先创建。那么如果出现了这样的问题，你可能会直接像如下代码那么写（注意是错误的）：&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_sum1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样的话，会报如下错误：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Exception in thread &quot;main&quot; org.apache.hadoop.ipc.RemoteException: org.apache.hadoop.hdfs.protocol.AlreadyBeingCreatedException: failed to create file /hdfs/testfile/file for DFSClient_-14565853217 on client 132.90.130.101 because current leaseholder is trying to recreate file.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;通过搜索发现可能和fs句柄有关，因此解决的时候，可以创建完文件之后，关闭流fs，再次获得一次新的fs：&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_sum1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;经实践测试，上述方法仍可能报错：“org.apache.hadoop.hdfs.protocol.AlreadyBeingCreatedException”，异常的原因：FSDataOutputStream create(Path f) 产生了一个输出流，创建完后需要关闭。解决：创建完文件之后，关闭流FSDataOutputStream。因此可尝试使用如下：&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;c1&quot;&gt;//不重新读传入uri，则直接从操作系统环境变量获取
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;append to file:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path not exist&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// create(Path f) 产生了一个输出流，创建完后需要关闭,否则报错
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//fs.append不建议在生产环境使用
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FSDataOutputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;参考&lt;a href=&quot;https://www.cnblogs.com/byrhuangqiang/p/3926663.html&quot;&gt;Hadoop HDFS文件常用操作及注意事项（更新）遇到的问题2&lt;/a&gt;，&lt;a href=&quot;https://blog.csdn.net/liu0bing/article/details/78951415&quot;&gt;HDFS写入异常:追加文件第
一次抛异常&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此整体的写入HDFS的方法，我们这么写（假设这里测试数据的Iterator[(String,String)]元组，需要写入第二个字段），在spark调用的时候，每cache条写入一次：&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writeToHDFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strpath&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record_sum1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//初始化空串
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_sum1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//计数器
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;record_sum1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;count_sum1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_sum1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_sum1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_sum1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;record_sum1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count_sum1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_sum1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_sum1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在spark程序里面可以直接rdd处这样使用：&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//注意这里， 因为不需要返回值，所以用foreachPartition直接落地存储了最好。foreachPartition是collect算子，mapPartitions是transofmation。
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreachPartition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hdfs://cdh5hdfs/savepath/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;writeToHDFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          
       &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;       
       &lt;span class=&quot;c1&quot;&gt;//rdd.repartition(1).mapPartitions(iter=&amp;gt;{
&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//   val str=List[String]()
&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//   val strpath=&quot;hdfs://cdh5hdfs/savepath/&quot;+date+&quot;/&quot;+start_time
&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//   writeToHDFS(strpath,iter,300)
&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//   str.iterator
&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// }).collect()
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样的话，目录层次就变成了“hdfs://cdh5hdfs/savepath/当前日期/时间戳文件”内容即直接追加写入了以时间戳命名的文件中，减少了目录层级，并且能够自定义文件名称了。
但是使用此种方法，相当于一个partation建立一次HDFS连接，执行起来会特别慢，是否可以考虑向Kafka似的弄个连接池的方式提高效率，但是我没有这样实验，毕竟append被说是测试版本，不建议用于生产。&lt;/p&gt;
&lt;h1 id=&quot;需求更改&quot;&gt;需求更改&lt;/h1&gt;
&lt;p&gt;上面的操作均是是对数据没有任何区分，直接将数据写入文件中。但是，后来我们的需要因为业务需要而有所更改。&lt;br /&gt;
我们处理的数据也是从上游接收过来的，每条数据中都有记录此条数据生成的时间，但是我们实际收到的时间可能较生成有所延迟，所以不仅仅要求需要自定义存储的文件名，而且要根据数据内容（数据内容的生成时间字段），来决定将数据写入到哪个文件夹的哪个文件内。&lt;br /&gt;
比如如数据格式如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0|18610000000|460010000000000|2018|07|28|16-21-35|41003|22002|35004007800300|0000|||||0|||2018-07-28 16:21:35
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;因此，我们根据需求，生成的目录格式需要是：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dcos@d8pccdsj3[~]$hadoop fs -ls /savepath/2018-07-28
Found 11 items
drwxr-xr-x   - user1 cgroup          0 2018-07-28 10:42 /savepath/2018-07-28/00
drwxr-xr-x   - user1 cgroup          0 2018-07-28 09:48 /savepath/2018-07-28/01
drwxr-xr-x   - user1 cgroup          0 2018-07-28 09:40 /savepath/2018-07-28/02
drwxr-xr-x   - user1 cgroup          0 2018-07-28 08:54 /savepath/2018-07-28/03
drwxr-xr-x   - user1 cgroup          0 2018-07-28 10:26 /savepath/2018-07-28/04
drwxr-xr-x   - user1 cgroup          0 2018-07-28 10:30 /savepath/2018-07-28/05
drwxr-xr-x   - user1 cgroup          0 2018-07-28 10:38 /savepath/2018-07-28/06
drwxr-xr-x   - user1 cgroup          0 2018-07-28 10:26 /savepath/2018-07-28/07
drwxr-xr-x   - user1 cgroup          0 2018-07-28 10:42 /savepath/2018-07-28/08
drwxr-xr-x   - user1 cgroup          0 2018-07-28 10:42 /savepath/2018-07-28/09
drwxr-xr-x   - user1 cgroup          0 2018-07-28 11:42 /savepath/2018-07-28/10
...
drwxr-xr-x   - user1 cgroup          0 2018-07-28 16:40 /savepath/2018-07-28/16
...
drwxr-xr-x   - user1 cgroup          0 2018-07-29 00:30 /savepath/2018-07-28/23
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;即目录要求为/savepath/日期/小时/文件名，文件名需要辨识当前此文件的写入时间（即系统时间），而目录名称的日期和小时需要根据数据里面的业务时间决定，即上述示例数据的第18个字段，那么上面那条数据就需要放在/savepath/2018-07-28/16目录下的某个文件内（如16-16-06-00）。&lt;br /&gt;
所以来说，根据这个需求，我们是不能直接使用saveAsTextFile的，因为文件名称需要自定义；而也尝试直接用append的时候有很大的麻烦，需要根据每条数据内容来决定放入某个目录和文件，并且数据可能延迟比如说现在10点，能零零散散收到几条3点的数据，所以来说在使用append的时候把每条数据的提取日期等信息处理成了三元组的形式来在writeToHDFS方法里面提取时间决定目录和文件名称，但是使用起来还是很复杂并且处理和写入时间太长，影响实时性，并且append还是测试方法不适合投入生产。因此，最终再寻找了下面的最终方法。&lt;/p&gt;
&lt;h1 id=&quot;最终方法-saveashadoopfile自定义的rddmultipletextoutputformat&quot;&gt;最终方法-saveAsHadoopFile+自定义的RDDMultipleTextOutputFormat&lt;/h1&gt;
&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;为了解决上述需求，我需要另寻找解决办法。我们还是从spark本身的算子入手，可以先看一下saveAsTextFile的源码：&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
   * Save this RDD as a text file, using string representations of elements.
   */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveAsTextFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withScope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// https://issues.apache.org/jira/browse/SPARK-2075
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// NullWritable is a `Comparable` in Hadoop 1.+, so the compiler cannot find an implicit Ordering for it and will use the default `null`. However, it's a `Comparable[NullWritable]`in Hadoop 2.+, so the compiler will call the implicit `Ordering.ordered` method to create an Ordering for `NullWritable`. That's why the compiler will generate different anonymous classes for `saveAsTextFile` in Hadoop 1.+ and Hadoop 2.+.Therefore, here we provide an explicit Ordering `null` to make sure the compiler generate same bytecodes for `saveAsTextFile`.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullWritableClassTag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implicitly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ClassTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NullWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textClassTag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implicitly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ClassTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapPartitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NullWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;RDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rddToPairRDDFunctions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullWritableClassTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textClassTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveAsHadoopFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NullWritable&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
   * Save this RDD as a compressed text file, using string representations of elements.
   */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveAsTextFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CompressionCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withScope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// https://issues.apache.org/jira/browse/SPARK-2075
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullWritableClassTag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implicitly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ClassTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NullWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textClassTag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implicitly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ClassTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapPartitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NullWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;RDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rddToPairRDDFunctions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullWritableClassTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textClassTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveAsHadoopFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NullWritable&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以发现，saveAsTextFile函数是依赖于saveAsHadoopFile函数，由于saveAsHadoopFile函数接受PairRDD，所以在saveAsTextFile函数中利用rddToPairRDDFunctions函数转化为(NullWritable,Text)类型的RDD，然后通过saveAsHadoopFile函数实现相应的写操作。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;参考：&lt;a href=&quot;https://www.jianshu.com/p/4d4a7fdaca5c&quot;&gt;【SparkJavaAPI】Action(6)—saveAsTextFile、saveAsObjectFile&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;并且我们通过saveAsTextFile的源码看到，可以看出Spark内部写文件方式其实调用的都是Hadoop那一套东西，当saveAsTextFile调用saveAsHadoopFile方法时候，默认OutputFormat使用的是TextOutputFormat[NullWritable, Text]。&lt;br /&gt;
而对于TextOutputFormat，在Hadoop的MapReduce中多文件输出默认就是TextOutputFormat，因此默认输出为part-r-00000和part-r-00001依次递增的文件名，所有Mapreduce作业都输出一组文件，并没有和我们的需求一样，根据文件内容输出多组文件或者把一个数据集分为多个数据集（比如说将一个log里面属于不同业务线的日志分开来输出，并交给相关的业务线，或者像我们这种根据数据时间分文件存储）。而在Hadoop中，Hadoop的多文件输出根据Key或者Value的不同将属于不同的类型记录写到不同的文件中的需求，可以使用MultipleOutputFormat或者MultipleOutputs替换TextOutputFormat来解决。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;具体可以参考以下文章，虽然文章时间较长了，但是都写的非常好，可以参考学习：&lt;a href=&quot;https://www.iteblog.com/archives/842.html&quot;&gt;“Hadoop多文件输出：MultipleOutputFormat和MultipleOutputs深究(一)”&lt;/a&gt;、&lt;a href=&quot;https://www.iteblog.com/archives/848.html&quot;&gt;“Hadoop多文件输出：MultipleOutputFormat和MultipleOutputs深究(二)”&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/dajuezhao/article/details/5799388&quot;&gt;“Hadoop的MultipleOutputFormat使用”&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此，既然Spark内部写文件方式其实调用的都是Hadoop那一套东西，所以，我们就可以使用saveAsHadoopFile，自定义一个MultipleOutputFormat的OutputFormat类就可以了。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;题外话：到这里，就可以继续我们下面的工作直接解决问题了，不过看到这里我就有了个疑问，既然saveAsTextFile默认使用TextOutputFormat向hdfs输出文件，但是默认的文件输出文件名称为part-00000和part-00001依次递增的文件名，而hadoop默认输出的是part-r-00000，想知道文件名称是什么时候变化的呢，因此就追踪了一下spark源码学习学习，关于这个问题的源码分析，后续有时间再写文章说明。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;代码编写&quot;&gt;代码编写&lt;/h2&gt;
&lt;p&gt;下面我们开始正式的如何使用spark实现多文件输出，根据文件内容划分文件存储并且自定义文件名称。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/qq_19917081/article/details/56841299&quot;&gt;“spark streaming实现根据文件内容自定义文件名并实现文件内容追加”&lt;/a&gt;、&lt;a href=&quot;https://www.iteblog.com/archives/1281.html&quot;&gt;“Spark多文件输出(MultipleOutputFormat)”&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;saveashadoopfile算子&quot;&gt;saveAsHadoopFile算子&lt;/h3&gt;
&lt;p&gt;首先看看一下&lt;strong&gt;saveAsHadoopFile&lt;/strong&gt;算子的官方说明：&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cm&quot;&gt;/**
   * Output the RDD to any Hadoop-supported file system, using a Hadoop `OutputFormat` class supporting the key and value types K and V in this RDD.
   */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveAsHadoopFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;K&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ClassTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; 
 &lt;span class=&quot;cm&quot;&gt;/**
   * Output the RDD to any Hadoop-supported file system, using a Hadoop `OutputFormat` class supporting the key and value types K and V in this RDD. Compress the result with the supplied codec.
   */&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveAsHadoopFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;K&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CompressionCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ClassTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; 
&lt;span class=&quot;cm&quot;&gt;/**
   * Output the RDD to any Hadoop-supported file system, using a Hadoop `OutputFormat` class supporting the key and value types K and V in this RDD. Compress with the supplied codec.
   */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveAsHadoopFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;keyClass&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;valueClass&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;outputFormatClass&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CompressionCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; 
 &lt;span class=&quot;cm&quot;&gt;/**
   * Output the RDD to any Hadoop-supported file system, using a Hadoop `OutputFormat` class supporting the key and value types K and V in this RDD.
   * @note We should make sure our tasks are idempotent when speculation is enabled, i.e. do not use output committer that writes data directly.
   * There is an example in https://issues.apache.org/jira/browse/SPARK-10063 to show the bad result of using direct output committer with speculation enabled.
   */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveAsHadoopFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;keyClass&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;valueClass&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;outputFormatClass&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JobConf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JobConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hadoopConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CompressionCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里我们要使用的算子是:&lt;br /&gt;
&lt;strong&gt;def saveAsHadoopFile(path: String,keyClass: Class[&lt;em&gt;],valueClass: Class[&lt;/em&gt;],outputFormatClass: Class[_ &amp;lt;: OutputFormat[&lt;em&gt;, _]],conf: JobConf = new JobConf(self.context.hadoopConfiguration),codec: Option[Class[&lt;/em&gt; &amp;lt;: CompressionCodec]] = None): Unit&lt;/strong&gt;&lt;br /&gt;
这个算子里需要传入的参数依次是：文件路径、key类型、value类型、outputFormat方式。&lt;br /&gt;
之前用的saveAsTextFile，在&lt;strong&gt;org.apache.spark.rdd.RDD&lt;/strong&gt;类中，而saveAsHadoopFile算子属于&lt;strong&gt;org.apache.spark.rdd.PairRDDFunctions&lt;/strong&gt;类，需要接收的参数是PairRDD，所以我们在使用前需要将原来的rdd做一下map操作，变成(key, value) 形式，这里先不详细说，在最后贴出来的代码之后再说一次。因此，我们暂且定（K，V）类型为classOf[String]、classOf[String]，再之后传入hdfs保存目录、类型，剩下的就是关键的需要传入OutputFormat，按照上面的分析，我们要自定义一个MultipleOutputFormat。&lt;/p&gt;

&lt;h3 id=&quot;multipleoutputformat分析&quot;&gt;MultipleOutputFormat分析&lt;/h3&gt;
&lt;p&gt;下面我们先看一下MultipleOutputFormat的源码：&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * This abstract class extends the FileOutputFormat, allowing to write the
 * output data to different output files. There are three basic use cases for
 * this class. 
 * Case one: This class is used for a map reduce job with at least one reducer.
 * The reducer wants to write data to different files depending on the actual
 * keys. It is assumed that a key (or value) encodes the actual key (value)
 * and the desired location for the actual key (value).
 * Case two: This class is used for a map only job. The job wants to use an
 * output file name that is either a part of the input file name of the input
 * data, or some derivation of it.
 * Case three: This class is used for a map only job. The job wants to use an
 * output file name that depends on both the keys and the input file name,
 */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@InterfaceAudience&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Public&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@InterfaceStability&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Stable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MultipleOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
   * Create a composite record writer that can write key/value data to different
   * output files
   * @param fs
   *          the file system to use
   * @param job
   *          the job conf for the job
   * @param name
   *          the leaf file name for the output file (such as part-00000&quot;)
   * @param arg3
   *          a progressable for reporting progress.
   * @return a composite record writer
   * @throws IOException
   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JobConf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Progressable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateLeafFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JobConf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Progressable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myProgressable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// a cache storing the record writers for different output files.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;TreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recordWriters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;();&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// get the file name based on the key&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyBasedPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateFileNameForKeyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// get the file name based on the input file name&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finalPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInputFileBasedOutputFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyBasedPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// get the actual key&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateActualKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateActualValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;RecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recordWriters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finalPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// if we don't have the record writer yet for the final path, create&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// one&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// and add it to the cache&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getBaseRecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finalPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myProgressable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recordWriters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finalPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reporter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recordWriters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;RecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recordWriters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recordWriters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
   * Generate the leaf name for the output file name. The default behavior does not change the leaf file name (such as part-00000) 
   * @param name
   *          the leaf file name for the output file
   * @return the given leaf file name
   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateLeafFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
   * Generate the file output file name based on the given key and the leaf file
   * name. The default behavior is that the file name does not depend on the
   * key. 
   * @param key
   *          the key of the output data
   * @param name
   *          the leaf file name
   * @return generated file name
   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateFileNameForKeyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
   * Generate the actual key from the given key/value. The default behavior is that
   * the actual key is equal to the given key 
   * @param key
   *          the key of the output data
   * @param value
   *          the value of the output data
   * @return the actual key derived from the given key/value
   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateActualKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
   * Generate the actual value from the given key and value. The default behavior is that
   * the actual value is equal to the given value 
   * @param key
   *          the key of the output data
   * @param value
   *          the value of the output data
   * @return the actual value derived from the given key/value
   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateActualValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
   * Generate the outfile name based on a given anme and the input file name. If
   * the {@link JobContext#MAP_INPUT_FILE} does not exists (i.e. this is not for a map only job),
   * the given name is returned unchanged. If the config value for
   * &quot;num.of.trailing.legs.to.use&quot; is not set, or set 0 or negative, the given
   * name is returned unchanged. Otherwise, return a file name consisting of the
   * N trailing legs of the input file name where N is the config value for
   * &quot;num.of.trailing.legs.to.use&quot;. 
   * @param job
   *          the job config
   * @param name
   *          the output file name
   * @return the outfile name based on a given anme and the input file name.
   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInputFileBasedOutputFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JobConf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infilepath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MRJobConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAP_INPUT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infilepath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// if the {@link JobContext#MAP_INPUT_FILE} does not exists,&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// then return the given name&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numOfTrailingLegsToUse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mapred.outputformat.numOfTrailingLegs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numOfTrailingLegsToUse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infilepath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numOfTrailingLegsToUse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;midName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;outPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
   * @param fs
   *          the file system to use
   * @param job
   *          a job conf object
   * @param name
   *          the name of the file over which a record writer object will be
   *          constructed
   * @param arg3
   *          a progressable object
   * @return A RecordWriter object over the given file
   * @throws IOException
   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBaseRecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;JobConf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Progressable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在源码的最开始，我们看到对于MultipleOutputFormat&amp;lt;K, V&amp;gt;的描述，它可以将相似的记录输出到相同的数据集。我们可以看出，在写每条记录之前，MultipleOutputFormat将调用generateFileNameForKeyValue方法来确定需要写入的文件名。&lt;br /&gt;
通过下图源码我们可以看出，在getRecordWriter中，对于文件名称的生成会先调用generateLeafFileName方法，而其只是传入了“name”来生成文件的leaf名称（图中标号1的myName），而此部分传入的name即默认的每个part生成的文件名称（如part-0000，关于这个name的值，也可以继续向父类FileOutputFormat或MultipleOutputs类继续挖掘，找出来为何这个默认值，或者参考后续的关于spark这里的源码说明文档，这里就不说明了）；而之后生成的myName会传入generateFileNameForKeyValue的方法，这个方法接受3个参数，可以根据k、v以及传入的name再次生成一个KeyBasePath即文件名称（图中标号2），之后获取到的KeyBasePath再作为参数传入getInputFileBasedOutputFileName方法生成finalPath。可以看到在默认情况下，我们看到generateLeafFileName方法和generateFileNameForKeyValue的方法均是直接&lt;strong&gt;“return name”&lt;/strong&gt;，因此默认情况下得到name==myName==KeyBasePath，文件的名称即为part-0000。&lt;br /&gt;
&lt;img src=&quot;https://github.com/leafming/bak/blob/master/images/spark/2018-07-26-SparkStreaming写入数据到HDFS-Outputformat方法说明.png?raw=true&quot; alt=&quot;MultipleOutputFormat-文件名称生成&quot; /&gt;&lt;br /&gt;
所以，为了根据内容来确定写入的文件名称，generateLeafFileName只与name有关（后续写个示例中测试一下generateLeafFileName），而generateFileNameForKeyValue与内容key、value、name均有关，所以我们就直接在自己的类中重写generateFileNameForKeyValue方法即可。&lt;br /&gt;
不过，我们需要写入的是文本，所以通常情况下，我们可以直接继承MultipleTextOutputFormat类，来完成实现generateFileNameForKeyValue方法以返回每个输出键/值对的文件名。MultipleTextOutputFormat也是继承的MultipleOutputFormat类，可以在官方文档的说明的&lt;a href=&quot;http://hadoop.apache.org/docs/current/api/org/apache/hadoop/mapred/lib/MultipleTextOutputFormat.html&quot;&gt;MultipleTextOutputFormat&lt;/a&gt;也可以看到类的继承关系。&lt;br /&gt;
MultipleTextOutputFormat的官方描述如下：&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * This class extends the MultipleOutputFormat, allowing to write the output
 * data to different output files in Text output format.
 */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@InterfaceAudience&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Public&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@InterfaceStability&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Stable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MultipleTextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MultipleOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theTextOutputFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBaseRecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JobConf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Progressable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theTextOutputFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;theTextOutputFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theTextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRecordWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;它默认能够将以text的格式将数据输出到不同的目录中，我们需要输出的也是文本，只不过是写入目录需要自定义一下，所以我们只需要继承MultipleTextOutputFormat来自定义一个类即可。&lt;/p&gt;
&lt;h3 id=&quot;测试generateleaffilename补充可略过&quot;&gt;测试generateLeafFileName（补充，可略过）&lt;/h3&gt;
&lt;p&gt;上面我们说了MultipleOutputFormat中有两个决定文件名称的方法，generateLeafFileName和generateFileNameForKeyValue，我们在正式代码前，先直接写入文件系统测试下generateLeafFileName，可略过。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;自定义一个OutputFormat名称为TestMultipleTextOutputFormat。
    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.ileaf.test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.text.SimpleDateFormat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Date&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.mapred.lib.MultipleTextOutputFormat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestMultipleTextOutputFormat&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MultipleTextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HOURFORMAT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HH-mm-ss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;YMDFORMAT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-mm-dd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HOURFORMAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;YMDFORMAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateLeafFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;spark程序中测试使用
    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.rdd.RDD&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSparkSave&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sparkConf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setMaster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAppName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flatMap Demo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0|18610000000|460010000000000|2018|07|21|16-21-35|41003|22002|35004007800300|0000|||||0|||2018-07-21 16:21:35&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;0|18610000001|460010000000001|2018|07|21|15-21-35|41000|22000|35004007800301|0000|||||0|||2018-07-21 15:21:35&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;0|18610000002|460010000000002|2018|07|21|15-20-35|41000|22001|35004007800302|0000|||||0|||2018-07-21 15:20:35&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;0|18610000003|460010000000003|2018|07|21|17-21-35|41001|22002|35004007800303|0000|||||0|||2018-07-21 17:21:35&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdd1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;rdd1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rapartation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveAsHadoopFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/Users/yeziming/test/saveDir&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RDDMultipleTextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后我们运行一下程序，可以看到生成的文件(日期有点问题。。不管了)：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yezm:saveDir yeziming$ ls
2018-24-28    _SUCCESS
yezm:saveDir yeziming$ cd 2018-24-28/
yezm:2018-24-28 yeziming$ ls -l
total 16
-rw-r--r--  1 yeziming  staff  222  7 28 11:24 11-24-44_part-00000
-rw-r--r--  1 yeziming  staff  222  7 28 11:24 11-24-44_part-00001
yezm:2018-24-28 yeziming$ cat 11-24-44_part-00000
0|18610000000|460010000000000|2018|07|21|16-21-35|41003|22002|35004007800300|0000|||||0|||2018-07-21 16:21:35
0|18610000002|460010000000002|2018|07|21|15-20-35|41000|22001|35004007800302|0000|||||0|||2018-07-21 15:20:35
yezm:2018-24-28 yeziming$ cat 11-24-44_part-00001
0|18610000001|460010000000001|2018|07|21|15-21-35|41000|22000|35004007800301|0000|||||0|||2018-07-21 15:21:35
0|18610000003|460010000000003|2018|07|21|17-21-35|41001|22002|35004007800303|0000|||||0|||2018-07-21 17:21:35
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以看到，我们文件名称的拼接使用的是“val filename=dirName+”/”+fileName+”_“+name”，因此是时间+name的方式传入的，所以可以看出，name的值果然是part-0000n，后面的数字为partation的标号，所以我们在使用的过程中，也可以留下来默认的name的值的标号来区分不同的partation。&lt;/p&gt;
&lt;h3 id=&quot;正式代码编写&quot;&gt;正式代码编写&lt;/h3&gt;
&lt;p&gt;下面，我们开始根据业务的正式的代码编写，经过了以上分析，写起来也很简单。(业务需求见上述4需求更改部分)&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;SparkStreaming程序中使用saveAsHadoopFile&lt;br /&gt;
我们在SparkStreaming程序中，使用saveAsHadoopFile算子。由于之前的数据是rdd，而saveAsHadoopFile需要的是pairRDD，因此，我们使用map将数据转换一下，数据内容作为key，空串“”作为value，这里需要与后续我们自定义的RDDMultipleTextOutputFormat生成文件名称的时候相对应。&lt;br /&gt;
后续我们自定义的RDDMultipleTextOutputFormat，与文件基础路径、key格式、value格式一同传入saveAsHadoopFile算子中。
    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//...部分内容
&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveDstream&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeDStrem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repartition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numHdfsFile_Repartition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;//保存处理后的数据到hdfs
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveDstream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreachRDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// driver端运行，涉及操作：广播变量的初始化和更新
&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 这里的数据就是一个批次生成一次，然后下发到不同的patition的时候数据是一样的
&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;logInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; No Data in this batchInterval --------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;//这里，因为saveAsHadoopFile需要接受pairRDD，所以用map转换一下
&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveAsHadoopFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdfsPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RDDMultipleTextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;competeTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Processed data write to hdfs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//foreachRDD
//...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;自定义RDDMultipleTextOutputFormat继承MultipleTextOutputFormat[Any, Any]&lt;br /&gt;
因为我们这里继承的是MultipleTextOutputFormat，已经帮我把getRecordWriter重写好了，所以我们就很方便简单的重写一个generateFileNameForKeyValue，来根据数据内容划分文件目录就好了。
    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.text.SimpleDateFormat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Date&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.mapred.lib.MultipleTextOutputFormat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RDDMultipleTextOutputFormat&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MultipleTextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\\|&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HOURFORMAT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HH-mm-ss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HOURFORMAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateFileNameForKeyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;//0|18610000000|460010000000000|2018|07|21|16-21-35|41003|22002|35004007800300|0000|||||0|||2018-07-21 16:21:35
&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;//2018-01-24 12:58:16:@TODO 这里有个问题：如果time是空可能会报错，有时间再处理，目前此字段经过之前处理都非空
&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ymd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service_date&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ymd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//.split(&quot;-&quot;)(0)
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service_date&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;在generateFileNameForKeyValue方法中，我们根据上面用map转换的“rdd.map(x=&amp;gt;(x,””))”，则key为数据内容。所以对key进行切分，取第18个字段的日期来作为目录生成的依据。并且我们截取默认name的后两位，来作为partation编号，所以我们最后生成的文件路径名为“文件基础路径（即上述saveAsHadoopFile中传入的hdfsPath）/业务年月日/业务小时/文件写入时间_part编号”。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，最终显示样式可如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//这次就是数据有延迟，12:12才写入12点目录中
dcos@d8pccdsj3[~]$hadoop fs -ls /encrypt_data/4g_info_c60/2018-07-28/12
Found 40 items
-rw-r--r--   3 user1 cgroup    6541003 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-05-00
-rw-r--r--   3 user1 cgroup    6555677 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-05-01
-rw-r--r--   3 user1 cgroup    6538441 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-05-02
-rw-r--r--   3 user1 cgroup    6567709 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-05-03
-rw-r--r--   3 user1 cgroup    6570481 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-05-04
-rw-r--r--   3 user1 cgroup   29486262 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-22-00
-rw-r--r--   3 user1 cgroup   29477123 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-22-01
-rw-r--r--   3 user1 cgroup   29476448 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-22-02
-rw-r--r--   3 user1 cgroup   29425074 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-22-03
-rw-r--r--   3 user1 cgroup   29435407 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-22-04
-rw-r--r--   3 user1 cgroup   66757368 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-43-00
-rw-r--r--   3 user1 cgroup   66862913 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-43-01
-rw-r--r--   3 user1 cgroup   66854597 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-43-02
-rw-r--r--   3 user1 cgroup   66809042 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-43-03
-rw-r--r--   3 user1 cgroup   66777279 2018-07-28 12:12 /encrypt_data/4g_info_c60/2018-07-28/12/12-12-43-04
-rw-r--r--   3 user1 cgroup   73288280 2018-07-28 12:13 /encrypt_data/4g_info_c60/2018-07-28/12/12-13-03-00
-rw-r--r--   3 user1 cgroup   73285173 2018-07-28 12:13 /encrypt_data/4g_info_c60/2018-07-28/12/12-13-03-01
-rw-r--r--   3 user1 cgroup   73355198 2018-07-28 12:13 /encrypt_data/4g_info_c60/2018-07-28/12/12-13-03-02
-rw-r--r--   3 user1 cgroup   73337561 2018-07-28 12:13 /encrypt_data/4g_info_c60/2018-07-28/12/12-13-03-03
-rw-r--r--   3 user1 cgroup   73320851 2018-07-28 12:13 /encrypt_data/4g_info_c60/2018-07-28/12/12-13-03-04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;大功告成！&lt;/p&gt;

&lt;h1 id=&quot;补充-需求2实现-validateoutputspecs参数-2018-09-03&quot;&gt;补充-需求2实现-validateOutputSpecs参数-2018-09-03&lt;/h1&gt;
&lt;h2 id=&quot;需求描述&quot;&gt;需求描述&lt;/h2&gt;
&lt;p&gt;数据从很多接口接入，每条数据的第一个字段标明接口来源，需使用spark streaming程序，实时根据将数据根据不同的接口标注，写入到HDFS对应的目录的对应文件之中。&lt;br /&gt;
数据样式：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;60,2018-08-14 10:16:50.062211990,2018-08-14 10:17:28.652398109,0,6......
61,2018-08-14 10:16:47.095155954,2018-08-14 10:17:21.435997962,0,52......
62,2018-08-14 10:17:05.457761049,2018-08-14 10:17:28.077723979,0,6......
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;解决&quot;&gt;解决&lt;/h2&gt;
&lt;p&gt;此需求跟上述问题解决方案一摸一样，也是重写自己的RDDMultipleTextOutputFormat即可。代码示例如下:&lt;/p&gt;
&lt;h3 id=&quot;重写的rddmultipletextoutputformat&quot;&gt;重写的RDDMultipleTextOutputFormat&lt;/h3&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.text.SimpleDateFormat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Date&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.mapred.lib.MultipleTextOutputFormat&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RDDMultipleTextOutputFormat&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MultipleTextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PREFLAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;YMDFORMAT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyyMMdd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;YMDHMFORMAT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyyMMddHHmm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;YMDFORMAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;YMDHMFORMAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xx-xxxxx-events-&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileSuffix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.txt&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateFileNameForKeyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PREFLAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filePrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileSuffix&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;本机测试调用&quot;&gt;本机测试调用&lt;/h3&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.rdd.RDD&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
  * Create by Liv on 2018/8/31.
  */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestXXOriFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sparkConf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setMaster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAppName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flatMap Demo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*
    不设置此参数，会报错：
    Exception in thread &quot;main&quot; org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory file:/Users/yeziming/test/xxdata already exists
    此参数含义：
    若设置为true，saveAsHadoopFile会验证输出目录是否存在。
    虽然设为false可以忽略文件存在的异常，但建议使用 Hadoop文件系统的API手动删除输出目录。
    当通过Spark Streaming的StreamingContext时本参数会被忽略，因为当进行checkpoint恢复时会重写已经存在的文件。
    */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spark.hadoop.validateOutputSpecs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Users/yeziming/IdeaProjects/SparkAclKafka/resource/table_data.properties&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairRdd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pairRdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repartition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveAsHadoopFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/Users/yeziming/test/xxdata&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RDDMultipleTextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;为了测试RDDMultipleTextOutputFormat的文件目录格式写的是否正确，所以在本机使用sparkcore写spark程序测试了一下，但是在测试的过程中，在最初的时候，没有设置spark.hadoop.validateOutputSpecs，因此每次执行一次之后，如果不删除原来的目录，则会报错如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Exception in thread &quot;main&quot; org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory file:/Users/yeziming/test/xxdata already exists
	at org.apache.hadoop.mapred.FileOutputFormat.checkOutputSpecs(FileOutputFormat.java:132)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;是因为在spark中也是用的hadoop那一套，所以原来mr中保存文件的时候，其中的org.apache.hadoop.mapred.FileOutputFormat.checkOutputSpecs方法会检查输出目录是否合法，如果没有指定，则抛出InvalidJobConfException，文件已经存在则抛出FileAlreadyExistsException。&lt;br /&gt;
因此，因为再次执行，目录是存在的，所以会报出FileAlreadyExistsException的错误。&lt;br /&gt;
可是之前直接通过spark streaming程序的时候，并没有出现这个错误。查询这个错误怎么解决的时候，大部分都说自己删除目录即可。后来通过查询spark的参数设置，发现了“spark.hadoop.validateOutputSpecs”这个参数。其说明如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spark.hadoop.validateOutputSpecs
默认是true。若设置为true，saveAsHadoopFile会验证输出目录是否存在。虽然设为false可以忽略文件存在的异常，但建议使用 Hadoop文件系统的API手动删除输出目录。当通过Spark Streaming的StreamingContext时本参数会被忽略，因为当进行checkpoint恢复时会重写已经存在的文件。  
If set to true, validates the output specification (e.g. checking if the output directory already exists) used in saveAsHadoopFile and other variants. This can be disabled to silence exceptions due to pre-existing output directories. We recommend that users do not disable this except if trying to achieve compatibility with previous versions of Spark. Simply use Hadoop's FileSystem API to delete output directories by hand. This setting is ignored for jobs generated through Spark Streaming's StreamingContext, since data may need to be rewritten to pre-existing output directories during checkpoint recovery.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所以，我们再用spark streaming程序的时候，不会出现这个问题。&lt;br /&gt;
因此，如果后续使用spark core程序的时候，如果出现了此问题，想要覆盖目录，则可设置此参数。&lt;br /&gt;
注意：文件名称不同，文件是不会覆盖的。&lt;br /&gt;
通过设置了这个参数之后，再次运行我上面写的程序，目录下的文件如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yezm:20180903 yeziming$ ls
xx-xxxxx-events-60-20180903132300.txt
xx-xxxxx-events-60-20180903132301.txt
xx-xxxxx-events-60-20180903132400.txt
xx-xxxxx-events-60-20180903132401.txt
xx-xxxxx-events-60-20180903134300.txt
xx-xxxxx-events-60-20180903134301.txt
xx-xxxxx-events-61-20180903132300.txt
xx-xxxxx-events-61-20180903132301.txt
xx-xxxxx-events-61-20180903132400.txt
xx-xxxxx-events-61-20180903132401.txt
xx-xxxxx-events-61-20180903134300.txt
xx-xxxxx-events-61-20180903134301.txt
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;即，我的输出文件是以分钟命名的，所以在不同的分钟运行多次，会在那个目录里面生成多个文件，并不会将文件覆盖。&lt;br /&gt;
但是，一般情况下，是建议不设置这个参数的，因为需要将hdfs中的旧文件删除的话。&lt;br /&gt;
具体spark中删除HDFS目录，有个文章中写了但是没有测试，可以参考&lt;a href=&quot;https://blog.csdn.net/zhouyan8603/article/details/51658950&quot;&gt;spark删除hdfs文件&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;至此，本篇内容完成。&lt;br /&gt;
本文由2018-07-02开始建立文档，于2018-07-28整理完成，几乎历时一个月，期间断断续续抽时间整理成文，很有收获。&lt;br /&gt;
2018-09-03更新6补充需求2。&lt;/p&gt;</content><author><name>叶子  ( ˘ ³˘)♥</name></author><category term="Spark" /><category term="HDFS" /><summary type="html">之前的Spark实时流处理的数据处理程序，要求把数据从kafka接收之后，分2路分别写入kafka和hdfs，写入kafka的部分之前已经有过总结，现在回过头来把之前的写入HDFS的地方重新总结一下，整个过程从头到尾有一个写入方式的优化，不过时间有点长啦，尽量描述完整( ˘ ³˘)♥。 注意: 本文中使用的版本是spark2.2.1和2.6.0-cdh5.11.0</summary></entry></feed>